{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Composive - Responsive &amp; Adaptive UI Library","text":"<p>Welcome to the comprehensive documentation for Composive - the ultimate responsive and adaptive design library for Compose Multiplatform!</p>"},{"location":"#what-is-composive","title":"\ud83c\udfaf What is Composive?","text":"<p>Composive makes it effortless to create responsive and adaptive UIs that work beautifully across mobile, tablet, and desktop platforms. With platform-smart defaults and extensive customization options, your apps will feel native on every platform.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<p>\ud83d\udd04 Smart Responsive Design - Automatic screen size detection and fluid typography scaling \ud83c\udfad Cross-Platform Theme Adaptation - Platform-smart defaults with dual theme system \ud83d\udcf1 Device-Aware Components - WindowSizeClass integration and orientation handling \ud83d\udee0\ufe0f Developer Experience - Zero-configuration setup with type-safe builders \ud83d\udd25 Hot Reload Magic - Test all layouts by resizing desktop window  </p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme {\n        val deviceConfig = rememberDeviceConfiguration()\n\n        when (deviceConfig) {\n            DeviceConfiguration.MOBILE_PORTRAIT -&gt; MobileLayout()\n            DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n            else -&gt; TabletLayout()\n        }\n    }\n}\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":""},{"location":"#getting-started","title":"\ud83c\udfd7\ufe0f Getting Started","text":"<ul> <li>Installation - Add Composive to your project</li> <li>Getting Started - Your first responsive app</li> <li>Examples - Real-world implementation patterns</li> </ul>"},{"location":"#core-concepts","title":"\ud83c\udfa8 Core Concepts","text":"<ul> <li>Device Configuration - Responsive layout decisions</li> <li>Configuration - Themes, typography &amp; dimensions</li> <li>Typography - Responsive text styling</li> </ul>"},{"location":"#design-system","title":"\ud83d\udccf Design System","text":"<ul> <li>Responsive Dimensions - Adaptive spacing and sizing</li> </ul>"},{"location":"#reference","title":"\ud83d\udcd6 Reference","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Migration Guide - Upgrade from older versions</li> </ul>"},{"location":"#community","title":"\ud83e\udd1d Community","text":"<ul> <li>Contributing - Help improve Composive</li> <li>Credits - Acknowledgments and licenses</li> </ul>"},{"location":"#pro-tip-desktop-development","title":"\ud83d\udd25 Pro Tip: Desktop Development","text":"<p>Skip emulators and previews! Run your app on desktop and resize the window to instantly test all layouts:</p> <pre><code>./gradlew desktopRunHot --mainClass com.example.myApp.MainKt --stacktrace --auto\n</code></pre> Window Width Device Type Perfect For Testing &lt; 600dp \ud83d\udcf1 Mobile Portrait Phone apps 600-840dp \ud83d\udcf1 Mobile Landscape Phone landscape 840-1200dp \ud83d\udda5\ufe0f Tablet Tablet apps &gt; 1200dp \ud83d\udcbb Desktop Desktop apps"},{"location":"#device-configuration-quick-reference","title":"\ud83d\udcf1 Device Configuration Quick Reference","text":"<pre><code>val deviceConfig = rememberDeviceConfiguration()\n\n// Check device type\ndeviceConfig.isMobile()    // Phone\ndeviceConfig.isTablet()    // Tablet\ndeviceConfig.isDesktop()   // Desktop\n\n// Get layout recommendations\ndeviceConfig.getRecommendedColumns()  // 1-4 columns\ndeviceConfig.isPortrait()            // Portrait orientation\ndeviceConfig.isLandscape()           // Landscape orientation\n</code></pre>"},{"location":"#theme-access-quick-reference","title":"\ud83c\udfa8 Theme Access Quick Reference","text":"<pre><code>// Access responsive values anywhere\nText(\n    text = \"Hello World\",\n    style = AppTheme.materialTypography.headlineSmall,\n    fontWeight = AppTheme.fontWeights.heading,\n    modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n)\n\n// Platform information\nval platform = AppTheme.platform\nwhen {\n    platform.isAndroid() -&gt; AndroidSpecificCode()\n    platform.isIOS() -&gt; IOSSpecificCode()\n    platform.isDesktop() -&gt; DesktopSpecificCode()\n}\n</code></pre>"},{"location":"#complete-apptheme-properties","title":"\ud83d\udccb Complete AppTheme Properties","text":"Category Property Type Example Usage \ud83d\udccf Dimensions <code>dimensions</code> <code>Dimensions</code> <code>AppTheme.dimensions.cardPadding</code> \ud83d\udcd0 Orientation <code>orientation</code> <code>Orientation</code> <code>AppTheme.orientation == Orientation.Portrait</code> \u2696\ufe0f Font Weights <code>fontWeights</code> <code>ResponsiveFontWeights</code> <code>AppTheme.fontWeights.semiBold</code> \ud83d\udcdd Material Typography <code>materialTypography</code> <code>androidx.compose.material3.Typography</code> <code>AppTheme.materialTypography.headlineLarge</code> \ud83c\udf4e Cupertino Typography <code>cupertinoTypography</code> <code>com.slapps.cupertino.theme.Typography</code> <code>AppTheme.cupertinoTypography.largeTitle</code> \ud83c\udfa8 Material Colors <code>materialColors</code> <code>MaterialColorScheme</code> <code>AppTheme.materialColors.primary</code> \ud83c\udfa8 Cupertino Colors <code>cupertinoColors</code> <code>ColorScheme</code> <code>AppTheme.cupertinoColors.accent</code> \u2699\ufe0f Configuration <code>configuration</code> <code>ResponsiveConfiguration</code> <code>AppTheme.configuration.defaultThemeType</code> \ud83d\udcf1 Platform <code>platform</code> <code>Platform</code> <code>AppTheme.platform.isAndroid()</code>"},{"location":"#most-used-properties","title":"\ud83c\udfaf Most Used Properties","text":"Property Small Screens Large Screens Use Case <code>AppTheme.dimensions.space4</code> 16dp 16dp Standard spacing <code>AppTheme.dimensions.cardPadding</code> 12dp 24dp Card internal padding <code>AppTheme.dimensions.iconMedium</code> 28dp 36dp Action icons <code>AppTheme.dimensions.avatarMedium</code> 40dp 56dp User avatars <code>AppTheme.materialTypography.headlineLarge</code> 30sp 50sp Major headlines <code>AppTheme.materialTypography.bodyLarge</code> 16sp 29sp Body text <code>AppTheme.fontWeights.heading</code> SemiBold SemiBold Headings <code>AppTheme.fontWeights.body</code> Normal Normal Body text <code>AppTheme.fontWeights.emphasis</code> Medium Medium Emphasized content"},{"location":"#font-weight-examples","title":"\ud83c\udfa8 Font Weight Examples","text":"<pre><code>// Semantic weights (recommended)\nText(\"Headline\", fontWeight = AppTheme.fontWeights.heading)\nText(\"Body text\", fontWeight = AppTheme.fontWeights.body)\nText(\"Emphasized\", fontWeight = AppTheme.fontWeights.emphasis)\nButton(onClick = {}) {\n    Text(\"Action\", fontWeight = AppTheme.fontWeights.button)\n}\n\n// Basic weights\nText(\"Bold text\", fontWeight = AppTheme.fontWeights.bold)\nText(\"Normal text\", fontWeight = AppTheme.fontWeights.normal)\nText(\"Light text\", fontWeight = AppTheme.fontWeights.light)\n</code></pre> <p>\ud83d\udcd6 Complete API Reference \u2192</p>"},{"location":"#configuration-quick-reference","title":"\u2699\ufe0f Configuration Quick Reference","text":"<pre><code>ComposiveTheme(\n    configuration = responsiveConfiguration {\n        // Theme selection\n        withMaterialTheme()        // Force Material 3\n        withCupertinoTheme()       // Force Cupertino\n        withPlatformDefaultTheme() // Platform-appropriate\n\n        // Custom fonts\n        withCustomMaterialFonts(\n            bodyFont = myFont\n        )\n\n        // Custom dimensions\n        withCustomDimensions(\n            small = myMobileDimensions,\n            large = myDesktopDimensions\n        )\n    }\n) {\n    MyApp()\n}\n</code></pre>"},{"location":"#common-patterns","title":"\ud83c\udfaf Common Patterns","text":""},{"location":"#adaptive-navigation","title":"Adaptive Navigation","text":"<pre><code>@Composable\nfun AdaptiveNav() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; {\n            NavigationBar { /* bottom nav */ }\n        }\n        DeviceConfiguration.TABLET_PORTRAIT -&gt; {\n            NavigationRail { /* side nav */ }\n        }\n        else -&gt; {\n            NavigationDrawer { /* drawer nav */ }\n        }\n    }\n}\n</code></pre>"},{"location":"#responsive-grid","title":"Responsive Grid","text":"<pre><code>@Composable\nfun ResponsiveGrid() {\n    val columns = rememberDeviceConfiguration().getRecommendedColumns()\n\n    LazyVerticalGrid(\n        columns = GridCells.Fixed(columns),\n        horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing)\n    ) {\n        items(data) { item -&gt;\n            GridItem(item)\n        }\n    }\n}\n</code></pre>"},{"location":"#platform-specific-code","title":"Platform-Specific Code","text":"<pre><code>@Composable\nfun PlatformButton() {\n    val platform = AppTheme.platform\n\n    when {\n        platform.isAndroid() -&gt; {\n            Button(onClick = {}) { Text(\"Material Button\") }\n        }\n        platform.isIOS() -&gt; {\n            CupertinoButton(onClick = {}) { Text(\"Cupertino Button\") }\n        }\n        else -&gt; {\n            OutlinedButton(onClick = {}) { Text(\"Default Button\") }\n        }\n    }\n}\n</code></pre>"},{"location":"#responsive-breakpoints","title":"\ud83d\udcca Responsive Breakpoints","text":"Breakpoint Width Range Height Device Examples Mobile Portrait &lt; 600dp Any iPhone, Android phones Mobile Landscape 600-840dp Compact Phones in landscape Tablet Portrait 600-840dp Expanded iPad, Android tablets Tablet Landscape 840-1200dp Any Tablets in landscape Desktop &gt; 1200dp Expanded Laptops, desktops"},{"location":"#design-philosophy","title":"\ud83c\udfa8 Design Philosophy","text":""},{"location":"#platform-smart-defaults","title":"Platform-Smart Defaults","text":"<ul> <li>Android \u2192 Material 3 theme automatically</li> <li>iOS/Desktop \u2192 Cupertino theme automatically</li> <li>All Platforms \u2192 Responsive dimensions and typography</li> </ul>"},{"location":"#zero-configuration","title":"Zero Configuration","text":"<pre><code>// This just works! \ud83c\udf89\nComposiveTheme {\n    MyApp() // Automatically responsive &amp; platform-appropriate\n}\n</code></pre>"},{"location":"#extensive-customization","title":"Extensive Customization","text":"<pre><code>// Full control when you need it\nComposiveTheme(\n    configuration = responsiveConfiguration {\n        // Customize everything\n    }\n) {\n    MyApp()\n}\n</code></pre>"},{"location":"#useful-links","title":"\ud83d\udd17 Useful Links","text":"<ul> <li>GitHub Repository </li> <li>Maven Central</li> <li>Issue Tracker</li> <li>Discussions</li> </ul>"},{"location":"#getting-help","title":"\ud83e\udd1d Getting Help","text":"<ol> <li>Check the documentation - Most questions are answered here</li> <li>Browse examples - See real-world implementation patterns  </li> <li>Search issues - Someone might have asked already</li> <li>Ask in discussions - Community support and questions</li> <li>Report bugs - Help us improve Composive</li> </ol>"},{"location":"#ready-to-build","title":"\ud83c\udf89 Ready to Build?","text":"<p>Choose your starting point:</p> <ul> <li>New to Composive? \u2192 Installation</li> <li>Want to see it in action? \u2192 Examples</li> <li>Need specific API info? \u2192 API Reference</li> <li>Migrating from older version? \u2192 Migration Guide</li> </ul> <p>Welcome to the future of responsive Compose Multiplatform development! \ud83d\ude80 </p>"},{"location":"CONTRIBUTING/","title":"Contributing to Composive \ud83e\udd1d","text":"<p>Thank you for your interest in contributing to Composive! This guide will help you get started with contributing to the project.</p>"},{"location":"CONTRIBUTING/#ways-to-contribute","title":"\ud83c\udfaf Ways to Contribute","text":""},{"location":"CONTRIBUTING/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<ul> <li>Found a bug? Open an issue</li> <li>Include steps to reproduce, expected vs actual behavior</li> <li>Provide platform details (Android/iOS/Desktop)</li> <li>Include code samples when possible</li> </ul>"},{"location":"CONTRIBUTING/#documentation","title":"\ud83d\udcdd Documentation","text":"<ul> <li>Fix typos, improve clarity, add examples</li> <li>Update API documentation</li> <li>Create tutorials and guides</li> <li>Translate documentation</li> </ul>"},{"location":"CONTRIBUTING/#code-contributions","title":"\ud83d\udd27 Code Contributions","text":"<ul> <li>Bug fixes and improvements</li> <li>New features (discuss first)</li> <li>Performance optimizations</li> <li>Platform-specific enhancements</li> </ul>"},{"location":"CONTRIBUTING/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kotlin/JVM: 1.9.0+</li> <li>Android Studio: Latest stable</li> <li>Xcode: Latest stable (for iOS development)</li> <li>Git: Latest version</li> </ul>"},{"location":"CONTRIBUTING/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally: <pre><code>git clone https://github.com/YOUR_USERNAME/Composive.git\ncd Composive\n</code></pre></p> </li> <li> <p>Add upstream remote: <pre><code>git remote add upstream https://github.com/Gursimarsingh12/Composive.git\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#project-structure","title":"Project Structure","text":"<pre><code>Composive/\n\u251c\u2500\u2500 composive-responsive-adaptive/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 commonMain/kotlin/com/gursimar/composive/responsive/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 core/              # Device detection &amp; platform APIs\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 theme/             # Theme system &amp; AppTheme\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foundation/        # Typography, dimensions, font weights\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 configuration/     # Configuration builders &amp; data classes\n\u2502   \u2502   \u251c\u2500\u2500 androidMain/kotlin/    # Android-specific implementations\n\u2502   \u2502   \u251c\u2500\u2500 iosMain/kotlin/        # iOS-specific implementations\n\u2502   \u2502   \u2514\u2500\u2500 desktopMain/kotlin/    # Desktop-specific implementations\n\u2502   \u2514\u2500\u2500 build.gradle.kts\n\u251c\u2500\u2500 composive-examples/            # Example module\n\u251c\u2500\u2500 composeApp/                    # Sample application\n\u251c\u2500\u2500 docs/                          # Documentation\n\u251c\u2500\u2500 settings.gradle.kts\n\u2514\u2500\u2500 build.gradle.kts\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-project","title":"Building the Project","text":"<pre><code># Build all targets\n./gradlew build\n\n# Run tests\n./gradlew test\n\n# Run sample app (desktop)\n./gradlew :composeApp:desktopRun\n\n# Run sample app (Android)\n./gradlew :composeApp:installDebug\n</code></pre>"},{"location":"CONTRIBUTING/#development-guidelines","title":"\ud83d\udccb Development Guidelines","text":""},{"location":"CONTRIBUTING/#code-style","title":"Code Style","text":"<ul> <li>Kotlin Coding Conventions: Follow official Kotlin style guide</li> <li>4-space indentation for Kotlin code</li> <li>120 character line limit</li> <li>Use meaningful names for variables, functions, and classes</li> </ul>"},{"location":"CONTRIBUTING/#example","title":"Example:","text":"<pre><code>@Composable\nfun ResponsiveCard(\n    title: String,\n    description: String,\n    modifier: Modifier = Modifier\n) {\n    Card(\n        modifier = modifier.fillMaxWidth(),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = AppTheme.dimensions.cardElevation\n        )\n    ) {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                text = title,\n                style = AppTheme.materialTypography.titleMedium,\n                fontWeight = AppTheme.fontWeights.heading\n            )\n\n            Text(\n                text = description,\n                style = AppTheme.materialTypography.bodyMedium\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"CONTRIBUTING/#documentation-standards","title":"Documentation Standards","text":""},{"location":"CONTRIBUTING/#public-apis","title":"Public APIs","text":"<p>All public APIs must have KDoc documentation:</p> <pre><code>/**\n * Remember the current device configuration based on window size class.\n * \n * This is the primary function you'll use to get responsive information in your composables.\n * It automatically calculates the appropriate device configuration based on the current\n * window size and provides intelligent defaults for layout decisions.\n * \n * @return The current DeviceConfiguration\n * \n * @sample\n * ```kotlin\n * @Composable\n * fun AdaptiveLayout() {\n *     val deviceConfig = rememberDeviceConfiguration()\n *     \n *     when (deviceConfig) {\n *         DeviceConfiguration.MOBILE_PORTRAIT -&gt; SingleColumnLayout()\n *         DeviceConfiguration.DESKTOP -&gt; MultiColumnLayout()\n *         else -&gt; TwoColumnLayout()\n *     }\n * }\n * ```\n */\n@Composable\nfun rememberDeviceConfiguration(): DeviceConfiguration\n</code></pre>"},{"location":"CONTRIBUTING/#internal-apis","title":"Internal APIs","text":"<p>Internal APIs should have basic documentation:</p> <pre><code>/**\n * Internal function that maps WindowSizeClass values to ResponsiveSize values.\n */\ninternal fun mapToResponsiveSize(sizeClass: Any): ResponsiveSize\n</code></pre>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":""},{"location":"CONTRIBUTING/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test all public APIs</li> <li>Test edge cases and error conditions</li> <li>Mock external dependencies</li> </ul> <pre><code>class DeviceConfigurationTest {\n    @Test\n    fun `mobile portrait detection works correctly`() {\n        val windowSizeClass = WindowSizeClass.calculateFromSize(DpSize(400.dp, 800.dp))\n        val config = DeviceConfiguration.fromWindowSizeClass(windowSizeClass)\n\n        assertEquals(DeviceConfiguration.MOBILE_PORTRAIT, config)\n        assertTrue(config.isMobile())\n        assertTrue(config.isPortrait())\n    }\n}\n</code></pre>"},{"location":"CONTRIBUTING/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test theme integration</li> <li>Test responsive behavior</li> <li>Test platform-specific implementations</li> </ul>"},{"location":"CONTRIBUTING/#platform-considerations","title":"Platform Considerations","text":""},{"location":"CONTRIBUTING/#android","title":"Android","text":"<ul> <li>Follow Material Design guidelines</li> <li>Support API 21+</li> <li>Test on different screen densities</li> </ul>"},{"location":"CONTRIBUTING/#ios","title":"iOS","text":"<ul> <li>Follow Human Interface Guidelines  </li> <li>Support iOS 13.0+</li> <li>Test on different device sizes</li> </ul>"},{"location":"CONTRIBUTING/#desktop","title":"Desktop","text":"<ul> <li>Support Windows, macOS, Linux</li> <li>Test window resizing behavior</li> <li>Consider mouse/keyboard interactions</li> </ul>"},{"location":"CONTRIBUTING/#making-changes","title":"\ud83d\udd27 Making Changes","text":""},{"location":"CONTRIBUTING/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code>git checkout -b feature/my-awesome-feature\n# or\ngit checkout -b fix/bug-description\n</code></pre>"},{"location":"CONTRIBUTING/#2-make-your-changes","title":"2. Make Your Changes","text":"<ul> <li>Write clean, well-documented code</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> <li>Follow existing patterns and conventions</li> </ul>"},{"location":"CONTRIBUTING/#3-test-your-changes","title":"3. Test Your Changes","text":"<pre><code># Run all tests\n./gradlew test\n\n# Test on all platforms\n./gradlew :composeApp:desktopRun\n./gradlew :composeApp:installDebug\n# Test iOS in Xcode\n\n# Check code style\n./gradlew ktlintCheck\n</code></pre>"},{"location":"CONTRIBUTING/#4-commit-your-changes","title":"4. Commit Your Changes","text":"<p>Use Conventional Commits:</p> <pre><code>git commit -m \"feat: add responsive avatar component\"\ngit commit -m \"fix: device configuration on landscape tablets\"\ngit commit -m \"docs: improve getting started guide\"\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Adding tests - <code>chore</code>: Build/tooling changes</p>"},{"location":"CONTRIBUTING/#5-push-and-create-pr","title":"5. Push and Create PR","text":"<pre><code>git push origin feature/my-awesome-feature\n</code></pre> <p>Create a Pull Request on GitHub with: - Clear title describing the change - Detailed description of what and why - Screenshots for UI changes - Breaking changes if any - Testing notes for reviewers</p>"},{"location":"CONTRIBUTING/#documentation-contributions","title":"\ud83d\udcdd Documentation Contributions","text":""},{"location":"CONTRIBUTING/#adding-examples","title":"Adding Examples","text":"<p>Add practical examples to <code>docs/examples.md</code>:</p> <pre><code>## \ud83d\udce7 Example: Email Client\n\nA responsive email client that adapts its layout based on screen size.\n\n```kotlin\n@Composable\nfun EmailClient() {\n    val deviceConfig = rememberDeviceConfiguration()\n    // ... implementation\n}\n</code></pre>"},{"location":"CONTRIBUTING/#improving-api-documentation","title":"Improving API Documentation","text":"<p>Update API docs in <code>docs/api-reference.md</code>:</p> <pre><code>### newFunction\n\nDescription of the function and its purpose.\n\n```kotlin\n@Composable\nfun newFunction(parameter: String): ReturnType\n</code></pre> <p>Parameters: - <code>parameter</code> - Description of parameter</p> <p>Returns: Description of return value</p> <p>Example: <pre><code>val result = newFunction(\"example\")\n</code></pre> <pre><code>## \ud83e\uddea Testing Changes\n\n### Manual Testing\n\n1. **Run sample apps** on all platforms\n2. **Test responsive behavior** by resizing windows\n3. **Verify platform themes** work correctly\n4. **Check hot reload** functionality\n\n### Automated Testing\n\n```bash\n# Run unit tests\n./gradlew test\n\n# Run lint checks\n./gradlew ktlintCheck\n\n# Build all platforms\n./gradlew build\n</code></pre></p>"},{"location":"CONTRIBUTING/#hot-reload-testing","title":"Hot Reload Testing","text":"<pre><code>./gradlew :composeApp:desktopRunHot --auto\n</code></pre> <p>Test by resizing the window to different sizes and verifying: - Mobile portrait (&lt; 600dp width) - Mobile landscape (600-840dp width, short height) - Tablet portrait (600-840dp width, tall height) - Tablet landscape (840-1200dp width) - Desktop (&gt; 1200dp width)</p>"},{"location":"CONTRIBUTING/#what-not-to-include","title":"\ud83d\udeab What Not to Include","text":""},{"location":"CONTRIBUTING/#breaking-changes","title":"Breaking Changes","text":"<p>Avoid breaking changes unless absolutely necessary. If required: - Discuss in an issue first - Provide migration guide - Deprecate old APIs gradually</p>"},{"location":"CONTRIBUTING/#large-refactors","title":"Large Refactors","text":"<p>Discuss major refactoring in an issue before starting work.</p>"},{"location":"CONTRIBUTING/#unrelated-changes","title":"Unrelated Changes","text":"<p>Keep PRs focused. Don't mix feature additions with code style changes.</p>"},{"location":"CONTRIBUTING/#dependencies","title":"Dependencies","text":"<p>Don't add new dependencies without discussion. Composive aims to be lightweight.</p>"},{"location":"CONTRIBUTING/#review-process","title":"\ud83c\udfaf Review Process","text":""},{"location":"CONTRIBUTING/#what-we-look-for","title":"What We Look For","text":"<ol> <li>Functionality - Does it work as intended?</li> <li>Code Quality - Is it clean and maintainable?</li> <li>Documentation - Are APIs documented?</li> <li>Tests - Are there appropriate tests?</li> <li>Platform Support - Works across platforms?</li> </ol>"},{"location":"CONTRIBUTING/#review-timeline","title":"Review Timeline","text":"<ul> <li>Initial review within 48 hours</li> <li>Feedback incorporation depends on complexity</li> <li>Merge after approval and CI passes</li> </ul>"},{"location":"CONTRIBUTING/#recognition","title":"\ud83c\udfc6 Recognition","text":"<p>Contributors are recognized in: - CREDITS.md - All contributors listed - Release notes - Major contributions highlighted - README.md - Top contributors featured</p>"},{"location":"CONTRIBUTING/#getting-help","title":"\u2753 Getting Help","text":""},{"location":"CONTRIBUTING/#questions","title":"Questions","text":"<ul> <li>Issues - Bug reports and feature requests</li> </ul>"},{"location":"CONTRIBUTING/#direct-contact","title":"Direct Contact","text":"<ul> <li>Email - anonymouslike083@gmail.com (for urgent issues)</li> <li>LinkedIn - Gursimar Singh</li> </ul>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"\ud83d\udcdc Code of Conduct","text":"<p>Be respectful, inclusive, and constructive in all interactions. We follow the Contributor Covenant code of conduct.</p> <p>Thank you for contributing to Composive! \ud83c\udf89 Together, we're making responsive design accessible to all developers. </p>"},{"location":"CREDITS/","title":"\ud83d\ude4f Credits &amp; Acknowledgments","text":"<p>Composive is built on the shoulders of giants. This page acknowledges all the amazing libraries, projects, and contributors that make Composive possible.</p>"},{"location":"CREDITS/#core-dependencies","title":"\ud83c\udfaf Core Dependencies","text":""},{"location":"CREDITS/#compose-cupertino","title":"Compose Cupertino","text":"<p>Author: @alexzhirkevich License: Apache-2.0 Stars: 1.4k+ \u2b50  </p> <p>The foundational library providing iOS-style Cupertino components for Compose Multiplatform. Composive leverages this excellent library to deliver authentic iOS experiences across all platforms.</p> <p>What we use: - <code>cupertino</code> - Core Cupertino components (buttons, text fields, switches, etc.) - <code>cupertino-adaptive</code> - Adaptive wrappers for Material3 and Cupertino components - <code>cupertino-icons-extended</code> - 800+ Apple SF Symbols as Compose ImageVectors - <code>cupertino-native</code> - UIKit native wrappers for seamless iOS integration</p> <p>Version: <code>0.1.0-alpha04</code></p>"},{"location":"CREDITS/#compose-cupertino-enhanced-fork","title":"Compose Cupertino (Enhanced Fork)","text":"<p>Author: @schott12521 (Scott Lanoue) License: Apache-2.0 Stars: 97+ \u2b50  </p> <p>An actively maintained fork with additional features, improvements, and enhanced adaptive components that extend the original Cupertino library.</p> <p>What we use: - Enhanced adaptive components with better cross-platform behavior - Additional Cupertino widgets and improvements - Better integration with modern Compose Multiplatform versions - Performance optimizations and bug fixes</p> <p>Version: <code>2.2.5</code></p>"},{"location":"CREDITS/#material-3-adaptive","title":"Material 3 Adaptive","text":"<p>Author: Google Android Team License: Apache-2.0  </p> <p>Google's official Material 3 adaptive components providing responsive behavior, window size class detection, and layout adaptation.</p> <p>What we use: <pre><code>androidx.compose.material3.adaptive:adaptive:1.2.0-alpha07\nandroidx.compose.material3.adaptive:adaptive-layout:1.2.0-alpha07\nandroidx.compose.material3:material3-window-size-class:1.1.2\n</code></pre></p> <p>Features: - <code>WindowSizeClass</code> for responsive breakpoint detection - Adaptive navigation components - Responsive layout utilities - Cross-platform window size handling</p>"},{"location":"CREDITS/#additional-technologies","title":"\ud83d\udee0\ufe0f Additional Technologies","text":""},{"location":"CREDITS/#compose-multiplatform","title":"Compose Multiplatform","text":"<p>Author: JetBrains License: Apache-2.0  </p> <p>The cross-platform UI framework that makes it possible to write once, run everywhere with native performance and look.</p>"},{"location":"CREDITS/#kotlin-multiplatform","title":"Kotlin Multiplatform","text":"<p>Author: JetBrains License: Apache-2.0  </p> <p>The foundation that enables shared business logic across all platforms while maintaining platform-specific optimizations.</p>"},{"location":"CREDITS/#material-3-design-system","title":"Material 3 Design System","text":"<p>Author: Google License: Apache-2.0  </p> <p>Google's latest design system providing comprehensive theming, typography, and component guidelines for Android.</p>"},{"location":"CREDITS/#swiftui-apple-human-interface-guidelines","title":"SwiftUI &amp; Apple Human Interface Guidelines","text":"<p>Author: Apple License: Apple Software License  </p> <p>Design principles and guidelines that inspire the Cupertino design language and iOS-style components.</p>"},{"location":"CREDITS/#special-recognition","title":"\ud83c\udf1f Special Recognition","text":""},{"location":"CREDITS/#alexzhirkevich","title":"@alexzhirkevich","text":"<p>Creator of the original Compose Cupertino library. Without this foundational work, authentic iOS-style components in Compose Multiplatform wouldn't be possible. Thank you for: - Creating comprehensive iOS-style components - Maintaining excellent documentation - Establishing the foundation for adaptive theming - Inspiring the broader community</p>"},{"location":"CREDITS/#schott12521-scott-lanoue","title":"@schott12521 (Scott Lanoue)","text":"<p>Maintainer of the enhanced Compose Cupertino fork. Thank you for: - Keeping the library up-to-date with latest Compose versions - Adding performance improvements and bug fixes - Enhancing adaptive component functionality - Providing reliable maintenance and support</p>"},{"location":"CREDITS/#google-android-team","title":"Google Android Team","text":"<p>For creating and maintaining Material 3 adaptive components. Thank you for: - Providing official responsive design utilities - Establishing WindowSizeClass standards - Creating comprehensive adaptive layout components - Supporting cross-platform development</p>"},{"location":"CREDITS/#jetbrains-team","title":"JetBrains Team","text":"<p>For Compose Multiplatform and Kotlin Multiplatform. Thank you for: - Making cross-platform development a joy - Providing excellent tooling and IDE support - Maintaining backward compatibility - Building an amazing developer community</p>"},{"location":"CREDITS/#design-inspiration","title":"\ud83c\udfa8 Design Inspiration","text":""},{"location":"CREDITS/#material-design-team","title":"Material Design Team","text":"<p>For the Material 3 design system that provides: - Comprehensive theming system - Accessibility guidelines - Typography standards - Color system principles</p>"},{"location":"CREDITS/#apple-design-team","title":"Apple Design Team","text":"<p>For the Human Interface Guidelines that provide: - iOS design principles - Cupertino design language - Accessibility standards - Typography guidelines</p>"},{"location":"CREDITS/#build-infrastructure","title":"\ud83d\udce6 Build &amp; Infrastructure","text":""},{"location":"CREDITS/#gradle","title":"Gradle","text":"<p>Build system that makes multi-platform development possible.</p>"},{"location":"CREDITS/#github-actions","title":"GitHub Actions","text":"<p>CI/CD pipeline for automated testing and publishing.</p>"},{"location":"CREDITS/#community-contributors","title":"\ud83e\udd1d Community Contributors","text":"<p>Thank you to everyone who has contributed to the ecosystem:</p> <ul> <li>Issue reporters who help improve the library</li> <li>Documentation contributors who make the library more accessible</li> <li>Feature requesters who help prioritize development</li> <li>Community members who provide support and feedback</li> </ul>"},{"location":"CREDITS/#license-information","title":"\ud83d\udcc4 License Information","text":""},{"location":"CREDITS/#composive-license","title":"Composive License","text":"<pre><code>Copyright 2024 Gursimar Singh\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"CREDITS/#upstream-licenses","title":"Upstream Licenses","text":"<p>All dependencies maintain their original licenses: - Compose Cupertino: Apache-2.0 - Material 3 Adaptive: Apache-2.0 - Compose Multiplatform: Apache-2.0 - Kotlin: Apache-2.0</p>"},{"location":"CREDITS/#apple-sf-symbols","title":"Apple SF Symbols","text":"<p>When using SF Symbols (through cupertino-icons-extended), please review Apple's license agreement: - SF Symbols are subject to Apple's license terms - Usage may be restricted for non-iOS platforms - Please review the license before commercial use</p>"},{"location":"CREDITS/#related-projects","title":"\ud83d\udd17 Related Projects","text":""},{"location":"CREDITS/#similar-libraries","title":"Similar Libraries","text":"<ul> <li>Calf - Adaptive components for Compose Multiplatform</li> </ul>"},{"location":"CREDITS/#community-resources","title":"Community Resources","text":"<ul> <li>Compose Multiplatform Awesome - Curated list of resources</li> <li>Kotlin Multiplatform Mobile - Official documentation</li> </ul>"},{"location":"CREDITS/#how-to-support-these-projects","title":"\ud83d\udc96 How to Support These Projects","text":""},{"location":"CREDITS/#star-the-repositories","title":"Star the repositories:","text":"<ul> <li>\u2b50 Compose Cupertino</li> <li>\u2b50 Compose Cupertino Fork</li> <li>\u2b50 Composive</li> </ul>"},{"location":"CREDITS/#contribute","title":"Contribute:","text":"<ul> <li>\ud83d\udc1b Report issues and bugs</li> <li>\ud83d\udcdd Improve documentation</li> <li>\ud83d\udca1 Suggest new features</li> <li>\ud83d\udd27 Submit pull requests</li> </ul>"},{"location":"CREDITS/#spread-the-word","title":"Spread the word:","text":"<ul> <li>\ud83d\udcf1 Share your apps built with these libraries</li> <li>\ud83d\udc26 Tweet about your experience</li> <li>\ud83d\udcdd Write blog posts and tutorials</li> <li>\ud83d\udcac Help others in community forums</li> </ul> <p>Thank you to everyone who makes open-source development possible! \ud83d\ude4f</p> <p>Standing on the shoulders of giants to make responsive design accessible to all \u2728 </p>"},{"location":"CREDITS/#logo-design","title":"Logo Design","text":"<p>The Composive logo was designed by Pransh Taank. We extend our sincere gratitude for this creative contribution.</p>"},{"location":"CREDITS/#connect-with-the-designer","title":"Connect with the Designer","text":"<ul> <li>LinkedIn: Pransh Taank</li> <li>GitHub: 100pransh001</li> <li>Instagram: @10pransh01</li> </ul>"},{"location":"CREDITS/#other-contributors","title":"Other Contributors","text":"<p>We would like to thank all contributors who have helped make Composive better:</p> <ul> <li>Gursimar Singh - Creator and maintainer</li> <li>Community contributors (See our GitHub contributors page)</li> </ul>"},{"location":"CREDITS/#open-source-libraries","title":"Open Source Libraries","text":"<p>Composive is built on top of several amazing open-source projects:</p> <ul> <li>Kotlin</li> <li>Jetpack Compose</li> <li>Compose Multiplatform</li> </ul>"},{"location":"CREDITS/#want-to-contribute","title":"Want to Contribute?","text":"<p>We welcome contributions! Check out our Contributing Guide to get started. </p>"},{"location":"api-reference/","title":"API Reference \ud83d\udcda","text":"<p>Complete reference documentation for all Composive APIs, functions, and classes.</p>"},{"location":"api-reference/#core-theme-apis","title":"\ud83c\udfa8 Core Theme APIs","text":""},{"location":"api-reference/#composivetheme","title":"ComposiveTheme","text":"<p>The main theme composable that provides responsive design capabilities.</p> <pre><code>@Composable\nfun ComposiveTheme(\n    configuration: ResponsiveConfiguration = ResponsiveConfiguration(),\n    darkTheme: Boolean = isSystemInDarkTheme(),\n    themeType: Theme? = null,\n    content: @Composable () -&gt; Unit\n)\n</code></pre> <p>Parameters: - <code>configuration</code> - Custom responsive configuration (optional) - <code>darkTheme</code> - Whether to use dark theme (defaults to system preference) - <code>themeType</code> - Force specific theme type (overrides platform defaults) - <code>content</code> - App content that will use responsive theming</p> <p>Example: <pre><code>ComposiveTheme(\n    configuration = responsiveConfiguration {\n        withMaterialTheme()\n    }\n) {\n    MainScreen()\n}\n</code></pre></p>"},{"location":"api-reference/#apptheme","title":"AppTheme","text":"<p>Object providing access to current responsive theme values.</p> <pre><code>object AppTheme {\n    val dimensions: Dimensions @Composable get()\n    val orientation: Orientation @Composable get()\n    val fontWeights: ResponsiveFontWeights @Composable get()\n    val materialTypography: androidx.compose.material3.Typography @Composable get()\n    val cupertinoTypography: com.slapps.cupertino.theme.Typography @Composable get()\n    val materialColors: MaterialColorScheme @Composable get()\n    val cupertinoColors: ColorScheme @Composable get()\n    val configuration: ResponsiveConfiguration @Composable get()\n    val platform: Platform @Composable get()\n}\n</code></pre>"},{"location":"api-reference/#complete-apptheme-properties-reference","title":"Complete AppTheme Properties Reference","text":"Property Type Description Usage Example dimensions <code>Dimensions</code> Responsive spacing, sizes, and layout dimensions <code>AppTheme.dimensions.cardPadding</code> orientation <code>Orientation</code> Current device orientation (Portrait/Landscape) <code>AppTheme.orientation == Orientation.Portrait</code> fontWeights <code>ResponsiveFontWeights</code> Responsive font weight system <code>AppTheme.fontWeights.semiBold</code> materialTypography <code>androidx.compose.material3.Typography</code> Material Design typography scales <code>AppTheme.materialTypography.headlineLarge</code> cupertinoTypography <code>com.slapps.cupertino.theme.Typography</code> iOS Cupertino typography scales <code>AppTheme.cupertinoTypography.largeTitle</code> materialColors <code>MaterialColorScheme</code> Material Design color scheme <code>AppTheme.materialColors.primary</code> cupertinoColors <code>ColorScheme</code> Cupertino color scheme <code>AppTheme.cupertinoColors.accent</code> configuration <code>ResponsiveConfiguration</code> Current responsive configuration <code>AppTheme.configuration.defaultThemeType</code> platform <code>Platform</code> Platform information and capabilities <code>AppTheme.platform.isAndroid()</code>"},{"location":"api-reference/#detailed-property-breakdown","title":"Detailed Property Breakdown","text":""},{"location":"api-reference/#dimensions","title":"\ud83d\udccf Dimensions","text":"<pre><code>AppTheme.dimensions.space1                    // 4dp - Minimal spacing\nAppTheme.dimensions.space4                    // 16dp - Standard spacing\nAppTheme.dimensions.cardPadding               // 12-32dp - Card internal padding\nAppTheme.dimensions.screenPaddingHorizontal   // 16-48dp - Screen edge margins\nAppTheme.dimensions.iconMedium               // 28-36dp - Standard icons\nAppTheme.dimensions.avatarMedium             // 40-56dp - User avatars\nAppTheme.dimensions.buttonHeightMedium       // 44-56dp - Standard buttons\n</code></pre>"},{"location":"api-reference/#font-weights","title":"\u2696\ufe0f Font Weights","text":"<pre><code>AppTheme.fontWeights.light        // FontWeight.Light\nAppTheme.fontWeights.normal       // FontWeight.Normal\nAppTheme.fontWeights.medium       // FontWeight.Medium\nAppTheme.fontWeights.semiBold     // FontWeight.SemiBold\nAppTheme.fontWeights.bold         // FontWeight.Bold\nAppTheme.fontWeights.extraBold    // FontWeight.ExtraBold\n</code></pre>"},{"location":"api-reference/#material-typography","title":"\ud83d\udcdd Material Typography","text":"<pre><code>AppTheme.materialTypography.displayLarge      // 23-39sp - Largest display text\nAppTheme.materialTypography.headlineLarge     // 30-50sp - Major headlines\nAppTheme.materialTypography.titleLarge        // 20-36sp - Section titles\nAppTheme.materialTypography.bodyLarge         // 16-29sp - Main body text\nAppTheme.materialTypography.labelMedium       // 12-20sp - UI labels\n</code></pre>"},{"location":"api-reference/#cupertino-typography","title":"\ud83c\udf4e Cupertino Typography","text":"<pre><code>AppTheme.cupertinoTypography.largeTitle       // 30-50sp - iOS large titles\nAppTheme.cupertinoTypography.title1           // 26-42sp - Primary titles\nAppTheme.cupertinoTypography.headline         // 15-25sp - Emphasized text\nAppTheme.cupertinoTypography.body             // 16-24sp - Body content\nAppTheme.cupertinoTypography.caption1         // 11-16sp - Small text\n</code></pre>"},{"location":"api-reference/#material-colors","title":"\ud83c\udfa8 Material Colors","text":"<pre><code>AppTheme.materialColors.primary               // Primary brand color\nAppTheme.materialColors.secondary             // Secondary accent color\nAppTheme.materialColors.background            // Background color\nAppTheme.materialColors.surface               // Surface color\nAppTheme.materialColors.onPrimary             // Text on primary\n</code></pre>"},{"location":"api-reference/#cupertino-colors","title":"\ud83c\udfa8 Cupertino Colors","text":"<pre><code>AppTheme.cupertinoColors.accent               // iOS accent color\nAppTheme.cupertinoColors.background           // Background color\nAppTheme.cupertinoColors.systemBackground     // System background\nAppTheme.cupertinoColors.label                // Label color\n</code></pre>"},{"location":"api-reference/#platform-information","title":"\ud83d\udcf1 Platform Information","text":"<pre><code>AppTheme.platform.name                        // \"Android\", \"iOS\", etc.\nAppTheme.platform.type                        // PlatformType enum\nAppTheme.platform.isAndroid()                 // Boolean\nAppTheme.platform.isIOS()                     // Boolean\nAppTheme.platform.isDesktop()                 // Boolean\nAppTheme.platform.preferredTheme              // Theme preference\n</code></pre>"},{"location":"api-reference/#configuration","title":"\u2699\ufe0f Configuration","text":"<pre><code>AppTheme.configuration.defaultThemeType       // Current theme type\nAppTheme.configuration.customDimensions       // Custom dimension overrides\nAppTheme.configuration.customMaterialFonts    // Custom Material fonts\nAppTheme.configuration.customCupertinoFonts   // Custom Cupertino fonts\n</code></pre>"},{"location":"api-reference/#orientation","title":"\ud83d\udcd0 Orientation","text":"<pre><code>AppTheme.orientation                          // Orientation.Portrait or Orientation.Landscape\n</code></pre> <p>Usage: <pre><code>@Composable\nfun MyComponent() {\n    Card(\n        modifier = Modifier.padding(AppTheme.dimensions.cardSpacing),\n        elevation = CardDefaults.cardElevation(AppTheme.dimensions.cardElevation)\n    ) {\n        Text(\n            text = \"Responsive Text\",\n            style = AppTheme.materialTypography.headlineSmall,\n            fontWeight = AppTheme.fontWeights.semiBold\n        )\n    }\n}\n</code></pre></p>"},{"location":"api-reference/#device-configuration-apis","title":"\ud83d\udcf1 Device Configuration APIs","text":""},{"location":"api-reference/#deviceconfiguration","title":"DeviceConfiguration","text":"<p>Enum representing different device configurations based on screen size.</p> <pre><code>enum class DeviceConfiguration {\n    MOBILE_PORTRAIT,    // &lt; 600dp width\n    MOBILE_LANDSCAPE,   // 600-840dp width, compact height\n    TABLET_PORTRAIT,    // 600-840dp width, expanded height\n    TABLET_LANDSCAPE,   // 840-1200dp width\n    DESKTOP            // &gt; 1200dp width\n}\n</code></pre> <p>Helper Functions: <pre><code>fun DeviceConfiguration.isMobile(): Boolean\nfun DeviceConfiguration.isTablet(): Boolean\nfun DeviceConfiguration.isDesktop(): Boolean\nfun DeviceConfiguration.isPortrait(): Boolean\nfun DeviceConfiguration.isLandscape(): Boolean\nfun DeviceConfiguration.getRecommendedColumns(): Int\n</code></pre></p> <p>Static Methods: <pre><code>companion object {\n    fun fromWindowSizeClass(windowSizeClass: WindowSizeClass): DeviceConfiguration\n    fun fromPlatformAndWindowSize(platform: Platform, windowSizeClass: WindowSizeClass): DeviceConfiguration\n}\n</code></pre></p>"},{"location":"api-reference/#rememberdeviceconfiguration","title":"rememberDeviceConfiguration","text":"<p>Composable function to get current device configuration.</p> <pre><code>@Composable\nfun rememberDeviceConfiguration(): DeviceConfiguration\n</code></pre> <p>Usage: <pre><code>@Composable\nfun ResponsiveLayout() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; MobileLayout()\n        DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n        else -&gt; TabletLayout()\n    }\n}\n</code></pre></p>"},{"location":"api-reference/#rememberdeviceconfigurationwithplatform","title":"rememberDeviceConfigurationWithPlatform","text":"<p>Enhanced device configuration that considers platform information.</p> <pre><code>@Composable\nfun rememberDeviceConfigurationWithPlatform(): DeviceConfiguration\n</code></pre>"},{"location":"api-reference/#configuration-apis","title":"\ud83d\udd27 Configuration APIs","text":""},{"location":"api-reference/#responsiveconfiguration","title":"responsiveConfiguration","text":"<p>DSL function for building responsive configurations.</p> <pre><code>fun responsiveConfiguration(\n    builder: ResponsiveConfigurationBuilder.() -&gt; Unit\n): ResponsiveConfiguration\n</code></pre> <p>Usage: <pre><code>val config = responsiveConfiguration {\n    withMaterialTheme()\n    withCustomMaterialFonts(\n        bodyFont = myFont\n    )\n}\n</code></pre></p>"},{"location":"api-reference/#responsiveconfigurationbuilder","title":"ResponsiveConfigurationBuilder","text":"<p>Builder class for creating custom responsive configurations.</p>"},{"location":"api-reference/#theme-configuration","title":"Theme Configuration","text":"<pre><code>fun withMaterialTheme(): ResponsiveConfigurationBuilder\nfun withCupertinoTheme(): ResponsiveConfigurationBuilder\nfun withPlatformDefaultTheme(): ResponsiveConfigurationBuilder\nfun withPlatformThemeAdaptation(enabled: Boolean = true): ResponsiveConfigurationBuilder\n</code></pre>"},{"location":"api-reference/#font-configuration","title":"Font Configuration","text":"<pre><code>fun withCustomMaterialFonts(\n    displayFont: FontFamily? = null,\n    headlineFont: FontFamily? = null,\n    titleFont: FontFamily? = null,\n    bodyFont: FontFamily? = null,\n    labelFont: FontFamily? = null\n): ResponsiveConfigurationBuilder\n\nfun withCustomCupertinoFonts(\n    largeTitleFont: FontFamily? = null,\n    titleFont: FontFamily? = null,\n    headlineFont: FontFamily? = null,\n    bodyFont: FontFamily? = null,\n    captionFont: FontFamily? = null\n): ResponsiveConfigurationBuilder\n\nfun withUniformMaterialFont(fontFamily: FontFamily): ResponsiveConfigurationBuilder\nfun withUniformCupertinoFont(fontFamily: FontFamily): ResponsiveConfigurationBuilder\nfun withUniversalFont(fontFamily: FontFamily): ResponsiveConfigurationBuilder\n\nfun withMaterialReadingDisplayFonts(\n    readingFont: FontFamily,\n    displayFont: FontFamily,\n    labelFont: FontFamily = readingFont\n): ResponsiveConfigurationBuilder\n\nfun withCupertinoReadingDisplayFonts(\n    readingFont: FontFamily,\n    displayFont: FontFamily,\n    captionFont: FontFamily = readingFont\n): ResponsiveConfigurationBuilder\n</code></pre>"},{"location":"api-reference/#dimension-configuration","title":"Dimension Configuration","text":"<pre><code>fun withCustomDimensions(\n    small: Dimensions = smallDimensions,\n    compact: Dimensions = compactDimensions,\n    medium: Dimensions = mediumDimensions,\n    large: Dimensions = largeDimensions\n): ResponsiveConfigurationBuilder\n</code></pre>"},{"location":"api-reference/#typography-configuration","title":"Typography Configuration","text":"<pre><code>fun withCustomMaterialTypography(\n    small: androidx.compose.material3.Typography,\n    compact: androidx.compose.material3.Typography,\n    medium: androidx.compose.material3.Typography,\n    large: androidx.compose.material3.Typography\n): ResponsiveConfigurationBuilder\n\nfun withCustomCupertinoTypography(\n    small: com.slapps.cupertino.theme.Typography,\n    compact: com.slapps.cupertino.theme.Typography,\n    medium: com.slapps.cupertino.theme.Typography,\n    large: com.slapps.cupertino.theme.Typography\n): ResponsiveConfigurationBuilder\n</code></pre>"},{"location":"api-reference/#color-configuration","title":"Color Configuration","text":"<pre><code>fun withCustomMaterialColors(\n    light: MaterialColorScheme,\n    dark: MaterialColorScheme\n): ResponsiveConfigurationBuilder\n\nfun withCustomCupertinoColors(\n    light: CupertinoColorScheme,\n    dark: CupertinoColorScheme\n): ResponsiveConfigurationBuilder\n</code></pre>"},{"location":"api-reference/#font-weight-configuration","title":"Font Weight Configuration","text":"<pre><code>fun withCustomFontWeights(\n    small: ResponsiveFontWeights = smallFontWeights,\n    compact: ResponsiveFontWeights = compactFontWeights,\n    medium: ResponsiveFontWeights = mediumFontWeights,\n    large: ResponsiveFontWeights = largeFontWeights\n): ResponsiveConfigurationBuilder\n</code></pre>"},{"location":"api-reference/#builder-methods","title":"Builder Methods","text":"<pre><code>fun build(): ResponsiveConfiguration\n</code></pre>"},{"location":"api-reference/#dimension-apis","title":"\ud83d\udccf Dimension APIs","text":""},{"location":"api-reference/#dimensions_1","title":"Dimensions","text":"<p>Data class containing all responsive dimension values.</p> <pre><code>data class Dimensions(\n    // Spacing\n    val space1: Dp,     // 4dp\n    val space2: Dp,     // 8dp\n    val space3: Dp,     // 12dp\n    val space4: Dp,     // 16dp\n    val space5: Dp,     // 20dp\n    val space6: Dp,     // 24dp\n    val space8: Dp,     // 32dp\n    val space10: Dp,    // 40dp\n    val space12: Dp,    // 48dp\n    val space16: Dp,    // 64dp\n\n    // Content Padding\n    val contentPaddingSmall: Dp,\n    val contentPaddingMedium: Dp,\n    val contentPaddingLarge: Dp,\n\n    // Screen Padding\n    val screenPaddingHorizontal: Dp,\n    val screenPaddingVertical: Dp,\n\n    // Layout Spacing\n    val sectionSpacing: Dp,\n    val itemSpacing: Dp,\n\n    // Icons\n    val iconTiny: Dp,\n    val iconSmall: Dp,\n    val iconMedium: Dp,\n    val iconLarge: Dp,\n\n    // Avatars\n    val avatarSmall: Dp,\n    val avatarMedium: Dp,\n    val avatarLarge: Dp,\n    val avatarXLarge: Dp,\n\n    // Images\n    val imageThumb: Dp,\n    val imageSmall: Dp,\n    val imageMedium: Dp,\n    val imageLarge: Dp,\n    val imageHero: Dp,\n\n    // Buttons\n    val buttonHeightSmall: Dp,\n    val buttonHeightMedium: Dp,\n    val buttonHeightLarge: Dp,\n    val buttonMinWidth: Dp,\n\n    // Inputs\n    val inputHeight: Dp,\n    val inputMinWidth: Dp,\n\n    // Cards\n    val cardPadding: Dp,\n    val cardSpacing: Dp,\n    val cardElevation: Dp,\n\n    // Components\n    val bottomSheetPeekHeight: Dp,\n    val dialogMaxWidth: Dp,\n    val dialogPadding: Dp\n)\n</code></pre>"},{"location":"api-reference/#predefined-dimensions","title":"Predefined Dimensions","text":"<pre><code>val smallDimensions: Dimensions      // Mobile portrait\nval compactDimensions: Dimensions    // Mobile landscape\nval mediumDimensions: Dimensions     // Tablets\nval largeDimensions: Dimensions      // Desktop\n</code></pre>"},{"location":"api-reference/#font-weight-apis","title":"\u2696\ufe0f Font Weight APIs","text":""},{"location":"api-reference/#responsivefontweights","title":"ResponsiveFontWeights","text":"<p>Data class containing responsive font weight values.</p> <pre><code>data class ResponsiveFontWeights(\n    // Basic font weights\n    val light: FontWeight,\n    val normal: FontWeight,\n    val medium: FontWeight,\n    val semiBold: FontWeight,\n    val bold: FontWeight,\n    val extraBold: FontWeight,\n\n    // Semantic font weights\n    val body: FontWeight,\n    val emphasis: FontWeight,\n    val heading: FontWeight,\n    val display: FontWeight,\n    val button: FontWeight,\n    val caption: FontWeight\n)\n</code></pre>"},{"location":"api-reference/#basic-font-weights","title":"Basic Font Weights","text":"<pre><code>AppTheme.fontWeights.light        // FontWeight.Light\nAppTheme.fontWeights.normal       // FontWeight.Normal\nAppTheme.fontWeights.medium       // FontWeight.Medium\nAppTheme.fontWeights.semiBold     // FontWeight.SemiBold\nAppTheme.fontWeights.bold         // FontWeight.Bold\nAppTheme.fontWeights.extraBold    // FontWeight.ExtraBold\n</code></pre>"},{"location":"api-reference/#semantic-font-weights","title":"Semantic Font Weights","text":"<pre><code>AppTheme.fontWeights.body         // Body text weight\nAppTheme.fontWeights.emphasis     // Emphasized text weight\nAppTheme.fontWeights.heading      // Heading text weight\nAppTheme.fontWeights.display      // Display text weight\nAppTheme.fontWeights.button       // Button text weight\nAppTheme.fontWeights.caption      // Caption text weight\n</code></pre> <p>Usage Examples: <pre><code>// Using basic weights\nText(\n    text = \"Title\",\n    style = AppTheme.materialTypography.titleLarge,\n    fontWeight = AppTheme.fontWeights.semiBold\n)\n\n// Using semantic weights\nText(\n    text = \"Emphasized content\",\n    style = AppTheme.materialTypography.bodyLarge,\n    fontWeight = AppTheme.fontWeights.emphasis\n)\n\nButton(onClick = {}) {\n    Text(\n        text = \"Action\",\n        fontWeight = AppTheme.fontWeights.button\n    )\n}\n</code></pre></p>"},{"location":"api-reference/#typography-apis","title":"\ud83d\udd24 Typography APIs","text":""},{"location":"api-reference/#materialfontresources","title":"MaterialFontResources","text":"<p>Font family configuration for Material Design typography.</p> <pre><code>data class MaterialFontResources(\n    val displayFont: FontFamily? = null,\n    val headlineFont: FontFamily? = null,\n    val titleFont: FontFamily? = null,\n    val bodyFont: FontFamily? = null,\n    val labelFont: FontFamily? = null\n)\n</code></pre>"},{"location":"api-reference/#cupertinofontresources","title":"CupertinoFontResources","text":"<p>Font family configuration for Cupertino typography.</p> <pre><code>data class CupertinoFontResources(\n    val largeTitleFont: FontFamily? = null,\n    val titleFont: FontFamily? = null,\n    val headlineFont: FontFamily? = null,\n    val bodyFont: FontFamily? = null,\n    val captionFont: FontFamily? = null\n)\n</code></pre>"},{"location":"api-reference/#typography-factory-functions","title":"Typography Factory Functions","text":"<pre><code>// Material Typography\n@Composable\nfun materialTypographySmall(fontResources: MaterialFontResources? = null): androidx.compose.material3.Typography\n\n@Composable\nfun materialTypographyCompact(fontResources: MaterialFontResources? = null): androidx.compose.material3.Typography\n\n@Composable\nfun materialTypographyMedium(fontResources: MaterialFontResources? = null): androidx.compose.material3.Typography\n\n@Composable\nfun materialTypographyBig(fontResources: MaterialFontResources? = null): androidx.compose.material3.Typography\n\n// Cupertino Typography\n@Composable\nfun cupertinoTypographySmall(fontResources: CupertinoFontResources? = null): com.slapps.cupertino.theme.Typography\n\n@Composable\nfun cupertinoTypographyCompact(fontResources: CupertinoFontResources? = null): com.slapps.cupertino.theme.Typography\n\n@Composable\nfun cupertinoTypographyMedium(fontResources: CupertinoFontResources? = null): com.slapps.cupertino.theme.Typography\n\n@Composable\nfun cupertinoTypographyBig(fontResources: CupertinoFontResources? = null): com.slapps.cupertino.theme.Typography\n</code></pre>"},{"location":"api-reference/#platform-apis","title":"\ud83d\udda5\ufe0f Platform APIs","text":""},{"location":"api-reference/#platform","title":"Platform","text":"<p>Interface providing platform-specific information.</p> <pre><code>interface Platform {\n    val name: String\n    val type: PlatformType\n    val supportsDarkModeDetection: Boolean\n    val preferredTheme: Theme\n    val hasSystemBackButton: Boolean\n    val supportsEdgeToEdge: Boolean\n    val densityScale: Float\n    val prefersCompactLayouts: Boolean\n}\n</code></pre>"},{"location":"api-reference/#platformtype","title":"PlatformType","text":"<p>Enum representing different platform types.</p> <pre><code>enum class PlatformType {\n    ANDROID,\n    IOS,\n    DESKTOP,\n    WEB\n}\n</code></pre>"},{"location":"api-reference/#platform-functions","title":"Platform Functions","text":"<pre><code>expect fun getCurrentPlatform(): Platform\n\nfun Platform.isMobile(): Boolean\nfun Platform.isDesktop(): Boolean\nfun Platform.isIOS(): Boolean\nfun Platform.isAndroid(): Boolean\nfun Platform.isWeb(): Boolean\nfun Platform.getSpacingMultiplier(): Float\nfun Platform.getMinTouchTargetSize(): Float\nfun Platform.getRecommendedTheme(): Theme\nfun Platform.shouldUseMaterial3(): Boolean\nfun Platform.shouldUseCupertino(): Boolean\n</code></pre>"},{"location":"api-reference/#window-size-apis","title":"\ud83c\udfa8 Window Size APIs","text":"<p>The window size detection is now handled internally by ComposiveTheme. You don't need to wrap your app with any additional providers.</p>"},{"location":"api-reference/#window-size-functions","title":"Window Size Functions","text":"<pre><code>@Composable\nfun rememberWindowSizeClass(): WindowSizeClass\n</code></pre> <p>This function is available for advanced use cases where you need direct access to window size classes, but most users should rely on <code>rememberDeviceConfiguration()</code> instead.</p>"},{"location":"api-reference/#configuration-data-classes","title":"\ud83c\udfa8 Configuration Data Classes","text":""},{"location":"api-reference/#responsiveconfiguration_1","title":"ResponsiveConfiguration","text":"<p>Main configuration class for customizing responsive behavior.</p> <pre><code>@Immutable\ndata class ResponsiveConfiguration(\n    val customDimensions: ResponsiveDimensions? = null,\n    val customFontWeights: ResponsiveFontWeightConfiguration? = null,\n    val customMaterialFontResources: MaterialFontResources? = null,\n    val customCupertinoFontResources: CupertinoFontResources? = null,\n    val customCupertinoTypography: ResponsiveCupertinoTypography? = null,\n    val customMaterialTypography: ResponsiveMaterialTypography? = null,\n    val customMaterialColors: ResponsiveMaterialColors? = null,\n    val customCupertinoColors: ResponsiveCupertinoColors? = null,\n    val defaultThemeType: Theme = getDefaultThemeForPlatform(),\n    val enablePlatformThemePreference: Boolean = false\n)\n</code></pre>"},{"location":"api-reference/#responsive-data-classes","title":"Responsive Data Classes","text":"<pre><code>@Immutable\ndata class ResponsiveDimensions(\n    val small: Dimensions = smallDimensions,\n    val compact: Dimensions = compactDimensions,\n    val medium: Dimensions = mediumDimensions,\n    val large: Dimensions = largeDimensions\n)\n\n@Immutable\ndata class ResponsiveFontWeightConfiguration(\n    val small: ResponsiveFontWeights = smallFontWeights,\n    val compact: ResponsiveFontWeights = compactFontWeights,\n    val medium: ResponsiveFontWeights = mediumFontWeights,\n    val large: ResponsiveFontWeights = largeFontWeights\n)\n\n@Immutable\ndata class ResponsiveCupertinoTypography(\n    val small: com.slapps.cupertino.theme.Typography,\n    val compact: com.slapps.cupertino.theme.Typography,\n    val medium: com.slapps.cupertino.theme.Typography,\n    val large: com.slapps.cupertino.theme.Typography\n)\n\n@Immutable\ndata class ResponsiveMaterialTypography(\n    val small: androidx.compose.material3.Typography,\n    val compact: androidx.compose.material3.Typography,\n    val medium: androidx.compose.material3.Typography,\n    val large: androidx.compose.material3.Typography\n)\n\n@Immutable\ndata class ResponsiveMaterialColors(\n    val light: MaterialColorScheme,\n    val dark: MaterialColorScheme\n)\n\n@Immutable\ndata class ResponsiveCupertinoColors(\n    val light: CupertinoColorScheme,\n    val dark: CupertinoColorScheme\n)\n</code></pre>"},{"location":"api-reference/#orientation-api","title":"\ud83d\udd04 Orientation API","text":""},{"location":"api-reference/#orientation_1","title":"Orientation","text":"<p>Enum representing device orientation.</p> <pre><code>enum class Orientation {\n    Portrait,\n    Landscape\n}\n</code></pre> <p>Access via: <pre><code>val orientation = AppTheme.orientation\n</code></pre></p>"},{"location":"api-reference/#helper-functions","title":"\ud83e\uddea Helper Functions","text":""},{"location":"api-reference/#configuration-helpers","title":"Configuration Helpers","text":"<pre><code>fun getDefaultThemeForPlatform(): Theme\nfun defaultResponsiveConfiguration(): ResponsiveConfiguration\nfun materialResponsiveConfiguration(): ResponsiveConfiguration\nfun cupertinoResponsiveConfiguration(): ResponsiveConfiguration\nfun platformAdaptiveResponsiveConfiguration(): ResponsiveConfiguration\n</code></pre>"},{"location":"api-reference/#font-helpers","title":"Font Helpers","text":"<pre><code>fun materialUniformFonts(fontFamily: FontFamily): MaterialFontResources\nfun cupertinoUniformFonts(fontFamily: FontFamily): CupertinoFontResources\nfun materialFonts(reading: FontFamily, display: FontFamily, label: FontFamily): MaterialFontResources\nfun cupertinoFonts(reading: FontFamily, display: FontFamily, caption: FontFamily): CupertinoFontResources\n</code></pre> <p>Complete API reference for building responsive Compose Multiplatform apps! \ud83d\udcda</p>"},{"location":"brand-composive/","title":"Composive - The Brand Name","text":""},{"location":"brand-composive/#its-composive-not-composite","title":"\ud83c\udfaf It's \"Composive\" - Not \"Composite\"","text":"<p>Composive is the official brand name of our Kotlin Multiplatform UI library. </p>"},{"location":"brand-composive/#correct-composive","title":"\u2705 Correct: Composive","text":"<ul> <li>C-O-M-P-O-S-I-V-E</li> <li>Pronounced: \"com-POH-siv\"</li> <li>GitHub: <code>Composive</code></li> <li>Maven: <code>composive-responsive-adaptive</code></li> </ul>"},{"location":"brand-composive/#incorrect-composite","title":"\u274c Incorrect: Composite","text":"<ul> <li>This is a different word entirely</li> <li>Composite = made up of parts</li> <li>Composive = our library name</li> </ul>"},{"location":"brand-composive/#what-is-composive","title":"\ud83d\ude80 What is Composive?","text":"<p>Composive is a Kotlin Multiplatform UI library that makes building responsive and adaptive user interfaces effortless across Android, iOS, Desktop, and Web platforms.</p>"},{"location":"brand-composive/#key-features-of-composive","title":"Key Features of Composive:","text":"<ul> <li>\ud83d\udcf1 Responsive Design - Automatic screen size adaptation</li> <li>\ud83c\udfa8 Adaptive Themes - Platform-aware UI components  </li> <li>\ud83d\udd27 Zero Configuration - Works out of the box</li> <li>\ud83c\udf10 Cross-Platform - One codebase, all platforms</li> </ul>"},{"location":"brand-composive/#brand-story","title":"\ud83d\udcd6 Brand Story","text":"<p>The name \"Composive\" combines: - Compose - From Jetpack Compose / Compose Multiplatform - -ive - Suffix meaning \"having the nature of\" or \"tending to\"</p> <p>Composive = Having the nature of composition - perfectly describing a library that composes responsive UIs.</p>"},{"location":"brand-composive/#finding-composive","title":"\ud83d\udd0d Finding Composive","text":""},{"location":"brand-composive/#official-links","title":"Official Links:","text":"<ul> <li>GitHub: github.com/Gursimarsingh12/Composive</li> <li>Maven Central: search.maven.org - io.github.gursimarsingh12:composive-responsive-adaptive</li> <li>Documentation: gursimarsingh12.github.io/composive</li> </ul>"},{"location":"brand-composive/#search-terms-that-work","title":"Search Terms That Work:","text":"<ul> <li><code>\"Composive\" kotlin multiplatform</code></li> <li><code>\"Composive\" responsive ui</code></li> <li><code>\"Composive\" github</code></li> <li><code>Composive library kotlin</code></li> <li><code>Composive adaptive ui</code></li> </ul>"},{"location":"brand-composive/#for-developers","title":"\ud83c\udfaf For Developers","text":"<p>When searching for our library, use these exact terms:</p> <pre><code># GitHub Search\n\"Composive\" kotlin multiplatform ui\n\n# Maven Search  \nio.github.gursimarsingh12 composive\n\n# Google Search\n\"Composive\" responsive adaptive kotlin\n</code></pre>"},{"location":"brand-composive/#quick-start-with-composive","title":"\ud83d\udcf1 Quick Start with Composive","text":"<pre><code>dependencies {\n    implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre> <pre><code>@Composable\nfun App() {\n    ComposiveTheme {\n        val deviceConfig = rememberDeviceConfiguration()\n\n        when (deviceConfig) {\n            DeviceConfiguration.MOBILE_PORTRAIT -&gt; MobileLayout()\n            DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n            else -&gt; TabletLayout()\n        }\n    }\n}\n</code></pre>"},{"location":"brand-composive/#brand-guidelines","title":"\ud83c\udff7\ufe0f Brand Guidelines","text":""},{"location":"brand-composive/#correct-usage","title":"\u2705 Correct Usage:","text":"<ul> <li>\"Composive library\"</li> <li>\"Using Composive for responsive UI\"</li> <li>\"Composive makes cross-platform development easy\"</li> <li>\"Built with Composive\"</li> </ul>"},{"location":"brand-composive/#incorrect-usage","title":"\u274c Incorrect Usage:","text":"<ul> <li>\"Composite library\" (Wrong name)</li> <li>\"Composive framework\" (It's a library)</li> <li>\"The Composive\" (No article needed)</li> </ul>"},{"location":"brand-composive/#community","title":"\ud83c\udf1f Community","text":"<p>Join the Composive community: - GitHub Discussions: Share ideas and get help - Issues: Report bugs and request features - Contributions: Help improve Composive</p> <p>Remember: It's Composive, not Composite! \ud83c\udfaf</p> <p>Building responsive UIs has never been easier with Composive. </p>"},{"location":"compose-multiplatform-responsive/","title":"Compose Multiplatform Responsive Design with Composive","text":""},{"location":"compose-multiplatform-responsive/#master-responsive-design-in-compose-multiplatform","title":"Master Responsive Design in Compose Multiplatform","text":"<p>Building responsive Compose Multiplatform applications has never been easier. Composive provides everything you need to create adaptive UIs that look perfect on every screen size and platform.</p>"},{"location":"compose-multiplatform-responsive/#the-challenge-of-responsive-compose-multiplatform","title":"The Challenge of Responsive Compose Multiplatform","text":"<p>Traditional Compose Multiplatform development requires extensive manual work for responsive design:</p>"},{"location":"compose-multiplatform-responsive/#before-composive","title":"\u274c Before Composive","text":"<pre><code>// Complex manual breakpoint management\n@Composable\nfun ResponsiveLayout() {\n    val configuration = LocalConfiguration.current\n    val windowSizeClass = WindowSizeClass.calculateFromSize(\n        DpSize(configuration.screenWidthDp.dp, configuration.screenHeightDp.dp)\n    )\n\n    when {\n        windowSizeClass.widthSizeClass == WindowWidthSizeClass.Compact -&gt; {\n            // Mobile layout - manual implementation\n        }\n        windowSizeClass.widthSizeClass == WindowWidthSizeClass.Medium -&gt; {\n            // Tablet layout - manual implementation  \n        }\n        else -&gt; {\n            // Desktop layout - manual implementation\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#with-composive","title":"\u2705 With Composive","text":"<pre><code>// Automatic responsive behavior\n@Composable\nfun ResponsiveLayout() {\n    ComposiveTheme {\n        val deviceConfig = rememberDeviceConfiguration()\n\n        when (deviceConfig) {\n            DeviceConfiguration.MOBILE_PORTRAIT -&gt; MobileLayout()\n            DeviceConfiguration.TABLET_LANDSCAPE -&gt; TabletLayout()\n            DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#key-features-for-compose-multiplatform-responsive-design","title":"Key Features for Compose Multiplatform Responsive Design","text":""},{"location":"compose-multiplatform-responsive/#automatic-breakpoint-detection","title":"\ud83c\udfaf Automatic Breakpoint Detection","text":"<p>Composive handles all the complexity of responsive breakpoints:</p> <pre><code>@Composable\nfun AdaptiveGrid() {\n    val columns = rememberDeviceConfiguration().getRecommendedColumns()\n\n    LazyVerticalGrid(\n        columns = GridCells.Fixed(columns) // Automatically: 1-4 columns\n    ) {\n        items(data) { item -&gt;\n            ResponsiveCard(item)\n        }\n    }\n}\n</code></pre> <p>Automatic Column Recommendations: - Mobile Portrait: 1 column - Mobile Landscape: 2 columns - Tablet Portrait: 2 columns - Tablet Landscape: 3 columns - Desktop: 4 columns</p>"},{"location":"compose-multiplatform-responsive/#responsive-component-system","title":"\ud83d\udcf1 Responsive Component System","text":"<p>Every component in Composive automatically adapts:</p> <pre><code>@Composable\nfun ResponsiveCard(data: ItemData) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = AppTheme.dimensions.cardElevation // Responsive!\n        )\n    ) {\n        Column(\n            modifier = Modifier.padding(\n                AppTheme.dimensions.cardPadding // Scales with screen size!\n            )\n        ) {\n            Text(\n                text = data.title,\n                style = AppTheme.materialTypography.titleMedium, // Responsive typography!\n                fontWeight = AppTheme.fontWeights.heading\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#responsive-typography-scaling","title":"\ud83c\udfa8 Responsive Typography Scaling","text":"<p>Text automatically scales based on screen size:</p> Screen Size Body Text Headlines Scaling Factor Mobile 16sp 24sp 1.0x Tablet 18sp 28sp 1.125x Desktop 20sp 32sp 1.25x <pre><code>Text(\n    text = \"Scales Automatically\",\n    style = AppTheme.materialTypography.headlineLarge,\n    // Automatically: 24sp \u2192 28sp \u2192 32sp based on screen\n)\n</code></pre>"},{"location":"compose-multiplatform-responsive/#real-world-compose-multiplatform-responsive-examples","title":"Real-World Compose Multiplatform Responsive Examples","text":""},{"location":"compose-multiplatform-responsive/#responsive-email-client","title":"\ud83d\udce7 Responsive Email Client","text":"<pre><code>@Composable\nfun EmailApp() {\n    ComposiveTheme {\n        val deviceConfig = rememberDeviceConfiguration()\n\n        when {\n            deviceConfig.isMobile() -&gt; {\n                // Stack navigation for mobile\n                EmailStackNavigation()\n            }\n            deviceConfig.isTablet() -&gt; {\n                // Master-detail for tablet\n                Row {\n                    EmailList(modifier = Modifier.weight(1f))\n                    EmailDetail(modifier = Modifier.weight(1.5f))\n                }\n            }\n            else -&gt; {\n                // Three-pane for desktop\n                Row {\n                    FolderSidebar(modifier = Modifier.width(240.dp))\n                    EmailList(modifier = Modifier.weight(1f))\n                    EmailDetail(modifier = Modifier.weight(2f))\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#responsive-e-commerce-app","title":"\ud83d\udecd\ufe0f Responsive E-commerce App","text":"<pre><code>@Composable\nfun ProductCatalog() {\n    val deviceConfig = rememberDeviceConfiguration()\n    val showFilters = !deviceConfig.isMobile()\n\n    if (showFilters) {\n        Row {\n            FilterSidebar(modifier = Modifier.width(280.dp))\n            ProductGrid(modifier = Modifier.weight(1f))\n        }\n    } else {\n        Column {\n            SearchBar()\n            ProductGrid(modifier = Modifier.weight(1f))\n        }\n    }\n}\n\n@Composable\nfun ProductGrid(modifier: Modifier = Modifier) {\n    val columns = rememberDeviceConfiguration().getRecommendedColumns()\n\n    LazyVerticalGrid(\n        columns = GridCells.Fixed(columns),\n        modifier = modifier,\n        contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n        horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing)\n    ) {\n        items(products) { product -&gt;\n            ProductCard(product)\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#responsive-dashboard","title":"\ud83d\udcca Responsive Dashboard","text":"<pre><code>@Composable\nfun DashboardScreen() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    LazyVerticalGrid(\n        columns = GridCells.Fixed(deviceConfig.getRecommendedColumns()),\n        contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n        horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing)\n    ) {\n        // Widgets automatically adapt to available space\n        item { MetricCard(\"Users\", \"10.2K\", trend = \"+12%\") }\n        item { MetricCard(\"Revenue\", \"$45.8K\", trend = \"+8%\") }\n        item { ChartCard(\"Growth\", growthData) }\n        item { \n            ActivityCard(\n                activities,\n                modifier = Modifier.then(\n                    if (deviceConfig.isDesktop()) {\n                        Modifier.width(AppTheme.dimensions.dialogMaxWidth)\n                    } else Modifier\n                )\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#advanced-responsive-patterns","title":"Advanced Responsive Patterns","text":""},{"location":"compose-multiplatform-responsive/#adaptive-navigation","title":"Adaptive Navigation","text":"<pre><code>@Composable\nfun AdaptiveNavigation() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when {\n        deviceConfig.isMobile() -&gt; {\n            // Bottom navigation for mobile\n            Scaffold(\n                bottomBar = {\n                    NavigationBar {\n                        NavigationBarItem(/* ... */)\n                    }\n                }\n            ) { /* content */ }\n        }\n\n        deviceConfig.isTablet() -&gt; {\n            // Navigation rail for tablet\n            Row {\n                NavigationRail { NavigationRailItem(/* ... */) }\n                MainContent()\n            }\n        }\n\n        else -&gt; {\n            // Navigation drawer for desktop\n            PermanentNavigationDrawer(\n                drawerContent = { NavigationDrawerContent() }\n            ) { MainContent() }\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#responsive-dialog-handling","title":"Responsive Dialog Handling","text":"<pre><code>@Composable\nfun ResponsiveDialog(\n    showDialog: Boolean,\n    onDismiss: () -&gt; Unit,\n    content: @Composable () -&gt; Unit\n) {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    if (showDialog) {\n        when {\n            deviceConfig.isMobile() -&gt; {\n                // Full-screen on mobile\n                Dialog(onDismissRequest = onDismiss) {\n                    Surface(modifier = Modifier.fillMaxSize()) {\n                        content()\n                    }\n                }\n            }\n\n            else -&gt; {\n                // Centered dialog on larger screens\n                AlertDialog(\n                    onDismissRequest = onDismiss,\n                    modifier = Modifier.width(AppTheme.dimensions.dialogMaxWidth),\n                    text = { content() },\n                    confirmButton = { /* buttons */ }\n                )\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#testing-responsive-compose-multiplatform-apps","title":"Testing Responsive Compose Multiplatform Apps","text":""},{"location":"compose-multiplatform-responsive/#hot-reload-testing-on-desktop","title":"\ud83d\udd25 Hot Reload Testing on Desktop","text":"<p>The fastest way to test responsive behavior:</p> <pre><code># Run your app on desktop\n./gradlew desktopRunHot\n\n# Then resize the window to test different breakpoints:\n# &lt; 600dp width  \u2192 Mobile Portrait\n# 600-840dp     \u2192 Mobile Landscape / Tablet Portrait  \n# 840-1200dp    \u2192 Tablet Landscape\n# &gt; 1200dp      \u2192 Desktop\n</code></pre>"},{"location":"compose-multiplatform-responsive/#debug-device-configuration","title":"Debug Device Configuration","text":"<pre><code>@Composable\nfun DeviceDebugOverlay() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    if (BuildConfig.DEBUG) {\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(AppTheme.dimensions.space2),\n            contentAlignment = Alignment.TopEnd\n        ) {\n            Card {\n                Column(\n                    modifier = Modifier.padding(AppTheme.dimensions.space2)\n                ) {\n                    Text(\"Config: $deviceConfig\")\n                    Text(\"Columns: ${deviceConfig.getRecommendedColumns()}\")\n                    Text(\"Mobile: ${deviceConfig.isMobile()}\")\n                    Text(\"Tablet: ${deviceConfig.isTablet()}\")\n                    Text(\"Desktop: ${deviceConfig.isDesktop()}\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#performance-benefits","title":"Performance Benefits","text":""},{"location":"compose-multiplatform-responsive/#optimized-recomposition","title":"Optimized Recomposition","text":"<p>Composive minimizes recomposition by caching device configuration:</p> <pre><code>@Composable\nfun OptimizedResponsiveLayout() {\n    // Device configuration is cached and only updates on actual changes\n    val deviceConfig = rememberDeviceConfiguration()\n\n    // This will only recompose when device configuration actually changes\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; MobileLayout()\n        DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#smart-resource-loading","title":"Smart Resource Loading","text":"<pre><code>@Composable\nfun ResponsiveImage(imageData: ImageData) {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    // Load appropriate image size based on screen\n    val imageUrl = when {\n        deviceConfig.isMobile() -&gt; imageData.thumbnailUrl\n        deviceConfig.isTablet() -&gt; imageData.mediumUrl\n        else -&gt; imageData.fullSizeUrl\n    }\n\n    AsyncImage(\n        model = imageUrl,\n        modifier = Modifier.size(AppTheme.dimensions.imageMedium)\n    )\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#getting-started-with-responsive-compose-multiplatform","title":"Getting Started with Responsive Compose Multiplatform","text":""},{"location":"compose-multiplatform-responsive/#installation-via-maven-central","title":"Installation via Maven Central","text":"<p>Add the following to your build.gradle.kts:</p> <pre><code>dependencies {\n    implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#basic-setup","title":"Basic Setup","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme {\n        // Your responsive app starts here!\n        ResponsiveMainScreen()\n    }\n}\n</code></pre>"},{"location":"compose-multiplatform-responsive/#next-steps","title":"Next Steps","text":"<ol> <li>Complete Installation Guide \u2192</li> <li>Step-by-Step Tutorial \u2192</li> <li>Real-World Examples \u2192</li> <li>API Reference \u2192</li> </ol>"},{"location":"compose-multiplatform-responsive/#why-choose-composive-for-responsive-compose-multiplatform","title":"Why Choose Composive for Responsive Compose Multiplatform?","text":"<p>\u2705 Zero Configuration - Works out of the box \u2705 Automatic Breakpoints - No manual calculations \u2705 Platform-Aware - Material 3 + Cupertino themes \u2705 Performance Optimized - Minimal recomposition \u2705 Developer Friendly - Familiar Compose APIs \u2705 Hot Reload Testing - Instant feedback on desktop  </p> <p>Start Building Responsive Apps \u2192</p> <p>Transform your Compose Multiplatform apps with effortless responsive design. \ud83d\ude80 </p>"},{"location":"configuration/","title":"Configuration Guide \u2699\ufe0f","text":"<p>Learn how to customize Composive's responsive behavior using the <code>responsiveConfiguration</code> builder and configuration options.</p>"},{"location":"configuration/#overview","title":"\ud83c\udfaf Overview","text":"<p>Composive provides extensive customization through the <code>responsiveConfiguration</code> DSL. You can customize themes, fonts, dimensions, and more while maintaining responsive behavior.</p>"},{"location":"configuration/#basic-configuration","title":"\ud83d\ude80 Basic Configuration","text":""},{"location":"configuration/#default-platform-aware-setup","title":"Default Platform-Aware Setup","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme {\n        // Uses platform defaults:\n        // Android \u2192 Material 3\n        // iOS/Desktop \u2192 Cupertino\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"configuration/#custom-configuration","title":"Custom Configuration","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme(\n        configuration = responsiveConfiguration {\n            // Your customizations here\n        }\n    ) {\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"configuration/#theme-configuration","title":"\ud83c\udfa8 Theme Configuration","text":""},{"location":"configuration/#force-specific-theme","title":"Force Specific Theme","text":"<pre><code>responsiveConfiguration {\n    // Force Material 3 on all platforms\n    withMaterialTheme()\n}\n\nresponsiveConfiguration {\n    // Force Cupertino on all platforms\n    withCupertinoTheme()\n}\n\nresponsiveConfiguration {\n    // Use platform defaults explicitly\n    withPlatformDefaultTheme()\n}\n</code></pre>"},{"location":"configuration/#enhanced-platform-adaptation","title":"Enhanced Platform Adaptation","text":"<pre><code>responsiveConfiguration {\n    // Enable enhanced platform-specific behavior\n    withPlatformThemeAdaptation(enabled = true)\n}\n</code></pre>"},{"location":"configuration/#font-configuration","title":"\ud83d\udd24 Font Configuration","text":""},{"location":"configuration/#material-design-fonts","title":"Material Design Fonts","text":"<pre><code>import androidx.compose.ui.text.font.FontFamily\n\nresponsiveConfiguration {\n    withCustomMaterialFonts(\n        displayFont = FontFamily.Serif,          // Headlines, display text\n        headlineFont = FontFamily.SansSerif,     // Section headlines\n        titleFont = FontFamily.Default,          // Titles\n        bodyFont = FontFamily.Monospace,         // Body text\n        labelFont = FontFamily.Cursive           // Labels, captions\n    )\n}\n</code></pre>"},{"location":"configuration/#cupertino-fonts","title":"Cupertino Fonts","text":"<pre><code>import androidx.compose.ui.text.font.FontFamily\n\nresponsiveConfiguration {\n    withCustomCupertinoFonts(\n        largeTitleFont = myBrandFont,        // Large titles\n        titleFont = myHeadingFont,           // Regular titles\n        headlineFont = myDisplayFont,        // Headlines\n        bodyFont = myReadingFont,            // Body text\n        captionFont = myCaptionFont          // Captions\n    )\n}\n</code></pre>"},{"location":"configuration/#universal-font-setup","title":"Universal Font Setup","text":"<pre><code>import androidx.compose.ui.text.font.FontFamily\n\nresponsiveConfiguration {\n    // Same font for all themes and styles\n    withUniversalFont(FontFamily.SansSerif)\n}\n\nresponsiveConfiguration {\n    // Same font for all Material styles\n    withUniformMaterialFont(FontFamily.Serif)\n}\n\nresponsiveConfiguration {\n    // Same font for all Cupertino styles\n    withUniformCupertinoFont(FontFamily.Default)\n}\n</code></pre>"},{"location":"configuration/#reading-display-font-pattern","title":"Reading &amp; Display Font Pattern","text":"<pre><code>import androidx.compose.ui.text.font.FontFamily\n\nresponsiveConfiguration {\n    // Material: Different fonts for reading vs display\n    withMaterialReadingDisplayFonts(\n        readingFont = FontFamily.SansSerif,     // Body, titles\n        displayFont = FontFamily.Serif,         // Headlines, display\n        labelFont = FontFamily.Default          // Labels\n    )\n\n    // Cupertino: Different fonts for reading vs display\n    withCupertinoReadingDisplayFonts(\n        readingFont = FontFamily.Default,       // Body, regular titles\n        displayFont = FontFamily.Serif,         // Large titles, headlines\n        captionFont = FontFamily.SansSerif      // Captions\n    )\n}\n</code></pre>"},{"location":"configuration/#dimensions-configuration","title":"\ud83d\udccf Dimensions Configuration","text":""},{"location":"configuration/#custom-dimensions-for-screen-sizes","title":"Custom Dimensions for Screen Sizes","text":"<pre><code>import androidx.compose.ui.unit.dp\nimport com.gursimar.composive.responsive.foundation.Dimensions\n\nresponsiveConfiguration {\n    withCustomDimensions(\n        small = customMobileDimensions,      // Mobile portrait\n        compact = customLandscapeDimensions, // Mobile landscape\n        medium = customTabletDimensions,     // Tablet\n        large = customDesktopDimensions      // Desktop\n    )\n}\n\nprivate val customMobileDimensions = Dimensions(\n    space1 = 4.dp,\n    space2 = 8.dp,\n    space4 = 16.dp,\n    space8 = 32.dp,\n    cardPadding = 12.dp,\n    screenPaddingHorizontal = 16.dp,\n    iconSmall = 20.dp,\n    iconMedium = 28.dp,\n    buttonHeightMedium = 44.dp,\n    // ... other dimensions\n)\n</code></pre>"},{"location":"configuration/#partial-dimension-overrides","title":"Partial Dimension Overrides","text":"<pre><code>import com.gursimar.composive.responsive.foundation.smallDimensions\nimport com.gursimar.composive.responsive.foundation.largeDimensions\nimport androidx.compose.ui.unit.dp\n\nresponsiveConfiguration {\n    withCustomDimensions(\n        // Only override specific screen sizes\n        small = smallDimensions.copy(\n            cardPadding = smallDimensions.cardPadding + 8.dp,\n            screenPaddingHorizontal = smallDimensions.screenPaddingHorizontal + 8.dp\n        ),\n        large = largeDimensions.copy(\n            cardPadding = largeDimensions.cardPadding + 8.dp,\n            buttonHeightMedium = largeDimensions.buttonHeightMedium + 4.dp\n        )\n        // medium and compact use defaults\n    )\n}\n</code></pre>"},{"location":"configuration/#font-weight-configuration","title":"\u2696\ufe0f Font Weight Configuration","text":"<pre><code>import androidx.compose.ui.text.font.FontWeight\nimport com.gursimar.composive.responsive.foundation.ResponsiveFontWeights\n\nresponsiveConfiguration {\n    withCustomFontWeights(\n        small = ResponsiveFontWeights(\n            // Basic weights\n            light = FontWeight.Light,\n            normal = FontWeight.Normal,\n            medium = FontWeight.Medium,\n            semiBold = FontWeight.SemiBold,\n            bold = FontWeight.Bold,\n            extraBold = FontWeight.ExtraBold,\n\n            // Semantic weights for mobile\n            body = FontWeight.Normal,\n            emphasis = FontWeight.SemiBold,  // More emphasis on small screens\n            heading = FontWeight.SemiBold,\n            display = FontWeight.Bold,\n            button = FontWeight.Medium,\n            caption = FontWeight.Light\n        ),\n        large = ResponsiveFontWeights(\n            // Basic weights\n            light = FontWeight.ExtraLight,\n            normal = FontWeight.Light,\n            medium = FontWeight.Normal,\n            semiBold = FontWeight.Medium,\n            bold = FontWeight.SemiBold,\n            extraBold = FontWeight.Black,     // Stronger display weight for large screens\n\n            // Semantic weights for desktop\n            body = FontWeight.Light,\n            emphasis = FontWeight.Normal,\n            heading = FontWeight.Medium,\n            display = FontWeight.SemiBold,\n            button = FontWeight.Normal,\n            caption = FontWeight.ExtraLight\n        )\n    )\n}\n</code></pre>"},{"location":"configuration/#color-configuration","title":"\ud83c\udfa8 Color Configuration","text":""},{"location":"configuration/#material-colors","title":"Material Colors","text":"<pre><code>import androidx.compose.material3.lightColorScheme\nimport androidx.compose.material3.darkColorScheme\nimport androidx.compose.ui.graphics.Color\n\nresponsiveConfiguration {\n    withCustomMaterialColors(\n        light = lightColorScheme(\n            primary = Color(0xFF6750A4),\n            secondary = Color(0xFF625B71),\n            background = Color(0xFFFFFBFE)\n        ),\n        dark = darkColorScheme(\n            primary = Color(0xFFD0BCFF),\n            secondary = Color(0xFFCCC2DC),\n            background = Color(0xFF1C1B1F)\n        )\n    )\n}\n</code></pre>"},{"location":"configuration/#cupertino-colors","title":"Cupertino Colors","text":"<pre><code>import com.slapps.cupertino.theme.lightColorScheme\nimport com.slapps.cupertino.theme.darkColorScheme\nimport androidx.compose.ui.graphics.Color\n\nresponsiveConfiguration {\n    withCustomCupertinoColors(\n        light = lightColorScheme(\n            accent = Color(0xFF007AFF),\n            systemBackground = Color.White\n        ),\n        dark = darkColorScheme(\n            accent = Color(0xFF0A84FF),\n            systemBackground = Color.Black\n        )\n    )\n}\n</code></pre>"},{"location":"configuration/#typography-configuration","title":"\ud83d\udcdd Typography Configuration","text":""},{"location":"configuration/#custom-material-typography","title":"Custom Material Typography","text":"<pre><code>import androidx.compose.material3.Typography\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.sp\n\nresponsiveConfiguration {\n    withCustomMaterialTypography(\n        small = Typography(\n            headlineLarge = TextStyle(\n                fontSize = 28.sp,\n                fontWeight = FontWeight.Bold\n            ),\n            bodyLarge = TextStyle(\n                fontSize = 16.sp,\n                fontWeight = FontWeight.Normal\n            )\n        ),\n        large = Typography(\n            headlineLarge = TextStyle(\n                fontSize = 48.sp,\n                fontWeight = FontWeight.Bold\n            ),\n            bodyLarge = TextStyle(\n                fontSize = 24.sp,\n                fontWeight = FontWeight.Normal\n            )\n        )\n    )\n}\n</code></pre>"},{"location":"configuration/#custom-cupertino-typography","title":"Custom Cupertino Typography","text":"<pre><code>import com.slapps.cupertino.theme.Typography\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.sp\n\nresponsiveConfiguration {\n    withCustomCupertinoTypography(\n        small = Typography(\n            largeTitle = TextStyle(\n                fontSize = 30.sp,\n                fontWeight = FontWeight.Bold\n            ),\n            body = TextStyle(\n                fontSize = 16.sp,\n                fontWeight = FontWeight.Normal\n            )\n        ),\n        large = Typography(\n            largeTitle = TextStyle(\n                fontSize = 50.sp,\n                fontWeight = FontWeight.Bold\n            ),\n            body = TextStyle(\n                fontSize = 24.sp,\n                fontWeight = FontWeight.Normal\n            )\n        )\n    )\n}\n</code></pre>"},{"location":"configuration/#complex-configuration-example","title":"\ud83d\udd27 Complex Configuration Example","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme(\n        configuration = responsiveConfiguration {\n            // Theme: Material 3 for brand consistency\n            withMaterialTheme()\n\n            // Fonts: Brand fonts with reading/display separation\n            withMaterialReadingDisplayFonts(\n                readingFont = poppinsFont,\n                displayFont = playfairFont,\n                labelFont = robotoFont\n            )\n\n            // Custom dimensions for better mobile experience\n            withCustomDimensions(\n                small = smallDimensions.copy(\n                    cardPadding = smallDimensions.cardPadding + 8.dp,\n                    screenPaddingHorizontal = smallDimensions.screenPaddingHorizontal + 8.dp,\n                    buttonHeightMedium = smallDimensions.buttonHeightMedium + 4.dp\n                ),\n                large = largeDimensions.copy(\n                    cardPadding = largeDimensions.cardPadding + 8.dp,\n                    screenPaddingHorizontal = largeDimensions.screenPaddingHorizontal + 24.dp\n                )\n            )\n\n            // Brand colors\n            withCustomMaterialColors(\n                light = brandLightColors,\n                dark = brandDarkColors\n            )\n\n            // Enhanced font weights for better hierarchy\n            withCustomFontWeights(\n                small = ResponsiveFontWeights(\n                    // Basic weights\n                    light = FontWeight.Light,\n                    normal = FontWeight.Normal,\n                    medium = FontWeight.Medium,\n                    semiBold = FontWeight.SemiBold,\n                    bold = FontWeight.Bold,\n                    extraBold = FontWeight.ExtraBold,\n\n                    // Semantic weights for mobile\n                    body = FontWeight.Normal,\n                    emphasis = FontWeight.SemiBold,  // More emphasis on small screens\n                    heading = FontWeight.SemiBold,\n                    display = FontWeight.Bold,\n                    button = FontWeight.Medium,\n                    caption = FontWeight.Light\n                ),\n                large = ResponsiveFontWeights(\n                    // Basic weights\n                    light = FontWeight.ExtraLight,\n                    normal = FontWeight.Light,\n                    medium = FontWeight.Normal,\n                    semiBold = FontWeight.Medium,\n                    bold = FontWeight.SemiBold,\n                    extraBold = FontWeight.Black,     // Stronger display weight for large screens\n\n                    // Semantic weights for desktop\n                    body = FontWeight.Light,\n                    emphasis = FontWeight.Normal,\n                    heading = FontWeight.Medium,\n                    display = FontWeight.SemiBold,\n                    button = FontWeight.Normal,\n                    caption = FontWeight.ExtraLight\n                )\n            )\n        }\n    ) {\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"configuration/#configuration-patterns","title":"\ud83c\udfaf Configuration Patterns","text":""},{"location":"configuration/#brand-consistent-configuration","title":"Brand-Consistent Configuration","text":"<pre><code>object BrandConfiguration {\n    val brandColors = responsiveConfiguration {\n        withCustomMaterialColors(\n            light = brandLightColorScheme,\n            dark = brandDarkColorScheme\n        )\n        withCustomCupertinoColors(\n            light = brandCupertinoLight,\n            dark = brandCupertinoDark\n        )\n    }\n\n    val brandFonts = responsiveConfiguration {\n        withUniversalFont(brandFontFamily)\n    }\n\n    val complete = responsiveConfiguration {\n        withMaterialTheme()\n        withUniversalFont(brandFontFamily)\n        withCustomMaterialColors(\n            light = brandLightColorScheme,\n            dark = brandDarkColorScheme\n        )\n        withCustomDimensions(\n            small = brandMobileDimensions,\n            large = brandDesktopDimensions\n        )\n    }\n}\n\n@Composable\nfun App() {\n    ComposiveTheme(configuration = BrandConfiguration.complete) {\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"configuration/#platform-specific-configuration","title":"Platform-Specific Configuration","text":"<pre><code>@Composable\nfun App() {\n    val platform = remember { getCurrentPlatform() }\n\n    val config = when {\n        platform.isAndroid() -&gt; responsiveConfiguration {\n            withMaterialTheme()\n            withCustomMaterialFonts(bodyFont = robotoFont)\n        }\n        platform.isIOS() -&gt; responsiveConfiguration {\n            withCupertinoTheme()\n            withCustomCupertinoFonts(bodyFont = sfProFont)\n        }\n        else -&gt; responsiveConfiguration {\n            withPlatformDefaultTheme()\n        }\n    }\n\n    ComposiveTheme(configuration = config) {\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"configuration/#testing-configurations","title":"\ud83e\uddea Testing Configurations","text":""},{"location":"configuration/#configuration-debugging","title":"Configuration Debugging","text":"<pre><code>@Composable\nfun ConfigurationDebug() {\n    val config = AppTheme.configuration\n    val platform = AppTheme.platform\n\n    LazyColumn {\n        item {\n            Card {\n                Column(modifier = Modifier.padding(AppTheme.dimensions.cardPadding)) {\n                    Text(\"Configuration Debug\", style = MaterialTheme.typography.headlineSmall)\n                    Text(\"Default Theme: ${config.defaultThemeType}\")\n                    Text(\"Platform Preference: ${config.enablePlatformThemePreference}\")\n                    Text(\"Platform: ${platform.name}\")\n                    Text(\"Has Custom Material Fonts: ${config.customMaterialFontResources != null}\")\n                    Text(\"Has Custom Dimensions: ${config.customDimensions != null}\")\n                    Text(\"Has Custom Colors: ${config.customMaterialColors != null}\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"configuration/#ab-testing-configurations","title":"A/B Testing Configurations","text":"<pre><code>@Composable\nfun App() {\n    val useExperimentalConfig = remember { Random.nextBoolean() }\n\n    val config = if (useExperimentalConfig) {\n        responsiveConfiguration {\n            withCustomDimensions(\n                small = experimentalMobileDimensions\n            )\n        }\n    } else {\n        responsiveConfiguration {\n            // Control configuration\n        }\n    }\n\n    ComposiveTheme(configuration = config) {\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"configuration/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"configuration/#1-start-simple-iterate","title":"1. Start Simple, Iterate","text":"<pre><code>// \u2705 Start with defaults\nComposiveTheme {\n    MainScreen()\n}\n\n// \u2705 Add customizations gradually\nComposiveTheme(\n    configuration = responsiveConfiguration {\n        withMaterialTheme()\n    }\n) {\n    MainScreen()\n}\n</code></pre>"},{"location":"configuration/#2-separate-configuration-logic","title":"2. Separate Configuration Logic","text":"<pre><code>// \u2705 Good - Separate configuration objects\nobject AppConfiguration {\n    val production = responsiveConfiguration {\n        withMaterialTheme()\n        withCustomMaterialFonts(bodyFont = productionFont)\n    }\n\n    val development = responsiveConfiguration {\n        withMaterialTheme()\n        // Use default fonts for development\n    }\n}\n</code></pre>"},{"location":"configuration/#3-test-platform-behaviors","title":"3. Test Platform Behaviors","text":"<pre><code>// \u2705 Test on different platforms\nval config = responsiveConfiguration {\n    withPlatformDefaultTheme() // Test platform-specific behavior\n}\n</code></pre>"},{"location":"configuration/#important-apptheme-usage-context","title":"\ud83d\udea8 Important: AppTheme Usage Context","text":"<p>\u274c Cannot use AppTheme in configuration context: <pre><code>// \u274c This will cause compilation error\nprivate val customDimensions = Dimensions(\n    cardPadding = AppTheme.dimensions.cardPadding  // Error: AppTheme not available here\n)\n\n// \u274c This will also fail\nresponsiveConfiguration {\n    withCustomFontWeights(\n        small = ResponsiveFontWeights(\n            body = AppTheme.fontWeights.body  // Error: AppTheme not available here\n        )\n    )\n}\n</code></pre></p> <p>\u2705 Can use AppTheme inside @Composable functions: <pre><code>@Composable\nfun MyComponent() {\n    // \u2705 This works - inside @Composable context\n    Card(\n        modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n    ) {\n        Text(\n            text = \"Hello\",\n            style = AppTheme.materialTypography.bodyLarge,\n            fontWeight = AppTheme.fontWeights.body\n        )\n    }\n}\n</code></pre></p> <p>\u2705 Use base dimensions and hardcoded values in configuration: <pre><code>// \u2705 This works - using base dimensions and hardcoded values\nresponsiveConfiguration {\n    withCustomDimensions(\n        small = smallDimensions.copy(\n            cardPadding = smallDimensions.cardPadding + 8.dp  // Relative to base\n        )\n    )\n    withCustomFontWeights(\n        small = ResponsiveFontWeights(\n            body = FontWeight.Normal,  // Hardcoded FontWeight enum\n            heading = FontWeight.SemiBold\n        )\n    )\n}\n</code></pre></p>"},{"location":"configuration/#related-apis","title":"\ud83d\udd17 Related APIs","text":"<ul> <li>Typography - Font and text customization</li> <li>Responsive Dimensions - Spacing and sizing</li> <li>API Reference - Complete configuration API</li> </ul> <p>Configure Composive to perfectly match your app's needs! \u2699\ufe0f\u2728 </p>"},{"location":"device-configuration/","title":"Device Configuration Guide \ud83d\udcf1","text":"<p>Learn how to use Composive's <code>DeviceConfiguration</code> API to create responsive layouts that adapt to different screen sizes and device types.</p>"},{"location":"device-configuration/#overview","title":"\ud83c\udfaf Overview","text":"<p>The <code>DeviceConfiguration</code> enum is the heart of Composive's responsive system. It automatically detects device types and screen sizes, providing intelligent layout decisions for your app.</p>"},{"location":"device-configuration/#device-types","title":"\ud83d\udccb Device Types","text":""},{"location":"device-configuration/#available-configurations","title":"Available Configurations","text":"<pre><code>enum class DeviceConfiguration {\n    MOBILE_PORTRAIT,    // Phone in portrait (&lt; 600dp width)\n    MOBILE_LANDSCAPE,   // Phone in landscape (600-840dp width, compact height)\n    TABLET_PORTRAIT,    // Tablet in portrait (600-840dp width, expanded height)\n    TABLET_LANDSCAPE,   // Tablet in landscape (840-1200dp width)\n    DESKTOP            // Desktop/large screens (&gt; 1200dp width)\n}\n</code></pre>"},{"location":"device-configuration/#detection-logic","title":"Detection Logic","text":"Width (dp) Height Class Device Configuration &lt; 600 Any <code>MOBILE_PORTRAIT</code> 600-840 Compact <code>MOBILE_LANDSCAPE</code> 600-840 Expanded <code>TABLET_PORTRAIT</code> 840-1200 Any <code>TABLET_LANDSCAPE</code> &gt; 1200 Expanded <code>DESKTOP</code>"},{"location":"device-configuration/#basic-usage","title":"\ud83d\ude80 Basic Usage","text":""},{"location":"device-configuration/#getting-device-configuration","title":"Getting Device Configuration","text":"<pre><code>@Composable\nfun ResponsiveScreen() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; {\n            MobilePortraitLayout()\n        }\n        DeviceConfiguration.MOBILE_LANDSCAPE -&gt; {\n            MobileLandscapeLayout()\n        }\n        DeviceConfiguration.TABLET_PORTRAIT -&gt; {\n            TabletPortraitLayout()\n        }\n        DeviceConfiguration.TABLET_LANDSCAPE -&gt; {\n            TabletLandscapeLayout()\n        }\n        DeviceConfiguration.DESKTOP -&gt; {\n            DesktopLayout()\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#helper-functions","title":"Helper Functions","text":"<pre><code>@Composable\nfun AdaptiveContent() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    // Check device categories\n    when {\n        deviceConfig.isMobile() -&gt; {\n            MobileLayout()\n        }\n        deviceConfig.isTablet() -&gt; {\n            TabletLayout()\n        }\n        deviceConfig.isDesktop() -&gt; {\n            DesktopLayout()\n        }\n    }\n\n    // Check orientation\n    if (deviceConfig.isPortrait()) {\n        PortraitLayout()\n    } else if (deviceConfig.isLandscape()) {\n        LandscapeLayout()\n    }\n\n    // Get recommended columns\n    val columns = deviceConfig.getRecommendedColumns()\n    LazyVerticalGrid(columns = GridCells.Fixed(columns)) {\n        // Grid content\n    }\n}\n</code></pre>"},{"location":"device-configuration/#layout-patterns","title":"\ud83c\udfa8 Layout Patterns","text":""},{"location":"device-configuration/#single-column-layout-mobile-portrait","title":"Single Column Layout (Mobile Portrait)","text":"<pre><code>@Composable\nfun MobilePortraitLayout() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(AppTheme.dimensions.screenPaddingHorizontal)\n    ) {\n        // Header\n        TopAppBar(\n            title = { Text(\"Mobile App\") }\n        )\n\n        // Content\n        LazyColumn(\n            verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.itemSpacing)\n        ) {\n            items(items) { item -&gt;\n                MobileCard(item)\n            }\n        }\n\n        // Bottom navigation\n        NavigationBar {\n            tabs.forEach { tab -&gt;\n                NavigationBarItem(/* ... */)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#two-column-layout-mobile-landscape-tablet-portrait","title":"Two Column Layout (Mobile Landscape / Tablet Portrait)","text":"<pre><code>@Composable\nfun TwoColumnLayout() {\n    Row(modifier = Modifier.fillMaxSize()) {\n        // Navigation rail\n        NavigationRail(\n            modifier = Modifier.fillMaxHeight()\n        ) {\n            tabs.forEach { tab -&gt;\n                NavigationRailItem(/* ... */)\n            }\n        }\n\n        // Main content\n        LazyVerticalGrid(\n            columns = GridCells.Fixed(2),\n            contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n            horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n            verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n            modifier = Modifier.weight(1f)\n        ) {\n            items(items) { item -&gt;\n                ResponsiveCard(item)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#multi-column-layout-desktop","title":"Multi-Column Layout (Desktop)","text":"<pre><code>@Composable\nfun DesktopLayout() {\n    val drawerState = rememberDrawerState(DrawerValue.Open)\n\n    ModalNavigationDrawer(\n        drawerState = drawerState,\n        drawerContent = {\n            ModalDrawerSheet {\n                NavigationDrawerContent()\n            }\n        }\n    ) {\n        Column(modifier = Modifier.fillMaxSize()) {\n            TopAppBar(\n                title = { Text(\"Desktop App\") },\n                navigationIcon = {\n                    IconButton(onClick = { /* toggle drawer */ }) {\n                        Icon(Icons.Default.Menu, contentDescription = \"Menu\")\n                    }\n                }\n            )\n\n            LazyVerticalGrid(\n                columns = GridCells.Fixed(4),\n                contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n                horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n                verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing)\n            ) {\n                items(items) { item -&gt;\n                    DesktopCard(item)\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#advanced-patterns","title":"\ud83d\udd27 Advanced Patterns","text":""},{"location":"device-configuration/#adaptive-navigation","title":"Adaptive Navigation","text":"<pre><code>@Composable\nfun AdaptiveNavigation(\n    selectedTab: String,\n    onTabSelected: (String) -&gt; Unit\n) {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; {\n            NavigationBar {\n                tabs.forEach { tab -&gt;\n                    NavigationBarItem(\n                        icon = { Icon(tab.icon, contentDescription = null) },\n                        label = { Text(tab.label) },\n                        selected = selectedTab == tab.id,\n                        onClick = { onTabSelected(tab.id) }\n                    )\n                }\n            }\n        }\n\n        DeviceConfiguration.MOBILE_LANDSCAPE,\n        DeviceConfiguration.TABLET_PORTRAIT -&gt; {\n            NavigationRail {\n                tabs.forEach { tab -&gt;\n                    NavigationRailItem(\n                        icon = { Icon(tab.icon, contentDescription = null) },\n                        label = { Text(tab.label) },\n                        selected = selectedTab == tab.id,\n                        onClick = { onTabSelected(tab.id) }\n                    )\n                }\n            }\n        }\n\n        DeviceConfiguration.TABLET_LANDSCAPE,\n        DeviceConfiguration.DESKTOP -&gt; {\n            PermanentNavigationDrawer(\n                drawerContent = {\n                    PermanentDrawerSheet {\n                        tabs.forEach { tab -&gt;\n                            NavigationDrawerItem(\n                                icon = { Icon(tab.icon, contentDescription = null) },\n                                label = { Text(tab.label) },\n                                selected = selectedTab == tab.id,\n                                onClick = { onTabSelected(tab.id) }\n                            )\n                        }\n                    }\n                }\n            ) {\n                content()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#content-density-adaptation","title":"Content Density Adaptation","text":"<pre><code>@Composable\nfun AdaptiveContentDensity() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    val itemsPerRow = deviceConfig.getRecommendedColumns()\n    val itemSpacing = when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; AppTheme.dimensions.space2\n        DeviceConfiguration.MOBILE_LANDSCAPE -&gt; AppTheme.dimensions.space3\n        DeviceConfiguration.TABLET_PORTRAIT -&gt; AppTheme.dimensions.space4\n        DeviceConfiguration.TABLET_LANDSCAPE -&gt; AppTheme.dimensions.space5\n        DeviceConfiguration.DESKTOP -&gt; AppTheme.dimensions.space6\n    }\n\n    LazyVerticalGrid(\n        columns = GridCells.Fixed(itemsPerRow),\n        horizontalArrangement = Arrangement.spacedBy(itemSpacing),\n        verticalArrangement = Arrangement.spacedBy(itemSpacing)\n    ) {\n        items(items) { item -&gt;\n            AdaptiveItem(item, deviceConfig)\n        }\n    }\n}\n\n@Composable\nfun AdaptiveItem(\n    item: Item,\n    deviceConfig: DeviceConfiguration\n) {\n    val showDetailedInfo = when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; false\n        DeviceConfiguration.MOBILE_LANDSCAPE -&gt; true\n        else -&gt; true\n    }\n\n    Card {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                text = item.title,\n                style = AppTheme.materialTypography.titleMedium\n            )\n\n            if (showDetailedInfo) {\n                Text(\n                    text = item.description,\n                    style = AppTheme.materialTypography.bodyMedium\n                )\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#orientation-handling","title":"\ud83d\udd04 Orientation Handling","text":"<pre><code>@Composable\nfun OrientationAwareLayout() {\n    val deviceConfig = rememberDeviceConfiguration()\n    val orientation = AppTheme.orientation\n\n    when {\n        deviceConfig.isMobile() &amp;&amp; orientation == Orientation.Portrait -&gt; {\n            VerticalLayout()\n        }\n        deviceConfig.isMobile() &amp;&amp; orientation == Orientation.Landscape -&gt; {\n            HorizontalLayout()\n        }\n        deviceConfig.isTablet() -&gt; {\n            TabletOptimizedLayout()\n        }\n        else -&gt; {\n            DesktopLayout()\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#testing-debugging","title":"\ud83e\uddea Testing &amp; Debugging","text":""},{"location":"device-configuration/#debug-information-component","title":"Debug Information Component","text":"<pre><code>@Composable\nfun DeviceConfigDebug() {\n    val deviceConfig = rememberDeviceConfiguration()\n    val windowSizeClass = rememberWindowSizeClass()\n    val platform = AppTheme.platform\n\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(AppTheme.dimensions.cardSpacing)\n    ) {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                \"Device Configuration Debug\",\n                style = AppTheme.materialTypography.titleLarge\n            )\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n            Text(\"Device Config: $deviceConfig\")\n            Text(\"Width Class: ${windowSizeClass.widthSizeClass}\")\n            Text(\"Height Class: ${windowSizeClass.heightSizeClass}\")\n            Text(\"Platform: ${platform.name}\")\n            Text(\"Is Mobile: ${deviceConfig.isMobile()}\")\n            Text(\"Is Tablet: ${deviceConfig.isTablet()}\")\n            Text(\"Is Desktop: ${deviceConfig.isDesktop()}\")\n            Text(\"Is Portrait: ${deviceConfig.isPortrait()}\")\n            Text(\"Is Landscape: ${deviceConfig.isLandscape()}\")\n            Text(\"Recommended Columns: ${deviceConfig.getRecommendedColumns()}\")\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#hot-reload-testing","title":"Hot Reload Testing","text":"<p>Test your layouts by resizing the desktop window:</p> <pre><code>./gradlew desktopRunHot --mainClass com.example.yourApp.MainKt --stacktrace --auto\n</code></pre> Window Size Expected Configuration 400\u00d7800 <code>MOBILE_PORTRAIT</code> 700\u00d7400 <code>MOBILE_LANDSCAPE</code> 700\u00d7900 <code>TABLET_PORTRAIT</code> 1000\u00d7600 <code>TABLET_LANDSCAPE</code> 1400\u00d7900 <code>DESKTOP</code>"},{"location":"device-configuration/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"device-configuration/#1-use-helper-functions","title":"1. Use Helper Functions","text":"<pre><code>// \u2705 Good - Use helper functions for readability\nwhen {\n    deviceConfig.isMobile() -&gt; MobileLayout()\n    deviceConfig.isTablet() -&gt; TabletLayout()\n    deviceConfig.isDesktop() -&gt; DesktopLayout()\n}\n\n// \u274c Avoid - Checking each enum value\nwhen (deviceConfig) {\n    DeviceConfiguration.MOBILE_PORTRAIT,\n    DeviceConfiguration.MOBILE_LANDSCAPE -&gt; MobileLayout()\n    // ... rest\n}\n</code></pre>"},{"location":"device-configuration/#2-recommended-columns","title":"2. Recommended Columns","text":"<pre><code>// \u2705 Good - Use recommended columns\nval columns = deviceConfig.getRecommendedColumns()\n\n// \u274c Avoid - Hardcoded values\nval columns = when (deviceConfig) {\n    DeviceConfiguration.MOBILE_PORTRAIT -&gt; 1\n    // ... manual mapping\n}\n</code></pre>"},{"location":"device-configuration/#3-combine-with-platform-detection","title":"3. Combine with Platform Detection","text":"<pre><code>@Composable\nfun PlatformAwareLayout() {\n    val deviceConfig = rememberDeviceConfiguration()\n    val platform = AppTheme.platform\n\n    when {\n        platform.isIOS() &amp;&amp; deviceConfig.isMobile() -&gt; {\n            IOSMobileLayout()\n        }\n        platform.isAndroid() &amp;&amp; deviceConfig.isTablet() -&gt; {\n            AndroidTabletLayout()\n        }\n        platform.isDesktop() -&gt; {\n            DesktopLayout()\n        }\n        else -&gt; {\n            DefaultLayout()\n        }\n    }\n}\n</code></pre>"},{"location":"device-configuration/#related-apis","title":"\ud83d\udd17 Related APIs","text":"<ul> <li>Configuration - Theme &amp; responsive customization</li> <li>Typography - Responsive text scaling</li> <li>Responsive Dimensions - Adaptive spacing</li> <li>API Reference - Complete device configuration API</li> </ul> <p>Master responsive layouts with DeviceConfiguration! \ud83d\udcf1\u27a1\ufe0f\ud83d\udda5\ufe0f </p>"},{"location":"examples/","title":"Real-World Examples \ud83c\udf1f","text":"<p>Practical examples showing how to implement common UI patterns with Composive's responsive design system.</p>"},{"location":"examples/#example-1-news-reader-app","title":"\ud83d\udcf1 Example 1: News Reader App","text":"<p>A complete news reader that adapts from mobile to desktop with different navigation patterns.</p>"},{"location":"examples/#app-structure","title":"App Structure","text":"<pre><code>@Composable\nfun NewsApp() {\n    ComposiveTheme {\n        val deviceConfig = rememberDeviceConfiguration()\n\n        when (deviceConfig) {\n            DeviceConfiguration.MOBILE_PORTRAIT -&gt; {\n                MobileNewsLayout()\n            }\n            DeviceConfiguration.MOBILE_LANDSCAPE,\n            DeviceConfiguration.TABLET_PORTRAIT -&gt; {\n                TabletNewsLayout()\n            }\n            DeviceConfiguration.TABLET_LANDSCAPE,\n            DeviceConfiguration.DESKTOP -&gt; {\n                DesktopNewsLayout()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"examples/#mobile-layout-single-column","title":"Mobile Layout (Single Column)","text":"<pre><code>@Composable\nfun MobileNewsLayout() {\n    var selectedCategory by remember { mutableStateOf(\"Technology\") }\n\n    Column(modifier = Modifier.fillMaxSize()) {\n        // Top App Bar\n        TopAppBar(\n            title = { Text(\"News\") },\n            actions = {\n                IconButton(onClick = { /* search */ }) {\n                    Icon(Icons.Default.Search, contentDescription = \"Search\")\n                }\n            }\n        )\n\n        // Category Tabs\n        ScrollableTabRow(\n            selectedTabIndex = categories.indexOf(selectedCategory),\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            categories.forEach { category -&gt;\n                Tab(\n                    selected = selectedCategory == category,\n                    onClick = { selectedCategory = category },\n                    text = { Text(category) }\n                )\n            }\n        }\n\n        // Articles List\n        LazyColumn(\n            contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n            verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.itemSpacing),\n            modifier = Modifier.weight(1f)\n        ) {\n            items(getArticles(selectedCategory)) { article -&gt;\n                MobileArticleCard(article)\n            }\n        }\n\n        // Bottom Navigation\n        NavigationBar {\n            NavigationBarItem(\n                icon = { Icon(Icons.Default.Home, null) },\n                label = { Text(\"Home\") },\n                selected = true,\n                onClick = { }\n            )\n            NavigationBarItem(\n                icon = { Icon(Icons.Default.Bookmark, null) },\n                label = { Text(\"Saved\") },\n                selected = false,\n                onClick = { }\n            )\n        }\n    }\n}\n\n@Composable\nfun MobileArticleCard(article: Article) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        elevation = CardDefaults.cardElevation(AppTheme.dimensions.cardElevation)\n    ) {\n        Column {\n            AsyncImage(\n                model = article.imageUrl,\n                contentDescription = null,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(AppTheme.dimensions.imageMedium),\n                contentScale = ContentScale.Crop\n            )\n\n            Column(\n                modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n            ) {\n                Text(\n                    text = article.title,\n                    style = AppTheme.materialTypography.titleMedium,\n                    fontWeight = AppTheme.fontWeights.heading,\n                    maxLines = 2,\n                    overflow = TextOverflow.Ellipsis\n                )\n\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space1))\n\n                Text(\n                    text = article.summary,\n                    style = AppTheme.materialTypography.bodyMedium,\n                    maxLines = 2,\n                    overflow = TextOverflow.Ellipsis\n                )\n\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n                Row(\n                    modifier = Modifier.fillMaxWidth(),\n                    horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n                    Text(\n                        text = article.source,\n                        style = AppTheme.materialTypography.labelMedium,\n                        color = LocalContentColor.current.copy(alpha = 0.7f)\n                    )\n                    Text(\n                        text = article.timeAgo,\n                        style = AppTheme.materialTypography.labelMedium,\n                        color = LocalContentColor.current.copy(alpha = 0.7f)\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"examples/#desktop-layout-multi-column-with-drawer","title":"Desktop Layout (Multi-Column with Drawer)","text":"<pre><code>@Composable\nfun DesktopNewsLayout() {\n    var selectedCategory by remember { mutableStateOf(\"Technology\") }\n    var selectedArticle by remember { mutableStateOf&lt;Article?&gt;(null) }\n    val drawerState = rememberDrawerState(DrawerValue.Open)\n\n    ModalNavigationDrawer(\n        drawerState = drawerState,\n        drawerContent = {\n            ModalDrawerSheet(\n                modifier = Modifier.width(AppTheme.dimensions.dialogMaxWidth)\n            ) {\n                Column(\n                    modifier = Modifier.padding(AppTheme.dimensions.contentPaddingLarge)\n                ) {\n                    Text(\n                        text = \"News Categories\",\n                        style = AppTheme.materialTypography.titleLarge,\n                        fontWeight = AppTheme.fontWeights.heading\n                    )\n\n                    Spacer(modifier = Modifier.height(AppTheme.dimensions.space4))\n\n                    categories.forEach { category -&gt;\n                        NavigationDrawerItem(\n                            icon = { Icon(getCategoryIcon(category), null) },\n                            label = { Text(category) },\n                            selected = selectedCategory == category,\n                            onClick = { \n                                selectedCategory = category\n                                selectedArticle = null\n                            },\n                            modifier = Modifier.padding(\n                                vertical = AppTheme.dimensions.space1\n                            )\n                        )\n                    }\n                }\n            }\n        }\n    ) {\n        Row(modifier = Modifier.fillMaxSize()) {\n            // Articles List\n            LazyColumn(\n                contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n                verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n                modifier = Modifier.weight(1f)\n            ) {\n                item {\n                    TopAppBar(\n                        title = { Text(selectedCategory) },\n                        navigationIcon = {\n                            IconButton(\n                                onClick = { /* toggle drawer */ }\n                            ) {\n                                Icon(Icons.Default.Menu, \"Menu\")\n                            }\n                        }\n                    )\n                }\n\n                items(getArticles(selectedCategory)) { article -&gt;\n                    DesktopArticleCard(\n                        article = article,\n                        isSelected = selectedArticle == article,\n                        onClick = { selectedArticle = article }\n                    )\n                }\n            }\n\n            // Article Detail Pane\n            if (selectedArticle != null) {\n                ArticleDetailPane(\n                    article = selectedArticle!!,\n                    onClose = { selectedArticle = null },\n                    modifier = Modifier.weight(1f)\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun DesktopArticleCard(\n    article: Article,\n    isSelected: Boolean,\n    onClick: () -&gt; Unit\n) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .clickable { onClick() },\n        colors = CardDefaults.cardColors(\n            containerColor = if (isSelected) {\n                MaterialTheme.colorScheme.primaryContainer\n            } else {\n                MaterialTheme.colorScheme.surface\n            }\n        ),\n        elevation = CardDefaults.cardElevation(AppTheme.dimensions.cardElevation)\n    ) {\n        Row(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            AsyncImage(\n                model = article.imageUrl,\n                contentDescription = null,\n                modifier = Modifier\n                    .size(AppTheme.dimensions.imageSmall)\n                    .clip(RoundedCornerShape(AppTheme.dimensions.space2)),\n                contentScale = ContentScale.Crop\n            )\n\n            Spacer(modifier = Modifier.width(AppTheme.dimensions.space3))\n\n            Column(modifier = Modifier.weight(1f)) {\n                Text(\n                    text = article.title,\n                    style = AppTheme.materialTypography.titleMedium,\n                    fontWeight = AppTheme.fontWeights.heading,\n                    maxLines = 2,\n                    overflow = TextOverflow.Ellipsis\n                )\n\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space1))\n\n                Text(\n                    text = article.summary,\n                    style = AppTheme.materialTypography.bodyMedium,\n                    maxLines = 2,\n                    overflow = TextOverflow.Ellipsis\n                )\n\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n                Row {\n                    Text(\n                        text = article.source,\n                        style = AppTheme.materialTypography.labelSmall,\n                        color = LocalContentColor.current.copy(alpha = 0.7f)\n                    )\n                    Text(\n                        text = \" \u2022 ${article.timeAgo}\",\n                        style = AppTheme.materialTypography.labelSmall,\n                        color = LocalContentColor.current.copy(alpha = 0.7f)\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"examples/#example-2-e-commerce-product-grid","title":"\ud83d\udecd\ufe0f Example 2: E-commerce Product Grid","text":"<p>An adaptive product grid that shows different numbers of columns based on screen size.</p> <pre><code>@Composable\nfun ProductGridScreen() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    val columns = deviceConfig.getRecommendedColumns()\n    val showFilters = deviceConfig.isTablet() || deviceConfig.isDesktop()\n\n    if (showFilters) {\n        Row(modifier = Modifier.fillMaxSize()) {\n            // Filters Sidebar\n            FilterSidebar(\n                modifier = Modifier.width(280.dp)\n            )\n\n            // Products Grid\n            ProductGrid(\n                columns = columns,\n                modifier = Modifier.weight(1f)\n            )\n        }\n    } else {\n        Column(modifier = Modifier.fillMaxSize()) {\n            // Mobile: Filters in bottom sheet or dialog\n            TopAppBar(\n                title = { Text(\"Products\") },\n                actions = {\n                    IconButton(onClick = { /* show filters */ }) {\n                        Icon(Icons.Default.FilterList, \"Filters\")\n                    }\n                }\n            )\n\n            ProductGrid(\n                columns = columns,\n                modifier = Modifier.weight(1f)\n            )\n        }\n    }\n}\n\n@Composable\nfun ProductGrid(\n    columns: Int,\n    modifier: Modifier = Modifier\n) {\n    LazyVerticalGrid(\n        columns = GridCells.Fixed(columns),\n        contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n        horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n        modifier = modifier\n    ) {\n        items(products) { product -&gt;\n            ProductCard(product)\n        }\n    }\n}\n\n@Composable\nfun ProductCard(product: Product) {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        elevation = CardDefaults.cardElevation(AppTheme.dimensions.cardElevation)\n    ) {\n        Column {\n            AsyncImage(\n                model = product.imageUrl,\n                contentDescription = product.name,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .aspectRatio(1f),\n                contentScale = ContentScale.Crop\n            )\n\n            Column(\n                modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n            ) {\n                Text(\n                    text = product.name,\n                    style = when (deviceConfig) {\n                        DeviceConfiguration.MOBILE_PORTRAIT -&gt; AppTheme.materialTypography.bodyMedium\n                        else -&gt; AppTheme.materialTypography.titleSmall\n                    },\n                    fontWeight = AppTheme.fontWeights.body,\n                    maxLines = 2,\n                    overflow = TextOverflow.Ellipsis\n                )\n\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space1))\n\n                Text(\n                    text = product.price,\n                    style = AppTheme.materialTypography.titleMedium,\n                    fontWeight = AppTheme.fontWeights.emphasis,\n                    color = MaterialTheme.colorScheme.primary\n                )\n\n                if (deviceConfig.isTablet() || deviceConfig.isDesktop()) {\n                    Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n                    Button(\n                        onClick = { /* add to cart */ },\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(\"Add to Cart\")\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"examples/#example-3-email-client","title":"\ud83d\udce7 Example 3: Email Client","text":"<p>A master-detail email client that adapts its layout based on screen size.</p> <pre><code>@Composable\nfun EmailClient() {\n    var selectedEmail by remember { mutableStateOf&lt;Email?&gt;(null) }\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when {\n        deviceConfig.isMobile() -&gt; {\n            // Mobile: Stack navigation\n            if (selectedEmail == null) {\n                EmailList(\n                    onEmailSelected = { selectedEmail = it }\n                )\n            } else {\n                EmailDetail(\n                    email = selectedEmail!!,\n                    onBack = { selectedEmail = null }\n                )\n            }\n        }\n\n        deviceConfig.isTablet() -&gt; {\n            // Tablet: Side-by-side\n            Row(modifier = Modifier.fillMaxSize()) {\n                EmailList(\n                    onEmailSelected = { selectedEmail = it },\n                    modifier = Modifier.weight(1f)\n                )\n\n                if (selectedEmail != null) {\n                    EmailDetail(\n                        email = selectedEmail!!,\n                        onBack = null, // No back button in tablet mode\n                        modifier = Modifier.weight(1.5f)\n                    )\n                }\n            }\n        }\n\n        else -&gt; {\n            // Desktop: Three-pane layout\n            Row(modifier = Modifier.fillMaxSize()) {\n                // Folders sidebar\n                FolderSidebar(\n                    modifier = Modifier.width(AppTheme.dimensions.dialogMaxWidth * 0.85f)\n                )\n\n                // Email list\n                EmailList(\n                    onEmailSelected = { selectedEmail = it },\n                    modifier = Modifier.weight(1f)\n                )\n\n                // Email detail\n                if (selectedEmail != null) {\n                    EmailDetail(\n                        email = selectedEmail!!,\n                        onBack = null,\n                        modifier = Modifier.weight(2f)\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"examples/#example-4-settings-screen","title":"\ud83c\udfa8 Example 4: Settings Screen","text":"<p>Adaptive settings screen that groups options differently based on screen size.</p> <pre><code>@Composable\nfun SettingsScreen() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    if (deviceConfig.isMobile()) {\n        // Mobile: Single column list\n        LazyColumn(\n            contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n            verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space2)\n        ) {\n            settingsGroups.forEach { group -&gt;\n                item {\n                    SettingsGroup(group)\n                }\n            }\n        }\n    } else {\n        // Tablet/Desktop: Grid layout\n        LazyVerticalGrid(\n            columns = GridCells.Fixed(2),\n            contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n            horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space4),\n            verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space4)\n        ) {\n            items(settingsGroups) { group -&gt;\n                SettingsGroupCard(group)\n            }\n        }\n    }\n}\n\n@Composable\nfun SettingsGroup(group: SettingsGroup) {\n    Column {\n        Text(\n            text = group.title,\n            style = AppTheme.materialTypography.titleMedium,\n            fontWeight = AppTheme.fontWeights.heading,\n            modifier = Modifier.padding(\n                horizontal = AppTheme.dimensions.space2,\n                vertical = AppTheme.dimensions.space1\n            )\n        )\n\n        Card {\n            Column {\n                group.items.forEachIndexed { index, item -&gt;\n                    SettingsItem(item)\n\n                    if (index &lt; group.items.lastIndex) {\n                        Divider()\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun SettingsGroupCard(group: SettingsGroup) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        elevation = CardDefaults.cardElevation(AppTheme.dimensions.cardElevation)\n    ) {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                text = group.title,\n                style = AppTheme.materialTypography.titleLarge,\n                fontWeight = AppTheme.fontWeights.heading\n            )\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space3))\n\n            group.items.forEach { item -&gt;\n                SettingsItemCompact(item)\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"examples/#example-5-custom-theme-configuration","title":"\ud83d\udd27 Example 5: Custom Theme Configuration","text":"<p>Real-world theme configuration for a branded app.</p> <pre><code>@Composable\nfun BrandedApp() {\n    ComposiveTheme(\n        configuration = responsiveConfiguration {\n            // Force Material 3 for brand consistency\n            withMaterialTheme()\n\n            // Brand fonts\n            withMaterialReadingDisplayFonts(\n                readingFont = interFontFamily,\n                displayFont = poppinsFontFamily,\n                labelFont = robotoFontFamily\n            )\n\n            // Brand colors\n            withCustomMaterialColors(\n                light = lightColorScheme(\n                    primary = Color(0xFF1976D2),\n                    secondary = Color(0xFF388E3C),\n                    background = Color(0xFFFAFAFA),\n                    surface = Color.White\n                ),\n                dark = darkColorScheme(\n                    primary = Color(0xFF42A5F5),\n                    secondary = Color(0xFF66BB6A),\n                    background = Color(0xFF121212),\n                    surface = Color(0xFF1E1E1E)\n                )\n            )\n\n            // Custom dimensions for better mobile experience\n            withCustomDimensions(\n                small = smallDimensions.copy(\n                    buttonHeightMedium = smallDimensions.buttonHeightMedium + AppTheme.dimensions.space1,\n                    cardPadding = smallDimensions.cardPadding + AppTheme.dimensions.space2,\n                    screenPaddingHorizontal = smallDimensions.screenPaddingHorizontal + AppTheme.dimensions.space2\n                ),\n                large = largeDimensions.copy(\n                    buttonHeightMedium = largeDimensions.buttonHeightMedium + AppTheme.dimensions.space1,\n                    cardPadding = largeDimensions.cardPadding + AppTheme.dimensions.space2,\n                    screenPaddingHorizontal = largeDimensions.screenPaddingHorizontal + AppTheme.dimensions.space6\n                )\n            )\n        }\n    ) {\n        MainApp()\n    }\n}\n\nprivate val interFontFamily = FontFamily(\n    Font(Res.font.inter_regular, FontWeight.Normal),\n    Font(Res.font.inter_medium, FontWeight.Medium),\n    Font(Res.font.inter_semibold, FontWeight.SemiBold),\n    Font(Res.font.inter_bold, FontWeight.Bold)\n)\n\nprivate val poppinsFontFamily = FontFamily(\n    Font(Res.font.poppins_regular, FontWeight.Normal),\n    Font(Res.font.poppins_semibold, FontWeight.SemiBold),\n    Font(Res.font.poppins_bold, FontWeight.Bold)\n)\n</code></pre>"},{"location":"examples/#testing-hot-reload","title":"\ud83e\uddea Testing &amp; Hot Reload","text":"<p>Test all examples by running on desktop and resizing the window:</p> <pre><code>./gradlew desktopRunHot --mainClass com.example.myApp.MainKt --stacktrace --auto\n</code></pre> <p>Watch your layouts adapt in real-time as you resize from mobile to desktop sizes!</p>"},{"location":"examples/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<ol> <li>Device Configuration drives layout decisions</li> <li>AppTheme provides consistent styling</li> <li>Responsive Configuration enables customization</li> <li>Hot Reload speeds up development</li> <li>Platform-aware defaults ensure native feel</li> </ol> <p>Build amazing responsive apps with these proven patterns! \ud83c\udf1f </p>"},{"location":"getting-started/","title":"Getting Started with Composive \ud83d\ude80","text":"<p>Welcome to Composive! This guide will walk you through setting up responsive and adaptive design in your Compose Multiplatform application.</p>"},{"location":"getting-started/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Kotlin Multiplatform project with Compose Multiplatform</li> <li>Minimum versions:</li> <li>Kotlin: 1.9.0+</li> <li>Compose Multiplatform: 1.5.0+</li> <li>Android target SDK: 21+</li> </ul>"},{"location":"getting-started/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<p>By the end of this guide, you'll have: - \u2705 Responsive layouts that adapt to any screen size - \u2705 Platform-appropriate themes (Material 3 on Android, Cupertino on iOS) - \u2705 Typography that scales automatically - \u2705 Device-aware navigation patterns</p>"},{"location":"getting-started/#step-1-installation","title":"\ud83d\udce6 Step 1: Installation","text":""},{"location":"getting-started/#installation-via-maven-central","title":"Installation via Maven Central","text":"<p>Add the following to your build.gradle.kts:</p> <pre><code>dependencies {\n    implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre>"},{"location":"getting-started/#step-2-basic-setup","title":"\ud83c\udfd7\ufe0f Step 2: Basic Setup","text":""},{"location":"getting-started/#set-up-your-app-entry-point","title":"Set Up Your App Entry Point","text":"<pre><code>// In your App.kt or main composable\nimport com.gursimar.composive.responsive.theme.ComposiveTheme\n\n@Composable\nfun App() {\n    ComposiveTheme {\n        // Your app content here\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"getting-started/#create-your-first-responsive-screen","title":"Create Your First Responsive Screen","text":"<pre><code>import com.gursimar.composive.responsive.core.rememberDeviceConfiguration\nimport com.gursimar.composive.responsive.core.DeviceConfiguration\nimport com.gursimar.composive.responsive.theme.AppTheme\n\n@Composable\nfun MainScreen() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; {\n            MobilePortraitLayout()\n        }\n        DeviceConfiguration.MOBILE_LANDSCAPE -&gt; {\n            MobileLandscapeLayout()\n        }\n        DeviceConfiguration.TABLET_PORTRAIT -&gt; {\n            TabletPortraitLayout()\n        }\n        DeviceConfiguration.TABLET_LANDSCAPE -&gt; {\n            TabletLandscapeLayout()\n        }\n        DeviceConfiguration.DESKTOP -&gt; {\n            DesktopLayout()\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#step-3-create-responsive-layouts","title":"\ud83d\udcf1 Step 3: Create Responsive Layouts","text":""},{"location":"getting-started/#mobile-portrait-layout-single-column","title":"Mobile Portrait Layout (Single Column)","text":"<pre><code>@Composable\nfun MobilePortraitLayout() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(AppTheme.dimensions.screenPaddingHorizontal)\n    ) {\n        TopAppBar(\n            title = { Text(\"Mobile Portrait\") }\n        )\n\n        LazyColumn(\n            verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.itemSpacing)\n        ) {\n            items(10) { index -&gt;\n                ResponsiveCard(\n                    title = \"Item $index\",\n                    description = \"This is a responsive card that adapts to screen size\"\n                )\n            }\n        }\n\n        Spacer(modifier = Modifier.weight(1f))\n\n        // Bottom navigation for mobile\n        NavigationBar {\n            NavigationBarItem(\n                icon = { Icon(Icons.Default.Home, contentDescription = null) },\n                label = { Text(\"Home\") },\n                selected = true,\n                onClick = { }\n            )\n            NavigationBarItem(\n                icon = { Icon(Icons.Default.Search, contentDescription = null) },\n                label = { Text(\"Search\") },\n                selected = false,\n                onClick = { }\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#tablet-landscape-layout-multi-column-with-navigation-rail","title":"Tablet Landscape Layout (Multi-Column with Navigation Rail)","text":"<pre><code>@Composable\nfun TabletLandscapeLayout() {\n    Row(modifier = Modifier.fillMaxSize()) {\n        // Navigation rail on the left\n        NavigationRail {\n            NavigationRailItem(\n                icon = { Icon(Icons.Default.Home, contentDescription = null) },\n                label = { Text(\"Home\") },\n                selected = true,\n                onClick = { }\n            )\n            NavigationRailItem(\n                icon = { Icon(Icons.Default.Search, contentDescription = null) },\n                label = { Text(\"Search\") },\n                selected = false,\n                onClick = { }\n            )\n        }\n\n        // Main content area with multiple columns\n        LazyVerticalGrid(\n            columns = GridCells.Fixed(3),\n            contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n            horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n            verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n            modifier = Modifier.weight(1f)\n        ) {\n            items(20) { index -&gt;\n                ResponsiveCard(\n                    title = \"Card $index\",\n                    description = \"Multi-column tablet layout\"\n                )\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#desktop-layout-full-navigation-drawer","title":"Desktop Layout (Full Navigation Drawer)","text":"<pre><code>@Composable\nfun DesktopLayout() {\n    val drawerState = rememberDrawerState(DrawerValue.Open)\n\n    ModalNavigationDrawer(\n        drawerState = drawerState,\n        drawerContent = {\n            ModalDrawerSheet {\n                Text(\n                    \"Desktop Navigation\",\n                    modifier = Modifier.padding(AppTheme.dimensions.contentPaddingLarge),\n                    style = AppTheme.materialTypography.headlineSmall\n                )\n\n                NavigationDrawerItem(\n                    icon = { Icon(Icons.Default.Home, contentDescription = null) },\n                    label = { Text(\"Home\") },\n                    selected = true,\n                    onClick = { }\n                )\n                NavigationDrawerItem(\n                    icon = { Icon(Icons.Default.Search, contentDescription = null) },\n                    label = { Text(\"Search\") },\n                    selected = false,\n                    onClick = { }\n                )\n            }\n        }\n    ) {\n        Column(modifier = Modifier.fillMaxSize()) {\n            TopAppBar(\n                title = { Text(\"Desktop Layout\") },\n                navigationIcon = {\n                    IconButton(onClick = { /* Toggle drawer */ }) {\n                        Icon(Icons.Default.Menu, contentDescription = \"Menu\")\n                    }\n                }\n            )\n\n            LazyVerticalGrid(\n                columns = GridCells.Fixed(4),\n                contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n                horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing),\n                verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing)\n            ) {\n                items(30) { index -&gt;\n                    ResponsiveCard(\n                        title = \"Desktop Card $index\",\n                        description = \"Four-column desktop layout with navigation drawer\"\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#step-4-create-responsive-components","title":"\ud83c\udfa8 Step 4: Create Responsive Components","text":""},{"location":"getting-started/#responsive-card-component","title":"Responsive Card Component","text":"<pre><code>@Composable\nfun ResponsiveCard(\n    title: String,\n    description: String,\n    modifier: Modifier = Modifier\n) {\n    Card(\n        modifier = modifier.fillMaxWidth(),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = AppTheme.dimensions.cardElevation\n        )\n    ) {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                text = title,\n                style = AppTheme.materialTypography.titleMedium,\n                fontWeight = AppTheme.fontWeights.heading\n            )\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n            Text(\n                text = description,\n                style = AppTheme.materialTypography.bodyMedium,\n                color = LocalContentColor.current.copy(alpha = 0.7f)\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#responsive-avatar-component","title":"Responsive Avatar Component","text":"<pre><code>@Composable\nfun ResponsiveAvatar(\n    imageUrl: String?,\n    contentDescription: String?,\n    modifier: Modifier = Modifier\n) {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    val avatarSize = when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; AppTheme.dimensions.avatarSmall\n        DeviceConfiguration.MOBILE_LANDSCAPE,\n        DeviceConfiguration.TABLET_PORTRAIT -&gt; AppTheme.dimensions.avatarMedium\n        DeviceConfiguration.TABLET_LANDSCAPE -&gt; AppTheme.dimensions.avatarLarge\n        DeviceConfiguration.DESKTOP -&gt; AppTheme.dimensions.avatarXLarge\n    }\n\n    AsyncImage(\n        model = imageUrl,\n        contentDescription = contentDescription,\n        modifier = modifier\n            .size(avatarSize)\n            .clip(CircleShape),\n        contentScale = ContentScale.Crop\n    )\n}\n</code></pre>"},{"location":"getting-started/#step-5-advanced-configuration","title":"\ud83d\udd27 Step 5: Advanced Configuration","text":""},{"location":"getting-started/#custom-theme-configuration","title":"Custom Theme Configuration","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme(\n        configuration = responsiveConfiguration {\n            // Force Material 3 on all platforms\n            withMaterialTheme()\n\n            // Custom fonts\n            withCustomMaterialFonts(\n                displayFont = FontFamily.Serif,\n                bodyFont = FontFamily.SansSerif\n            )\n\n            // Custom dimensions for different screen sizes\n            withCustomDimensions(\n                small = customMobileDimensions,\n                large = customDesktopDimensions\n            )\n        }\n    ) {\n        MainScreen()\n    }\n}\n\nprivate val customMobileDimensions = Dimensions(\n    // Use base dimensions as reference and modify as needed\n    space1 = smallDimensions.space1,\n    space2 = smallDimensions.space2,\n    space4 = smallDimensions.space4,\n    // Customize specific values\n    cardPadding = smallDimensions.cardPadding + 4.dp,\n    screenPaddingHorizontal = smallDimensions.screenPaddingHorizontal + 4.dp,\n    // ... other dimensions\n)\n</code></pre>"},{"location":"getting-started/#platform-specific-behavior","title":"Platform-Specific Behavior","text":"<pre><code>@Composable\nfun PlatformAdaptiveButton(\n    text: String,\n    onClick: () -&gt; Unit,\n    modifier: Modifier = Modifier\n) {\n    val platform = AppTheme.platform\n\n    when {\n        platform.isAndroid() -&gt; {\n            // Material 3 button for Android\n            Button(\n                onClick = onClick,\n                modifier = modifier.height(AppTheme.dimensions.buttonHeightMedium)\n            ) {\n                Text(text, style = AppTheme.materialTypography.labelLarge)\n            }\n        }\n        platform.isIOS() -&gt; {\n            // Cupertino button for iOS\n            CupertinoButton(\n                onClick = onClick,\n                modifier = modifier.height(AppTheme.dimensions.buttonHeightMedium)\n            ) {\n                Text(text, style = AppTheme.cupertinoTypography.body)\n            }\n        }\n        else -&gt; {\n            // Default button for other platforms\n            Button(onClick = onClick, modifier = modifier) {\n                Text(text)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#step-6-testing-with-hot-reload","title":"\ud83d\udd25 Step 6: Testing with Hot Reload","text":""},{"location":"getting-started/#desktop-development-setup","title":"Desktop Development Setup","text":"<ol> <li> <p>Run your app on desktop: <pre><code>./gradlew desktopRunHot --mainClass com.example.myApp.MainKt --stacktrace --auto\n</code></pre></p> </li> <li> <p>Test different screen sizes by resizing the window:</p> </li> <li>Mobile Portrait: &lt; 600dp width</li> <li>Mobile Landscape: 600-840dp width (wide window)</li> <li>Tablet Portrait: 600-840dp width (tall window)</li> <li>Tablet Landscape: 840-1200dp width</li> <li> <p>Desktop: &gt; 1200dp width</p> </li> <li> <p>Observe layout changes in real-time without recompilation!</p> </li> </ol>"},{"location":"getting-started/#debugging-device-configuration","title":"Debugging Device Configuration","text":"<pre><code>@Composable\nfun DeviceDebugInfo() {\n    val deviceConfig = rememberDeviceConfiguration()\n    val windowSizeClass = rememberWindowSizeClass()\n    val platform = AppTheme.platform\n\n    LazyColumn {\n        item {\n            Card(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(AppTheme.dimensions.cardSpacing)\n            ) {\n                Column(\n                    modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n                ) {\n                    Text(\"Debug Info\", style = AppTheme.materialTypography.titleLarge)\n                    Text(\"Device Config: $deviceConfig\")\n                    Text(\"Width Class: ${windowSizeClass.widthSizeClass}\")\n                    Text(\"Height Class: ${windowSizeClass.heightSizeClass}\")\n                    Text(\"Platform: ${platform.name}\")\n                    Text(\"Recommended Columns: ${deviceConfig.getRecommendedColumns()}\")\n                    Text(\"Is Mobile: ${deviceConfig.isMobile()}\")\n                    Text(\"Is Tablet: ${deviceConfig.isTablet()}\")\n                    Text(\"Is Desktop: ${deviceConfig.isDesktop()}\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#next-steps","title":"\u2705 Next Steps","text":"<p>Congratulations! You now have a fully responsive Compose Multiplatform app. Here's what to explore next:</p> <ol> <li>Device Configuration - Learn advanced responsive patterns</li> <li>Typography - Master responsive text styling</li> <li>Configuration - Themes, colors &amp; responsive customization</li> <li>Examples - See real-world implementation patterns</li> <li>API Reference - Complete API documentation</li> </ol>"},{"location":"getting-started/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>Issue: Cannot resolve Composive dependency <pre><code>// \u274c Wrong - Missing JitPack repository\nrepositories {\n    mavenCentral()\n}\n\n// \u2705 Correct - Include JitPack repository\nrepositories {\n    mavenCentral()\n    maven { url = uri(\"https://jitpack.io\") }\n}\n\n// \u2705 Correct dependency\nimplementation(\"com.github.Gursimarsingh12.composive:composive-responsive-adaptive:1.0.2\")\n</code></pre></p> <p>Issue: Layout doesn't change when resizing desktop window <pre><code>// \u2705 Solution: Make sure you're using responsive device configuration\n@Composable\nfun App() {\n    ComposiveTheme { // \u2190 Make sure this wraps your app\n        MainScreen()\n    }\n}\n</code></pre></p> <p>Issue: Theme doesn't match platform expectations <pre><code>// \u2705 Solution: Use default platform-aware configuration\nComposiveTheme { // \u2190 Uses platform defaults automatically\n    // Android gets Material 3, iOS gets Cupertino\n}\n\n// Or explicitly set theme:\nComposiveTheme(\n    configuration = responsiveConfiguration {\n        withMaterialTheme() // Force Material 3\n        // or withCupertinoTheme() // Force Cupertino\n    }\n) {\n    MainScreen()\n}\n</code></pre></p> <p>Issue: Typography not scaling properly <pre><code>// \u2705 Solution: Use AppTheme typography instead of hardcoded values\nText(\n    text = \"Responsive Text\",\n    style = AppTheme.materialTypography.bodyLarge // \u2190 Scales automatically\n)\n</code></pre></p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check existing issues: GitHub Issues</li> <li>Create a new issue: Include your <code>build.gradle.kts</code> files and error messages</li> <li>Contact directly: anonymouslike083@gmail.com</li> </ol>"},{"location":"getting-started/#youre-ready","title":"\ud83c\udf89 You're Ready!","text":"<p>You now have all the tools to create beautiful, responsive UIs that work perfectly across mobile, tablet, and desktop platforms. The Composive library handles the complexity while giving you full control over the design.</p> <p>Happy coding! \ud83d\ude80 </p>"},{"location":"installation/","title":"Installation Guide \ud83d\udce6","text":"<p>This guide covers installing Composive in different types of Kotlin Multiplatform projects.</p>"},{"location":"installation/#requirements","title":"\ud83d\udccb Requirements","text":""},{"location":"installation/#minimum-versions","title":"Minimum Versions","text":"<ul> <li>Kotlin: 1.9.0+</li> <li>Compose Multiplatform: 1.5.0+</li> <li>Android minSdk: 21+</li> <li>iOS Deployment Target: 13.0+</li> </ul>"},{"location":"installation/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>\u2705 Android (API 21+)</li> <li>\u2705 iOS (iOS 13.0+)</li> <li>\u2705 Desktop (Windows, macOS, Linux)</li> <li>\u2705 Web (Kotlin/Wasm, Kotlin/JS)</li> </ul>"},{"location":"installation/#quick-installation","title":"\ud83d\ude80 Quick Installation","text":""},{"location":"installation/#repository-setup","title":"Repository Setup","text":"<p>First, add JitPack repository to your <code>settings.gradle.kts</code>:</p> <pre><code>dependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        mavenCentral()\n        maven { url = uri(\"https://jitpack.io\") }\n    }\n}\n</code></pre>"},{"location":"installation/#for-new-projects","title":"For New Projects","text":"<p>If you're starting a new project, use the official Kotlin Multiplatform wizard:</p> <ol> <li>Visit kmp.jetbrains.com</li> <li>Configure your project with:</li> <li>\u2705 Android</li> <li>\u2705 iOS (with Compose Multiplatform UI)</li> <li>\u2705 Desktop</li> <li>\u2705 Include tests</li> <li>Download and extract your project</li> <li>Add JitPack repository (see above)</li> <li>Add Composive dependency (see below)</li> </ol>"},{"location":"installation/#for-existing-projects","title":"For Existing Projects","text":"<p>Add Composive to your <code>build.gradle.kts</code> files:</p>"},{"location":"installation/#shared-module-commonmain","title":"Shared Module (commonMain)","text":"<pre><code>// shared/build.gradle.kts\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n        }\n    }\n}\n</code></pre>"},{"location":"installation/#version-catalog-recommended","title":"Version Catalog (Recommended)","text":"<p>If using Gradle version catalogs (<code>libs.versions.toml</code>):</p> <pre><code>[versions]\ncomposive = \"1.0.2\"\n\n[libraries]\ncomposive-responsive-adaptive = { module = \"io.github.gursimarsingh12:composive-responsive-adaptive\", version.ref = \"composive\" }\n</code></pre> <p>Then in your <code>build.gradle.kts</code>:</p> <pre><code>commonMain.dependencies {\n    implementation(libs.composive.responsive.adaptive)\n}\n</code></pre>"},{"location":"installation/#platform-specific-setup","title":"\ud83d\udcf1 Platform-Specific Setup","text":""},{"location":"installation/#android-setup","title":"Android Setup","text":"<p>No additional setup required! Composive works out of the box with Android.</p> <pre><code>// androidMain/build.gradle.kts - No additional dependencies needed\nandroid {\n    compileSdk = 34\n    defaultConfig {\n        minSdk = 21\n        targetSdk = 34\n    }\n}\n</code></pre>"},{"location":"installation/#ios-setup","title":"iOS Setup","text":"<p>No additional setup required! Composive integrates seamlessly with iOS.</p> <pre><code>// iosMain - No additional dependencies needed\nkotlin {\n    iosX64()\n    iosArm64()\n    iosSimulatorArm64()\n}\n</code></pre>"},{"location":"installation/#desktop-setup","title":"Desktop Setup","text":"<pre><code>// Desktop module or shared module for desktop target\nkotlin {\n    jvm(\"desktop\") {\n        jvmToolchain(11)\n    }\n\n    sourceSets {\n        val desktopMain by getting {\n            dependencies {\n                implementation(compose.desktop.currentOs)\n                // Composive dependency already included in commonMain\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"installation/#complete-project-structure","title":"\ud83d\udd27 Complete Project Structure","text":"<p>Here's a complete example of a multiplatform project with Composive:</p>"},{"location":"installation/#project-structure","title":"Project Structure","text":"<pre><code>MyApp/\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 commonMain/kotlin/\n\u2502   \u2502   \u251c\u2500\u2500 androidMain/kotlin/\n\u2502   \u2502   \u251c\u2500\u2500 iosMain/kotlin/\n\u2502   \u2502   \u2514\u2500\u2500 desktopMain/kotlin/\n\u2502   \u2514\u2500\u2500 build.gradle.kts\n\u251c\u2500\u2500 androidApp/\n\u2502   \u2514\u2500\u2500 build.gradle.kts\n\u251c\u2500\u2500 iosApp/\n\u251c\u2500\u2500 desktopApp/\n\u2502   \u2514\u2500\u2500 build.gradle.kts\n\u251c\u2500\u2500 gradle/\n\u2502   \u2514\u2500\u2500 libs.versions.toml\n\u251c\u2500\u2500 settings.gradle.kts\n\u2514\u2500\u2500 build.gradle.kts\n</code></pre>"},{"location":"installation/#settingsgradlekts","title":"<code>settings.gradle.kts</code>","text":"<pre><code>dependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        mavenCentral()\n        maven { url = uri(\"https://jitpack.io\") }\n    }\n}\n\nrootProject.name = \"MyApp\"\ninclude(\":commonMain\")\ninclude(\":androidApp\")\ninclude(\":desktopApp\")\n</code></pre>"},{"location":"installation/#root-buildgradlekts","title":"Root <code>build.gradle.kts</code>","text":"<pre><code>plugins {\n    alias(libs.plugins.kotlin.multiplatform) apply false\n    alias(libs.plugins.compose.multiplatform) apply false\n    alias(libs.plugins.android.application) apply false\n    alias(libs.plugins.android.library) apply false\n}\n</code></pre>"},{"location":"installation/#gradlelibsversionstoml","title":"<code>gradle/libs.versions.toml</code>","text":"<pre><code>[versions]\nkotlin = \"1.9.21\"\ncompose = \"1.5.11\"\ncomposive = \"1.0.2\"\nandroid-minSdk = \"21\"\nandroid-compileSdk = \"34\"\n\n[libraries]\n# Composive\ncomposive-responsive-adaptive = { module = \"io.github.gursimarsingh12:composive-responsive-adaptive\", version.ref = \"composive\" }\n\n# Compose Multiplatform\ncompose-ui = { module = \"androidx.compose.ui:ui\", version.ref = \"compose\" }\ncompose-ui-tooling = { module = \"androidx.compose.ui:ui-tooling\", version.ref = \"compose\" }\ncompose-ui-tooling-preview = { module = \"androidx.compose.ui:ui-tooling-preview\", version.ref = \"compose\" }\ncompose-foundation = { module = \"androidx.compose.foundation:foundation\", version.ref = \"compose\" }\ncompose-material3 = { module = \"androidx.compose.material3:material3\", version.ref = \"compose\" }\n\n[plugins]\nkotlin-multiplatform = { id = \"org.jetbrains.kotlin.multiplatform\", version.ref = \"kotlin\" }\ncompose-multiplatform = { id = \"org.jetbrains.compose\", version.ref = \"compose\" }\nandroid-application = { id = \"com.android.application\", version = \"8.2.0\" }\nandroid-library = { id = \"com.android.library\", version = \"8.2.0\" }\n</code></pre>"},{"location":"installation/#shared-module-buildgradlekts","title":"Shared Module <code>build.gradle.kts</code>","text":"<pre><code>plugins {\n    alias(libs.plugins.kotlin.multiplatform)\n    alias(libs.plugins.compose.multiplatform)\n    alias(libs.plugins.android.library)\n}\n\nkotlin {\n    androidTarget {\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = \"11\"\n            }\n        }\n    }\n\n    jvm(\"desktop\")\n\n    iosX64()\n    iosArm64()\n    iosSimulatorArm64()\n\n    sourceSets {\n        commonMain.dependencies {\n            implementation(compose.runtime)\n            implementation(compose.foundation)\n            implementation(compose.material3)\n            implementation(compose.ui)\n            implementation(compose.components.resources)\n            implementation(compose.components.uiToolingPreview)\n\n            // Composive - Main dependency\n            implementation(libs.composive.responsive.adaptive)\n        }\n\n        androidMain.dependencies {\n            implementation(libs.compose.ui.tooling.preview)\n        }\n\n        val desktopMain by getting {\n            dependencies {\n                implementation(compose.desktop.currentOs)\n            }\n        }\n    }\n}\n\nandroid {\n    namespace = \"com.yourpackage.myapp\"\n    compileSdk = libs.versions.android.compileSdk.get().toInt()\n\n    defaultConfig {\n        minSdk = libs.versions.android.minSdk.get().toInt()\n    }\n\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n}\n</code></pre>"},{"location":"installation/#android-app-buildgradlekts","title":"Android App <code>build.gradle.kts</code>","text":"<pre><code>plugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.multiplatform)\n    alias(libs.plugins.compose.multiplatform)\n}\n\nkotlin {\n    androidTarget {\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = \"11\"\n            }\n        }\n    }\n\n    sourceSets {\n        androidMain.dependencies {\n            implementation(project(\":shared\"))\n            implementation(libs.compose.ui.tooling)\n        }\n    }\n}\n\nandroid {\n    namespace = \"com.yourpackage.myapp.android\"\n    compileSdk = libs.versions.android.compileSdk.get().toInt()\n\n    defaultConfig {\n        applicationId = \"com.yourpackage.myapp.android\"\n        minSdk = libs.versions.android.minSdk.get().toInt()\n        targetSdk = libs.versions.android.compileSdk.get().toInt()\n        versionCode = 1\n        versionName = \"1.0\"\n    }\n\n    buildTypes {\n        getByName(\"release\") {\n            isMinifyEnabled = false\n        }\n    }\n\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n}\n</code></pre>"},{"location":"installation/#desktop-app-buildgradlekts","title":"Desktop App <code>build.gradle.kts</code>","text":"<pre><code>import org.jetbrains.compose.desktop.application.dsl.TargetFormat\n\nplugins {\n    alias(libs.plugins.kotlin.multiplatform)\n    alias(libs.plugins.compose.multiplatform)\n}\n\nkotlin {\n    jvm(\"desktop\")\n\n    sourceSets {\n        val desktopMain by getting {\n            dependencies {\n                implementation(project(\":shared\"))\n                implementation(compose.desktop.currentOs)\n            }\n        }\n    }\n}\n\ncompose.desktop {\n    application {\n        mainClass = \"com.yourpackage.myapp.MainKt\"\n\n        nativeDistributions {\n            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)\n            packageName = \"MyApp\"\n            packageVersion = \"1.0.2\"\n        }\n    }\n}\n</code></pre>"},{"location":"installation/#first-run","title":"\ud83c\udfc3\u200d\u2642\ufe0f First Run","text":""},{"location":"installation/#1-create-your-app-composable","title":"1. Create Your App Composable","text":"<p>Create <code>shared/src/commonMain/kotlin/App.kt</code>:</p> <pre><code>import androidx.compose.runtime.Composable\nimport com.gursimar.composive.responsive.theme.ComposiveTheme\n\n@Composable\nfun App() {\n    ComposiveTheme {\n        MainScreen()\n    }\n}\n\n@Composable\nfun MainScreen() {\n    // Your app content\n}\n</code></pre>"},{"location":"installation/#2-android-mainactivity","title":"2. Android MainActivity","text":"<pre><code>// androidApp/src/main/kotlin/MainActivity.kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            App()\n        }\n    }\n}\n</code></pre>"},{"location":"installation/#3-desktop-main","title":"3. Desktop Main","text":"<pre><code>// desktopApp/src/jvmMain/kotlin/main.kt\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    Window(\n        onCloseRequest = ::exitApplication,\n        title = \"MyApp\"\n    ) {\n        App()\n    }\n}\n</code></pre>"},{"location":"installation/#4-ios-app","title":"4. iOS App","text":"<pre><code>// iosApp/iosApp/ContentView.swift\nimport SwiftUI\nimport shared\n\nstruct ContentView: View {\n    var body: some View {\n        ComposeView()\n            .ignoresSafeArea(.keyboard)\n    }\n}\n\nstruct ComposeView: UIViewControllerRepresentable {\n    func makeUIViewController(context: Context) -&gt; UIViewController {\n        Main_iosKt.MainViewController()\n    }\n\n    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {}\n}\n</code></pre> <pre><code>// shared/src/iosMain/kotlin/main.ios.kt\nimport androidx.compose.ui.window.ComposeUIViewController\n\nfun MainViewController() = ComposeUIViewController { App() }\n</code></pre>"},{"location":"installation/#test-your-installation","title":"\ud83e\uddea Test Your Installation","text":""},{"location":"installation/#quick-test-component","title":"Quick Test Component","text":"<p>Create this test component to verify everything is working:</p> <pre><code>import androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.gursimar.composive.responsive.core.rememberDeviceConfiguration\nimport com.gursimar.composive.responsive.theme.AppTheme\n\n@Composable\nfun TestInstallation() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(AppTheme.dimensions.cardSpacing)\n    ) {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                text = \"\u2705 Composive Installation Successful!\",\n                style = AppTheme.materialTypography.headlineSmall\n            )\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n            Text(\n                text = \"Device Configuration: $deviceConfig\",\n                style = AppTheme.materialTypography.bodyMedium\n            )\n\n            Text(\n                text = \"Platform: ${AppTheme.platform.name}\",\n                style = AppTheme.materialTypography.bodyMedium\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"installation/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#repository-issues","title":"Repository Issues","text":"<p>Problem: Cannot resolve Composive dependency <pre><code>// \u274c Wrong - Missing JitPack repository\nrepositories {\n    mavenCentral() // Only Maven Central\n}\n\n// \u2705 Correct - Include JitPack repository  \nrepositories {\n    mavenCentral()\n    maven { url = uri(\"https://jitpack.io\") }\n}\n</code></pre></p>"},{"location":"installation/#dependency-name-issues","title":"Dependency Name Issues","text":"<p>Problem: Wrong dependency name <pre><code>// \u274c Wrong dependency names\nimplementation(\"com.gursimar.composive:composive:1.0.2\")\nimplementation(\"com.github.gursimar:composive:1.0.2\")\n\n// \u2705 Correct JitPack dependency\nimplementation(\"com.github.Gursimarsingh12.composive:composive-responsive-adaptive:1.0.2\")\n</code></pre></p>"},{"location":"installation/#version-conflicts","title":"Version Conflicts","text":"<p>Problem: Compose version conflicts <pre><code>// \u2705 Make sure all Compose dependencies use compatible versions\nval composeVersion = \"latest version of compose\"\n\nimplementation(\"androidx.compose.ui:ui:$composeVersion\")\nimplementation(\"androidx.compose.material3:material3:$composeVersion\")\nimplementation(\"com.github.Gursimarsingh12.composive:composive-responsive-adaptive:1.0.2\")\n</code></pre></p>"},{"location":"installation/#missing-windowsizeclass-provider","title":"Missing WindowSizeClass Provider","text":"<p>Problem: App crashes or layouts don't respond properly <pre><code>// \u2705 Always wrap your app with ComposiveTheme\n@Composable\nfun App() {\n    ComposiveTheme { // \u2190 Required for responsive behavior!\n        MainScreen()\n    }\n}\n</code></pre></p>"},{"location":"installation/#jitpack-build-issues","title":"JitPack Build Issues","text":"<p>Problem: JitPack shows \"Build failing\" status</p> <p>Solutions: 1. Check that the repository is public 2. Verify the release tag exists: <code>https://github.com/Gursimarsingh12/Composive/releases</code> 3. Wait for JitPack to build (may take several minutes) 4. Check JitPack logs: <code>https://jitpack.io/com/github/Gursimarsingh12/composive/1.0.2/build.log</code></p>"},{"location":"installation/#network-issues","title":"Network Issues","text":"<p>Problem: Cannot download from JitPack <pre><code>// \u2705 Make sure you have internet connection and JitPack is accessible\n// You can also try using a VPN if JitPack is blocked in your region\n</code></pre></p>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you're still having issues:</p> <ol> <li>Check existing issues: GitHub Issues</li> <li>Create a new issue: Include your <code>build.gradle.kts</code> files and error messages</li> <li>Contact directly: anonymouslike083@gmail.com</li> </ol>"},{"location":"installation/#verification-checklist","title":"Verification Checklist","text":"<p>\u2705 JitPack repository added to <code>settings.gradle.kts</code> \u2705 Correct dependency name with exact case: <code>com.github.Gursimarsingh12.composive:composive-responsive-adaptive:1.0.2</code> \u2705 Version tag exists: v1.0.2 \u2705 App wrapped with <code>ComposiveTheme</code> \u2705 Compatible Compose Multiplatform version \u2705 Internet connection available</p>"},{"location":"installation/#next-steps","title":"\u2705 Next Steps","text":"<p>Now that Composive is installed, you're ready to:</p> <ol> <li>Get Started - Build your first responsive layout</li> <li>Configuration - Customize themes and behavior</li> <li>Examples - See real-world implementations</li> </ol> <p>Welcome to responsive design made easy! \ud83c\udf89 </p>"},{"location":"kotlin-multiplatform-ui-library/","title":"Kotlin Multiplatform UI Library - Composive","text":""},{"location":"kotlin-multiplatform-ui-library/#the-ultimate-kotlin-multiplatform-ui-library-for-modern-apps","title":"The Ultimate Kotlin Multiplatform UI Library for Modern Apps","text":"<p>Composive is the most comprehensive Kotlin Multiplatform UI library designed for developers who want to create stunning, responsive applications across all platforms with a single codebase.</p>"},{"location":"kotlin-multiplatform-ui-library/#why-choose-composive-as-your-kotlin-multiplatform-ui-library","title":"Why Choose Composive as Your Kotlin Multiplatform UI Library?","text":""},{"location":"kotlin-multiplatform-ui-library/#complete-cross-platform-solution","title":"\ud83c\udfaf Complete Cross-Platform Solution","text":"<p>Composive is the only Kotlin Multiplatform UI library you need:</p> <ul> <li>\u2705 Android - Native Material 3 components</li> <li>\u2705 iOS - Authentic Cupertino design system  </li> <li>\u2705 Desktop - Windows, macOS, Linux support</li> <li>\u2705 Web - Kotlin/JS and Kotlin/Wasm ready</li> </ul>"},{"location":"kotlin-multiplatform-ui-library/#unmatched-developer-experience","title":"\ud83d\ude80 Unmatched Developer Experience","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme {\n        // Automatically adapts to each platform!\n        // Material 3 on Android, Cupertino on iOS\n        ResponsiveLayout()\n    }\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#built-for-modern-multi-platform-development","title":"\ud83d\udcf1 Built for Modern Multi-Platform Development","text":"<p>Unlike other Kotlin Multiplatform UI libraries, Composive provides:</p> Feature Composive Other Libraries Automatic Theme Adaptation \u2705 Material 3 + Cupertino \u274c Manual setup required Responsive Design \u2705 Built-in breakpoints \u274c Custom implementation Zero Configuration \u2705 Works out of the box \u274c Complex setup Platform-Aware Components \u2705 Smart defaults \u274c One-size-fits-all Hot Reload Testing \u2705 Desktop window resize \u274c Limited testing"},{"location":"kotlin-multiplatform-ui-library/#kotlin-multiplatform-ui-library-comparison","title":"Kotlin Multiplatform UI Library Comparison","text":""},{"location":"kotlin-multiplatform-ui-library/#composive-vs-other-solutions","title":"Composive vs Other Solutions","text":""},{"location":"kotlin-multiplatform-ui-library/#traditional-approach","title":"Traditional Approach","text":"<pre><code>// \u274c Complex, platform-specific code\nwhen (platform) {\n    Android -&gt; MaterialTheme { AndroidUI() }\n    iOS -&gt; CupertinoTheme { IOSUI() }\n    Desktop -&gt; DesktopTheme { DesktopUI() }\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#composive-approach","title":"Composive Approach","text":"<pre><code>// \u2705 Simple, unified approach\nComposiveTheme {\n    // Automatically platform-appropriate!\n    MyApp()\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#installation-via-maven-central","title":"Installation via Maven Central","text":"<p>Add the following to your build.gradle.kts:</p> <pre><code>dependencies {\n    implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#key-features-of-this-kotlin-multiplatform-ui-library","title":"Key Features of This Kotlin Multiplatform UI Library","text":""},{"location":"kotlin-multiplatform-ui-library/#1-responsive-design-system","title":"1. Responsive Design System","text":"<pre><code>val deviceConfig = rememberDeviceConfiguration()\n\nwhen (deviceConfig) {\n    DeviceConfiguration.MOBILE_PORTRAIT -&gt; SingleColumnLayout()\n    DeviceConfiguration.TABLET_LANDSCAPE -&gt; MultiColumnLayout()\n    DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#2-platform-smart-theming","title":"2. Platform-Smart Theming","text":"<pre><code>// Automatic platform detection\nComposiveTheme {\n    // Android \u2192 Material 3 automatically\n    // iOS \u2192 Cupertino automatically  \n    // Desktop \u2192 Platform-appropriate\n    Button(\"Platform Native\") {\n        // Styled correctly for each platform\n    }\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#3-adaptive-typography","title":"3. Adaptive Typography","text":"<pre><code>Text(\n    text = \"Scales Perfectly\",\n    style = AppTheme.materialTypography.headlineLarge,\n    // Automatically adjusts for screen size\n    fontWeight = AppTheme.fontWeights.heading\n)\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#real-world-kotlin-multiplatform-ui-examples","title":"Real-World Kotlin Multiplatform UI Examples","text":""},{"location":"kotlin-multiplatform-ui-library/#e-commerce-app-with-adaptive-grid","title":"E-commerce App with Adaptive Grid","text":"<pre><code>@Composable\nfun ProductGrid() {\n    val columns = rememberDeviceConfiguration().getRecommendedColumns()\n\n    LazyVerticalGrid(\n        columns = GridCells.Fixed(columns),\n        horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing)\n    ) {\n        items(products) { product -&gt;\n            ProductCard(product) // Automatically responsive\n        }\n    }\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#adaptive-navigation-pattern","title":"Adaptive Navigation Pattern","text":"<pre><code>@Composable\nfun AdaptiveNavigation() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when {\n        deviceConfig.isMobile() -&gt; NavigationBar { /* Bottom nav */ }\n        deviceConfig.isTablet() -&gt; NavigationRail { /* Side nav */ }\n        deviceConfig.isDesktop() -&gt; NavigationDrawer { /* Drawer nav */ }\n    }\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#performance-benefits","title":"Performance Benefits","text":""},{"location":"kotlin-multiplatform-ui-library/#optimized-for-kotlin-multiplatform","title":"Optimized for Kotlin Multiplatform","text":"<ul> <li>\u26a1 Fast Compilation - Shared UI logic reduces build times</li> <li>\ud83d\udce6 Smaller App Size - Single codebase means less duplication  </li> <li>\ud83d\udd27 Easy Maintenance - One place to update UI across all platforms</li> <li>\ud83e\uddea Better Testing - Test once, works everywhere</li> </ul>"},{"location":"kotlin-multiplatform-ui-library/#memory-efficiency","title":"Memory Efficiency","text":"<p>Composive is designed for optimal performance:</p> <ul> <li>Lazy Loading - Components load only when needed</li> <li>Smart Recomposition - Minimal UI updates</li> <li>Platform Optimization - Native performance on each platform</li> </ul>"},{"location":"kotlin-multiplatform-ui-library/#migration-guide","title":"Migration Guide","text":""},{"location":"kotlin-multiplatform-ui-library/#from-other-kotlin-multiplatform-ui-libraries","title":"From Other Kotlin Multiplatform UI Libraries","text":"<p>Migrating to Composive is straightforward:</p>"},{"location":"kotlin-multiplatform-ui-library/#before-manual-platform-setup","title":"Before (Manual Platform Setup)","text":"<pre><code>// Complex multi-platform setup\nexpect class PlatformTheme() {\n    @Composable\n    fun ProvideTheme(content: @Composable () -&gt; Unit)\n}\n\n// Platform-specific implementations required\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#after-composive","title":"After (Composive)","text":"<pre><code>// Simple unified approach\nComposiveTheme {\n    // Everything just works!\n    MyApp()\n}\n</code></pre>"},{"location":"kotlin-multiplatform-ui-library/#success-stories","title":"Success Stories","text":""},{"location":"kotlin-multiplatform-ui-library/#companies-using-composive","title":"Companies Using Composive","text":"<p>\"Composive reduced our development time by 60% while giving us native-quality UIs on all platforms.\" - Mobile Development Team</p> <p>\"The best Kotlin Multiplatform UI library we've used. Hot reload testing on desktop is a game-changer.\" - Senior Android Developer</p>"},{"location":"kotlin-multiplatform-ui-library/#getting-started-with-composive","title":"Getting Started with Composive","text":""},{"location":"kotlin-multiplatform-ui-library/#1-quick-start-tutorial","title":"1. Quick Start Tutorial","text":"<p>Follow our step-by-step guide \u2192</p>"},{"location":"kotlin-multiplatform-ui-library/#2-explore-examples","title":"2. Explore Examples","text":"<p>See real-world implementations \u2192</p>"},{"location":"kotlin-multiplatform-ui-library/#3-api-reference","title":"3. API Reference","text":"<p>Complete documentation \u2192</p>"},{"location":"kotlin-multiplatform-ui-library/#community-support","title":"Community &amp; Support","text":""},{"location":"kotlin-multiplatform-ui-library/#open-source-free","title":"Open Source &amp; Free","text":"<p>Composive is completely free and open-source:</p> <ul> <li>\ud83d\udcdc MIT License - Use in any project</li> <li>\ud83e\udd1d Community Driven - Contributions welcome</li> <li>\ud83d\udc1b Issue Tracking - Quick bug fixes</li> <li>\ud83d\udcda Comprehensive Docs - Everything you need</li> </ul>"},{"location":"kotlin-multiplatform-ui-library/#join-the-community","title":"Join the Community","text":"<ul> <li>GitHub: Star the repository \u2b50</li> <li>Issues: Report bugs or request features</li> <li>Discussions: Join developer conversations</li> </ul>"},{"location":"kotlin-multiplatform-ui-library/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"kotlin-multiplatform-ui-library/#q-is-composive-production-ready","title":"Q: Is Composive production-ready?","text":"<p>A: Yes! Composive is stable and used in production apps across multiple industries.</p>"},{"location":"kotlin-multiplatform-ui-library/#q-does-it-work-with-existing-compose-multiplatform-projects","title":"Q: Does it work with existing Compose Multiplatform projects?","text":"<p>A: Absolutely! You can gradually adopt Composive in existing projects.</p>"},{"location":"kotlin-multiplatform-ui-library/#q-whats-the-learning-curve","title":"Q: What's the learning curve?","text":"<p>A: If you know Compose, you already know Composive. The API is intuitive and familiar.</p>"},{"location":"kotlin-multiplatform-ui-library/#q-how-does-it-compare-to-flutter","title":"Q: How does it compare to Flutter?","text":"<p>A: Composive uses Kotlin and integrates with existing Android/iOS codebases. Native performance with true platform integration.</p>"},{"location":"kotlin-multiplatform-ui-library/#next-steps","title":"Next Steps","text":"<p>Ready to build amazing cross-platform apps?</p> <p>Get Started Now \u2192 View Examples \u2192 API Docs \u2192</p> <p>Composive - The only Kotlin Multiplatform UI library you'll ever need. \ud83d\ude80 </p>"},{"location":"maven-central/","title":"Composive on Maven Central \ud83d\udce6","text":""},{"location":"maven-central/#download-the-leading-kotlin-multiplatform-ui-library-from-maven-central","title":"Download the Leading Kotlin Multiplatform UI Library from Maven Central","text":"<p>Composive is now available on Maven Central - the world's largest repository for Java and Kotlin libraries. Get started with responsive cross-platform development in seconds.</p>"},{"location":"maven-central/#quick-installation-from-maven-central","title":"\ud83d\ude80 Quick Installation from Maven Central","text":"<pre><code>dependencies {\n    implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre> <p>That's it! No additional repository configuration needed. Maven Central is included by default in all Gradle projects.</p>"},{"location":"maven-central/#why-choose-composive-from-maven-central","title":"Why Choose Composive from Maven Central?","text":""},{"location":"maven-central/#reliable-distribution","title":"\u2705 Reliable Distribution","text":"<ul> <li>Hosted on Maven Central - the most trusted repository for JVM libraries</li> <li>Automatic dependency resolution - all required dependencies downloaded automatically</li> <li>Global CDN - fast downloads worldwide</li> <li>99.9% uptime - always available when you need it</li> </ul>"},{"location":"maven-central/#easy-integration","title":"\u2705 Easy Integration","text":"<ul> <li>No repository setup - works with default Gradle configuration</li> <li>Transitive dependencies - automatically includes Material 3 Adaptive and Cupertino components</li> <li>Version management - use Gradle version catalogs for easy updates</li> <li>IDE support - full autocomplete and documentation in Android Studio &amp; IntelliJ</li> </ul>"},{"location":"maven-central/#enterprise-ready","title":"\u2705 Enterprise Ready","text":"<ul> <li>Stable releases - thoroughly tested before publishing</li> <li>Semantic versioning - predictable updates</li> <li>License compliance - Apache 2.0 license clearly documented</li> <li>Security scanning - all artifacts scanned for vulnerabilities</li> </ul>"},{"location":"maven-central/#maven-central-coordinates","title":"Maven Central Coordinates","text":"Property Value Group ID <code>io.github.gursimarsingh12</code> Artifact ID <code>composive-responsive-adaptive</code> Latest Version <code>1.0.2</code> Repository Maven Central"},{"location":"maven-central/#copy-paste-installation","title":"\ud83d\udccb Copy-Paste Installation","text":""},{"location":"maven-central/#gradle-kotlin-dsl","title":"Gradle (Kotlin DSL)","text":"<pre><code>dependencies {\n    implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre>"},{"location":"maven-central/#gradle-groovy-dsl","title":"Gradle (Groovy DSL)","text":"<pre><code>dependencies {\n    implementation 'io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2'\n}\n</code></pre>"},{"location":"maven-central/#maven","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.github.gursimarsingh12&lt;/groupId&gt;\n    &lt;artifactId&gt;composive-responsive-adaptive&lt;/artifactId&gt;\n    &lt;version&gt;1.0.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"maven-central/#version-catalog-libsversionstoml","title":"Version Catalog (libs.versions.toml)","text":"<pre><code>[versions]\ncomposive = \"1.0.2\"\n\n[libraries]\ncomposive-responsive-adaptive = { module = \"io.github.gursimarsingh12:composive-responsive-adaptive\", version.ref = \"composive\" }\n</code></pre>"},{"location":"maven-central/#whats-included-from-maven-central","title":"What's Included from Maven Central","text":"<p>When you add Composive from Maven Central, you automatically get:</p>"},{"location":"maven-central/#core-library","title":"\ud83d\udce6 Core Library","text":"<ul> <li>Responsive layout system</li> <li>Adaptive component framework</li> <li>Cross-platform theme engine</li> <li>Device configuration detection</li> </ul>"},{"location":"maven-central/#transitive-dependencies","title":"\ud83d\udce6 Transitive Dependencies","text":"<ul> <li>Material 3 Adaptive Layout - Google's official adaptive components</li> <li>Cupertino Components - Authentic iOS-style UI elements</li> <li>Cupertino Adaptive - Platform-aware component wrappers</li> </ul>"},{"location":"maven-central/#platform-support","title":"\ud83d\udce6 Platform Support","text":"<ul> <li>Android (API 21+)</li> <li>iOS (iOS 13.0+)</li> <li>Desktop (Windows, macOS, Linux)</li> <li>Web (Kotlin/JS, Kotlin/Wasm)</li> </ul>"},{"location":"maven-central/#maven-central-vs-other-repositories","title":"Maven Central vs Other Repositories","text":"Feature Maven Central JitPack Custom Repos Reliability \u2705 99.9% uptime \u274c Build failures \u274c Varies Speed \u2705 Global CDN \u274c Slower builds \u274c Varies Security \u2705 Scanned \u274c Not guaranteed \u274c Unknown Setup \u2705 Zero config \u274c Requires setup \u274c Complex Enterprise \u2705 Approved \u274c Often blocked \u274c Varies"},{"location":"maven-central/#verification-security","title":"Verification &amp; Security","text":""},{"location":"maven-central/#signed-artifacts","title":"\ud83d\udd10 Signed Artifacts","text":"<p>All Composive artifacts on Maven Central are: - Digitally signed with GPG keys - Checksums verified (SHA-1, MD5) - Vulnerability scanned automatically - License verified (Apache 2.0)</p>"},{"location":"maven-central/#verify-your-download","title":"\ud83d\udd0d Verify Your Download","text":"<pre><code># Check artifact signature\ngpg --verify composive-responsive-adaptive-1.0.2.jar.asc\n\n# Verify checksums\nsha1sum composive-responsive-adaptive-1.0.2.jar\n</code></pre>"},{"location":"maven-central/#version-history-on-maven-central","title":"Version History on Maven Central","text":"Version Release Date Changes 1.0.2 2025-01-XX Initial Maven Central release"},{"location":"maven-central/#upcoming-releases","title":"\ud83d\udcc8 Upcoming Releases","text":"<ul> <li>1.1.0 - Enhanced Web platform support</li> <li>1.2.0 - Additional adaptive components</li> <li>2.0.0 - Compose Multiplatform 2.0 support</li> </ul>"},{"location":"maven-central/#migration-from-other-repositories","title":"Migration from Other Repositories","text":""},{"location":"maven-central/#from-jitpack","title":"From JitPack","text":"<pre><code>// Old JitPack dependency\nimplementation(\"com.github.Gursimarsingh12.composive:composive-responsive-adaptive:1.0.2\")\n\n// New Maven Central dependency\nimplementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n</code></pre> <p>Benefits of switching: - \u2705 Faster builds (no compilation needed) - \u2705 Better reliability - \u2705 Enterprise firewall friendly - \u2705 Automatic security scanning</p>"},{"location":"maven-central/#ide-integration","title":"IDE Integration","text":""},{"location":"maven-central/#android-studio-intellij-idea","title":"\ud83c\udfaf Android Studio / IntelliJ IDEA","text":"<ul> <li>Auto-completion for all Composive APIs</li> <li>Documentation available on hover</li> <li>Quick fixes for common issues</li> <li>Refactoring support for version updates</li> </ul>"},{"location":"maven-central/#gradle-integration","title":"\ud83c\udfaf Gradle Integration","text":"<ul> <li>Dependency insights - see all transitive dependencies</li> <li>Version management - easy updates with version catalogs</li> <li>Build cache - faster incremental builds</li> </ul>"},{"location":"maven-central/#support-resources","title":"Support &amp; Resources","text":""},{"location":"maven-central/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Getting Started Guide - Quick setup tutorial</li> <li>API Reference - Complete API documentation</li> <li>Examples - Real-world usage examples</li> </ul>"},{"location":"maven-central/#community","title":"\ud83e\udd1d Community","text":"<ul> <li>GitHub Issues - Bug reports &amp; feature requests</li> <li>GitHub Discussions - Community Q&amp;A</li> <li>Maven Central Page - Official artifact page</li> </ul>"},{"location":"maven-central/#direct-support","title":"\ud83d\udce7 Direct Support","text":"<ul> <li>Email: anonymouslike083@gmail.com</li> <li>LinkedIn: Gursimar Singh</li> </ul>"},{"location":"maven-central/#next-steps","title":"Next Steps","text":"<ol> <li>Install from Maven Central - Add to your project</li> <li>Quick Start Tutorial - Build your first responsive UI</li> <li>Browse Examples - See real-world implementations</li> <li>Join Community - Connect with other developers</li> </ol> <p>Ready to build responsive cross-platform UIs?</p> <p>Download from Maven Central \u2192 Get Started \u2192</p> <p>Composive is available on Maven Central under the Apache 2.0 license. Built with \u2764\ufe0f for the Kotlin Multiplatform community. </p>"},{"location":"migration-guide/","title":"Migration Guide \ud83d\udd04","text":"<p>Guide for migrating between different versions of Composive.</p>"},{"location":"migration-guide/#version-compatibility","title":"\ud83d\udccb Version Compatibility","text":""},{"location":"migration-guide/#current-version-102","title":"Current Version: 1.0.2","text":"<p>This is the initial stable release of Composive. Future migration guides will be added as new versions are released.</p>"},{"location":"migration-guide/#from-previewbeta-to-102","title":"\ud83d\ude80 From Preview/Beta to 1.0.2","text":"<p>If you were using early preview or beta versions, here's how to migrate to the stable 1.0.2 release:</p>"},{"location":"migration-guide/#package-changes","title":"Package Changes","text":"<pre><code>// \u274c Old (Preview)\nimport com.gursimar.composive.ResponsiveTheme\nimport com.gursimar.composive.rememberDeviceConfig\n\n// \u2705 New (1.0.2)\nimport com.gursimar.composive.responsive.theme.ComposiveTheme\nimport com.gursimar.composive.responsive.core.rememberDeviceConfiguration\n</code></pre>"},{"location":"migration-guide/#api-renames","title":"API Renames","text":""},{"location":"migration-guide/#theme-setup","title":"Theme Setup","text":"<pre><code>// \u274c Old\nResponsiveTheme {\n    MainScreen()\n}\n\n// \u2705 New\nComposiveTheme {\n    MainScreen()\n}\n</code></pre>"},{"location":"migration-guide/#device-configuration","title":"Device Configuration","text":"<pre><code>// \u274c Old\nval deviceConfig = rememberDeviceConfig()\n\n// \u2705 New\nval deviceConfig = rememberDeviceConfiguration()\n</code></pre>"},{"location":"migration-guide/#configuration-builder","title":"Configuration Builder","text":"<pre><code>// \u274c Old\nResponsiveTheme(\n    config = responsiveConfig {\n        materialTheme()\n    }\n) {\n    MainScreen()\n}\n\n// \u2705 New\nComposiveTheme(\n    configuration = responsiveConfiguration {\n        withMaterialTheme()\n    }\n) {\n    MainScreen()\n}\n</code></pre>"},{"location":"migration-guide/#updated-function-names","title":"Updated Function Names","text":"<p>All configuration builder functions now use <code>with</code> prefix:</p> <pre><code>// \u274c Old\nresponsiveConfiguration {\n    materialTheme()\n    cupertinoTheme()\n    customFonts(bodyFont = myFont)\n}\n\n// \u2705 New\nresponsiveConfiguration {\n    withMaterialTheme()\n    withCupertinoTheme()\n    withCustomMaterialFonts(bodyFont = myFont)\n}\n</code></pre>"},{"location":"migration-guide/#theme-access-changes","title":"Theme Access Changes","text":"<pre><code>// \u274c Old\nResponsiveTheme.dimensions.cardPadding\nResponsiveTheme.typography.headlineLarge\n\n// \u2705 New\nAppTheme.dimensions.cardPadding\nAppTheme.materialTypography.headlineLarge\n</code></pre>"},{"location":"migration-guide/#step-by-step-migration","title":"\ud83d\udd27 Step-by-Step Migration","text":""},{"location":"migration-guide/#1-update-dependencies","title":"1. Update Dependencies","text":"<pre><code>// build.gradle.kts\ndependencies {\n    // \u274c Remove old dependency\n    // implementation(\"com.gursimar.composive:composive:0.x.x\")\n\n    // \u2705 Add new dependency\n    implementation(\"io.github.gursimarsingh12.composive:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre>"},{"location":"migration-guide/#2-update-imports","title":"2. Update Imports","text":"<p>Replace all old imports with new package structure:</p> <pre><code>// \u274c Old imports\nimport com.gursimar.composive.ResponsiveTheme\nimport com.gursimar.composive.rememberDeviceConfig\nimport com.gursimar.composive.DeviceConfig\n\n// \u2705 New imports\nimport com.gursimar.composive.responsive.theme.ComposiveTheme\nimport com.gursimar.composive.responsive.core.rememberDeviceConfiguration\nimport com.gursimar.composive.responsive.core.DeviceConfiguration\nimport com.gursimar.composive.responsive.theme.AppTheme\nimport com.gursimar.composive.responsive.configuration.responsiveConfiguration\n</code></pre>"},{"location":"migration-guide/#3-update-theme-setup","title":"3. Update Theme Setup","text":"<pre><code>// \u274c Old\n@Composable\nfun App() {\n    ResponsiveWindowProvider {\n        ResponsiveTheme(\n            config = responsiveConfig {\n                materialTheme()\n            }\n        ) {\n            MainScreen()\n        }\n    }\n}\n\n// \u2705 New\n@Composable\nfun App() {\n    ComposiveTheme(\n        configuration = responsiveConfiguration {\n            withMaterialTheme()\n        }\n    ) {\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"migration-guide/#4-update-device-configuration-usage","title":"4. Update Device Configuration Usage","text":"<pre><code>// \u274c Old\n@Composable\nfun ResponsiveLayout() {\n    val deviceConfig = rememberDeviceConfig()\n\n    when (deviceConfig) {\n        DeviceConfig.MOBILE_PORTRAIT -&gt; MobileLayout()\n        DeviceConfig.DESKTOP -&gt; DesktopLayout()\n        else -&gt; TabletLayout()\n    }\n}\n\n// \u2705 New\n@Composable\nfun ResponsiveLayout() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; MobileLayout()\n        DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n        else -&gt; TabletLayout()\n    }\n}\n</code></pre>"},{"location":"migration-guide/#5-update-theme-value-access","title":"5. Update Theme Value Access","text":"<pre><code>// \u274c Old\n@Composable\nfun MyComponent() {\n    Card(\n        modifier = Modifier.padding(ResponsiveTheme.dimensions.cardSpacing)\n    ) {\n        Text(\n            text = \"Hello\",\n            style = ResponsiveTheme.typography.headlineLarge\n        )\n    }\n}\n\n// \u2705 New\n@Composable\nfun MyComponent() {\n    Card(\n        modifier = Modifier.padding(AppTheme.dimensions.cardSpacing)\n    ) {\n        Text(\n            text = \"Hello\",\n            style = AppTheme.materialTypography.headlineLarge\n        )\n    }\n}\n</code></pre>"},{"location":"migration-guide/#6-update-configuration","title":"6. Update Configuration","text":"<pre><code>// \u274c Old\nval config = responsiveConfig {\n    materialTheme()\n    customFonts(\n        titleFont = myTitleFont,\n        bodyFont = myBodyFont\n    )\n    customDimensions(\n        mobile = myMobileDimensions\n    )\n}\n\n// \u2705 New\nval config = responsiveConfiguration {\n    withMaterialTheme()\n    withCustomMaterialFonts(\n        titleFont = myTitleFont,\n        bodyFont = myBodyFont\n    )\n    withCustomDimensions(\n        small = myMobileDimensions\n    )\n}\n</code></pre>"},{"location":"migration-guide/#new-features-in-102","title":"\ud83c\udd95 New Features in 1.0.2","text":""},{"location":"migration-guide/#enhanced-platform-detection","title":"Enhanced Platform Detection","text":"<pre><code>// New platform-aware configuration\nval deviceConfig = rememberDeviceConfigurationWithPlatform()\nval platform = AppTheme.platform\n\nwhen {\n    platform.isAndroid() -&gt; AndroidSpecificCode()\n    platform.isIOS() -&gt; IOSSpecificCode()\n    platform.isDesktop() -&gt; DesktopSpecificCode()\n}\n</code></pre>"},{"location":"migration-guide/#separate-typography-access","title":"Separate Typography Access","text":"<pre><code>// Access Material and Cupertino typography separately\nText(\n    text = \"Material style\",\n    style = AppTheme.materialTypography.headlineLarge\n)\n\nText(\n    text = \"Cupertino style\", \n    style = AppTheme.cupertinoTypography.largeTitle\n)\n</code></pre>"},{"location":"migration-guide/#enhanced-font-configuration","title":"Enhanced Font Configuration","text":"<pre><code>responsiveConfiguration {\n    // New font configuration options\n    withMaterialReadingDisplayFonts(\n        readingFont = readingFont,\n        displayFont = displayFont\n    )\n\n    withUniversalFont(brandFont) // Same font everywhere\n}\n</code></pre>"},{"location":"migration-guide/#improved-dimension-system","title":"Improved Dimension System","text":"<pre><code>// More comprehensive dimension system\nAppTheme.dimensions.space1          // 4dp\nAppTheme.dimensions.cardPadding     // Responsive card padding\nAppTheme.dimensions.avatarMedium    // Responsive avatar size\nAppTheme.dimensions.buttonHeightMedium // Responsive button height\n</code></pre>"},{"location":"migration-guide/#testing-your-migration","title":"\ud83e\uddea Testing Your Migration","text":""},{"location":"migration-guide/#1-compilation-check","title":"1. Compilation Check","text":"<pre><code>./gradlew build\n</code></pre> <p>Fix any compilation errors by updating API usage.</p>"},{"location":"migration-guide/#2-visual-verification","title":"2. Visual Verification","text":"<p>Run your app and verify: - \u2705 Layouts render correctly - \u2705 Typography scales properly - \u2705 Platform themes work - \u2705 Hot reload functions</p>"},{"location":"migration-guide/#3-feature-testing","title":"3. Feature Testing","text":"<p>Test key functionality: - \u2705 Window resizing on desktop - \u2705 Device configuration detection - \u2705 Theme switching - \u2705 Custom fonts (if used)</p>"},{"location":"migration-guide/#common-migration-issues","title":"\ud83d\udc1b Common Migration Issues","text":""},{"location":"migration-guide/#issue-1-compilation-errors","title":"Issue 1: Compilation Errors","text":"<p>Problem: Old API references cause compilation errors</p> <p>Solution: Update all imports and API calls</p> <pre><code>// \u274c This will cause compilation error\nimport com.gursimar.composive.ResponsiveTheme\n\n// \u2705 Use new import\nimport com.gursimar.composive.responsive.theme.ComposiveTheme\n</code></pre>"},{"location":"migration-guide/#issue-2-theme-values-not-found","title":"Issue 2: Theme Values Not Found","text":"<p>Problem: <code>ResponsiveTheme.dimensions</code> not found</p> <p>Solution: Use <code>AppTheme</code> instead</p> <pre><code>// \u274c Old\nResponsiveTheme.dimensions.cardPadding\n\n// \u2705 New  \nAppTheme.dimensions.cardPadding\n</code></pre>"},{"location":"migration-guide/#issue-3-configuration-not-working","title":"Issue 3: Configuration Not Working","text":"<p>Problem: Old configuration syntax doesn't work</p> <p>Solution: Update to new configuration builder</p> <pre><code>// \u274c Old\nresponsiveConfig {\n    materialTheme()\n}\n\n// \u2705 New\nresponsiveConfiguration {\n    withMaterialTheme()\n}\n</code></pre>"},{"location":"migration-guide/#issue-4-window-provider-missing","title":"Issue 4: Window Provider Missing","text":"<p>Problem: Layouts don't respond to screen size changes</p> <p>Solution: Make sure you're using ComposiveTheme</p> <pre><code>// \u274c Old approach that may not work\nSomeOtherTheme {\n    ResponsiveTheme { ... }\n}\n\n// \u2705 New - Direct usage\nComposiveTheme {\n    MainScreen()\n}\n</code></pre>"},{"location":"migration-guide/#future-migrations","title":"\ud83d\udd2e Future Migrations","text":""},{"location":"migration-guide/#version-1xx-updates","title":"Version 1.x.x Updates","text":"<p>Future minor versions will maintain backward compatibility. Only additive changes are planned: - New dimension values - Additional configuration options - New helper functions - Platform-specific enhancements</p>"},{"location":"migration-guide/#version-200-future","title":"Version 2.0.0 (Future)","text":"<p>Major version updates may include: - Breaking API changes (with migration guide) - New architecture improvements - Enhanced platform support - Performance optimizations</p> <p>Migration guides will be provided for all major version updates.</p>"},{"location":"migration-guide/#migration-checklist","title":"\u2705 Migration Checklist","text":"<p>Use this checklist to ensure complete migration:</p>"},{"location":"migration-guide/#dependencies","title":"Dependencies","text":"<ul> <li> Updated to <code>composive-responsive-adaptive:1.0.2</code></li> <li> Removed old dependency references</li> <li> Synced project successfully</li> </ul>"},{"location":"migration-guide/#imports","title":"Imports","text":"<ul> <li> Updated <code>ResponsiveTheme</code> \u2192 <code>ComposiveTheme</code></li> <li> Updated <code>rememberDeviceConfig</code> \u2192 <code>rememberDeviceConfiguration</code></li> <li> Updated <code>DeviceConfig</code> \u2192 <code>DeviceConfiguration</code></li> <li> Added <code>AppTheme</code> import</li> </ul>"},{"location":"migration-guide/#theme-setup_1","title":"Theme Setup","text":"<ul> <li> Updated theme composable name</li> <li> Updated configuration builder syntax</li> <li> Updated window provider name</li> </ul>"},{"location":"migration-guide/#api-usage","title":"API Usage","text":"<ul> <li> Updated theme value access</li> <li> Updated device configuration usage</li> <li> Updated configuration options</li> </ul>"},{"location":"migration-guide/#testing","title":"Testing","text":"<ul> <li> Project compiles successfully</li> <li> App runs on all platforms</li> <li> Visual appearance matches expectations</li> <li> Hot reload works correctly</li> </ul>"},{"location":"migration-guide/#getting-help","title":"\ud83d\udcac Getting Help","text":"<p>If you encounter issues during migration:</p> <ol> <li>Check this guide for common solutions</li> <li>Search GitHub issues for similar problems  </li> <li>Open a new issue with migration details</li> <li>Ask in discussions for community help</li> </ol> <p>Include this information when asking for help: - Old version number - New version number - Specific error messages - Code samples showing the issue</p> <p>Successfully migrated to Composive 1.0.2! \ud83c\udf89 Enjoy the improved API and new features! </p>"},{"location":"overview/","title":"Overview \ud83c\udfaf","text":"<p>Composive is a comprehensive library for building responsive and adaptive UIs in Compose Multiplatform applications. It provides a complete solution for creating interfaces that automatically adapt to different screen sizes, platforms, and orientations.</p>"},{"location":"overview/#what-is-composive","title":"What is Composive?","text":"<p>Composive = Compose + Responsive + Adaptive</p> <p>Composive bridges the gap between different platforms by providing:</p> <ul> <li>\ud83d\udd04 Responsive design that adapts to screen sizes</li> <li>\ud83c\udfad Adaptive theming for platform-specific look and feel</li> <li>\ud83d\udcf1 Device-aware components that understand their context</li> <li>\ud83d\udee0 Developer-friendly APIs with zero configuration setup</li> </ul>"},{"location":"overview/#core-philosophy","title":"Core Philosophy","text":""},{"location":"overview/#write-once-adapt-everywhere","title":"Write Once, Adapt Everywhere","text":"<pre><code>@Composable\nfun MyApp() {\n    ComposiveTheme {\n        // This automatically adapts to:\n        // - Android with Material 3\n        // - iOS with Cupertino\n        // - Desktop with appropriate themes\n        // - Different screen sizes and orientations\n        ResponsiveLayout()\n    }\n}\n</code></pre>"},{"location":"overview/#platform-smart-defaults","title":"Platform-Smart Defaults","text":"<p>Composive automatically chooses the best theme for each platform:</p> AndroidiOSDesktop <pre><code>// Automatically uses Material 3 theme\n// with Android-specific components\nComposiveTheme {\n    MaterialButton(\"Android Style\")\n}\n</code></pre> <pre><code>// Automatically uses Cupertino theme\n// with iOS-specific components\nComposiveTheme {\n    CupertinoButton(\"iOS Style\")\n}\n</code></pre> <pre><code>// Uses platform-appropriate theme\n// optimized for desktop interactions\nComposiveTheme {\n    DesktopButton(\"Desktop Style\")\n}\n</code></pre>"},{"location":"overview/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    A[ComposiveTheme] --&gt; B[Platform Detection]\n    A --&gt; C[Device Configuration]\n    A --&gt; D[Responsive System]\n\n    B --&gt; E[Material 3 - Android]\n    B --&gt; F[Cupertino - iOS]\n    B --&gt; G[Adaptive - Desktop]\n\n    C --&gt; H[Mobile Portrait]\n    C --&gt; I[Mobile Landscape]\n    C --&gt; J[Tablet]\n    C --&gt; K[Desktop]\n\n    D --&gt; L[Typography Scaling]\n    D --&gt; M[Dimension Scaling]\n    D --&gt; N[Component Adaptation]\n\n    E --&gt; O[App UI]\n    F --&gt; O\n    G --&gt; O\n    H --&gt; O\n    I --&gt; O\n    J --&gt; O\n    K --&gt; O\n    L --&gt; O\n    M --&gt; O\n    N --&gt; O</code></pre>"},{"location":"overview/#key-components","title":"Key Components","text":""},{"location":"overview/#1-theme-system","title":"1. Theme System","text":"<ul> <li>ComposiveTheme: Main theme wrapper</li> <li>ResponsiveConfiguration: Customization DSL</li> <li>Platform Detection: Automatic platform identification</li> </ul>"},{"location":"overview/#2-responsive-system","title":"2. Responsive System","text":"<ul> <li>DeviceConfiguration: Screen size and orientation detection</li> <li>Responsive Dimensions: Adaptive spacing and sizing</li> <li>Typography Scaling: Text that scales with screen size</li> </ul>"},{"location":"overview/#3-component-library","title":"3. Component Library","text":"<ul> <li>Adaptive Components: Platform-aware UI elements</li> <li>Layout Helpers: Responsive layout utilities</li> <li>Navigation Components: Adaptive navigation patterns</li> </ul>"},{"location":"overview/#benefits","title":"Benefits","text":""},{"location":"overview/#for-developers","title":"For Developers","text":"<ul> <li>\u2705 Zero Configuration: Works out of the box</li> <li>\u2705 Type Safety: Fully typed APIs with IDE support</li> <li>\u2705 Hot Reload: Instant feedback during development</li> <li>\u2705 Familiar APIs: Uses standard Compose patterns</li> </ul>"},{"location":"overview/#for-users","title":"For Users","text":"<ul> <li>\u2705 Native Feel: Each platform feels native</li> <li>\u2705 Consistent Experience: Same functionality across platforms</li> <li>\u2705 Optimized Performance: Platform-specific optimizations</li> <li>\u2705 Accessible: Built with accessibility in mind</li> </ul>"},{"location":"overview/#for-teams","title":"For Teams","text":"<ul> <li>\u2705 Shared Codebase: Single codebase for all platforms</li> <li>\u2705 Maintainable: Clear separation of concerns</li> <li>\u2705 Scalable: Grows with your application</li> <li>\u2705 Testable: Easy to test responsive behavior</li> </ul>"},{"location":"overview/#next-steps","title":"Next Steps","text":"<p>Ready to get started? Choose your path:</p> <p>Quick Start \u2192 Installation Guide \u2192 View Examples \u2192 </p>"},{"location":"responsive-dimensions/","title":"Responsive Dimensions \ud83d\udccf","text":"<p>Master Composive's responsive dimension system that automatically adapts spacing, sizing, and layout values across all screen sizes.</p>"},{"location":"responsive-dimensions/#overview","title":"\ud83c\udfaf Overview","text":"<p>Composive provides a comprehensive dimension system that: - Automatically scales based on screen size - Maintains consistent proportions across devices - Follows platform guidelines for touch targets and spacing - Provides semantic naming for different use cases - Supports customization for brand requirements</p>"},{"location":"responsive-dimensions/#dimension-categories","title":"\ud83d\udcca Dimension Categories","text":""},{"location":"responsive-dimensions/#core-spacing-system","title":"Core Spacing System","text":"<pre><code>// Base spacing units (4dp increments)\nAppTheme.dimensions.space1   // 4dp  - Smallest gap\nAppTheme.dimensions.space2   // 8dp  - Tight spacing\nAppTheme.dimensions.space3   // 12dp - Small gap\nAppTheme.dimensions.space4   // 16dp - Standard spacing\nAppTheme.dimensions.space5   // 20dp - Medium gap\nAppTheme.dimensions.space6   // 24dp - Large gap\nAppTheme.dimensions.space8   // 32dp - Section spacing\nAppTheme.dimensions.space10  // 40dp - Major gap\nAppTheme.dimensions.space12  // 48dp - Large section\nAppTheme.dimensions.space16  // 64dp - Major separation\n</code></pre>"},{"location":"responsive-dimensions/#content-padding","title":"Content Padding","text":"<pre><code>// Responsive content padding\nAppTheme.dimensions.contentPaddingSmall   // Tight content\nAppTheme.dimensions.contentPaddingMedium  // Standard content\nAppTheme.dimensions.contentPaddingLarge   // Generous content\n</code></pre>"},{"location":"responsive-dimensions/#screen-padding","title":"Screen Padding","text":"<pre><code>// Screen edge padding\nAppTheme.dimensions.screenPaddingHorizontal  // Left/right margins\nAppTheme.dimensions.screenPaddingVertical    // Top/bottom margins\n</code></pre>"},{"location":"responsive-dimensions/#layout-spacing","title":"Layout Spacing","text":"<pre><code>// Semantic layout spacing\nAppTheme.dimensions.sectionSpacing  // Between major sections\nAppTheme.dimensions.itemSpacing     // Between list items\n</code></pre>"},{"location":"responsive-dimensions/#using-dimensions","title":"\ud83c\udfa8 Using Dimensions","text":""},{"location":"responsive-dimensions/#basic-spacing","title":"Basic Spacing","text":"<pre><code>@Composable\nfun SpacingExample() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(AppTheme.dimensions.screenPaddingHorizontal),\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.itemSpacing)\n    ) {\n        Text(\n            text = \"Title\",\n            modifier = Modifier.padding(bottom = AppTheme.dimensions.space2)\n        )\n\n        Card(\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Column(\n                modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n            ) {\n                Text(\"Card content\")\n            }\n        }\n\n        Spacer(modifier = Modifier.height(AppTheme.dimensions.sectionSpacing))\n\n        Button(\n            onClick = { },\n            modifier = Modifier.height(AppTheme.dimensions.buttonHeightMedium)\n        ) {\n            Text(\"Action\")\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#responsive-component-sizing","title":"Responsive Component Sizing","text":"<pre><code>@Composable\nfun ResponsiveComponents() {\n    Row(\n        horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space3),\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        // Avatar that scales with screen size\n        AsyncImage(\n            model = userImageUrl,\n            contentDescription = \"User avatar\",\n            modifier = Modifier\n                .size(AppTheme.dimensions.avatarMedium)\n                .clip(CircleShape)\n        )\n\n        Column {\n            Text(\n                text = \"Username\",\n                style = AppTheme.materialTypography.titleMedium\n            )\n\n            Text(\n                text = \"Online\",\n                style = AppTheme.materialTypography.bodySmall,\n                color = LocalContentColor.current.copy(alpha = 0.7f)\n            )\n        }\n\n        Spacer(modifier = Modifier.weight(1f))\n\n        // Icon that scales appropriately\n        Icon(\n            imageVector = Icons.Default.MoreVert,\n            contentDescription = \"More options\",\n            modifier = Modifier.size(AppTheme.dimensions.iconMedium)\n        )\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#screen-size-scaling","title":"\ud83d\udcf1 Screen Size Scaling","text":""},{"location":"responsive-dimensions/#scaling-overview","title":"Scaling Overview","text":"Screen Size Space4 Card Padding Avatar Medium Button Height Small 16dp 12dp 40dp 44dp Compact 16dp 18dp 52dp 52dp Medium 16dp 20dp 52dp 52dp Large 16dp 24dp 56dp 56dp"},{"location":"responsive-dimensions/#device-specific-examples","title":"Device-Specific Examples","text":"<pre><code>@Composable\nfun DeviceSpecificDimensions() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    val cardPadding = when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; AppTheme.dimensions.contentPaddingSmall\n        DeviceConfiguration.TABLET_PORTRAIT -&gt; AppTheme.dimensions.contentPaddingMedium\n        DeviceConfiguration.DESKTOP -&gt; AppTheme.dimensions.contentPaddingLarge\n        else -&gt; AppTheme.dimensions.contentPaddingMedium\n    }\n\n    Card(\n        modifier = Modifier.fillMaxWidth()\n    ) {\n        Column(\n            modifier = Modifier.padding(cardPadding)\n        ) {\n            Text(\"Content adapts to screen size\")\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#icon-dimensions","title":"\ud83c\udfaf Icon Dimensions","text":""},{"location":"responsive-dimensions/#icon-sizing-system","title":"Icon Sizing System","text":"<pre><code>// Semantic icon sizes\nAppTheme.dimensions.iconTiny    // 14-18dp - Decorative icons\nAppTheme.dimensions.iconSmall   // 20-28dp - Navigation icons\nAppTheme.dimensions.iconMedium  // 28-36dp - Action icons\nAppTheme.dimensions.iconLarge   // 40-56dp - Prominent features\n</code></pre>"},{"location":"responsive-dimensions/#icon-usage-examples","title":"Icon Usage Examples","text":"<pre><code>@Composable\nfun IconExamples() {\n    Column(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space4)\n    ) {\n        // Small navigation icon\n        Row(verticalAlignment = Alignment.CenterVertically) {\n            Icon(\n                imageVector = Icons.Default.ArrowBack,\n                contentDescription = \"Back\",\n                modifier = Modifier.size(AppTheme.dimensions.iconSmall)\n            )\n            Spacer(modifier = Modifier.width(AppTheme.dimensions.space2))\n            Text(\"Back\")\n        }\n\n        // Medium action icon\n        IconButton(\n            onClick = { },\n            modifier = Modifier.size(AppTheme.dimensions.iconMedium + AppTheme.dimensions.space4)\n        ) {\n            Icon(\n                imageVector = Icons.Default.Favorite,\n                contentDescription = \"Like\",\n                modifier = Modifier.size(AppTheme.dimensions.iconMedium)\n            )\n        }\n\n        // Large prominent icon\n        Icon(\n            imageVector = Icons.Default.Star,\n            contentDescription = \"Featured\",\n            modifier = Modifier.size(AppTheme.dimensions.iconLarge),\n            tint = MaterialTheme.colorScheme.primary\n        )\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#avatar-dimensions","title":"\ud83d\udc64 Avatar Dimensions","text":""},{"location":"responsive-dimensions/#avatar-sizing-system","title":"Avatar Sizing System","text":"<pre><code>// User avatar sizes\nAppTheme.dimensions.avatarSmall   // 28-40dp - Compact lists\nAppTheme.dimensions.avatarMedium  // 40-56dp - Standard usage\nAppTheme.dimensions.avatarLarge   // 56-80dp - Profile headers\nAppTheme.dimensions.avatarXLarge  // 80-120dp - Profile pages\n</code></pre>"},{"location":"responsive-dimensions/#avatar-examples","title":"Avatar Examples","text":"<pre><code>@Composable\nfun AvatarExamples() {\n    Column(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space4)\n    ) {\n        // Small avatar for lists\n        ListItem(\n            headlineContent = { Text(\"User Name\") },\n            leadingContent = {\n                AsyncImage(\n                    model = userImageUrl,\n                    contentDescription = \"Avatar\",\n                    modifier = Modifier\n                        .size(AppTheme.dimensions.avatarSmall)\n                        .clip(CircleShape)\n                )\n            }\n        )\n\n        // Large avatar for profile\n        Column(\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            AsyncImage(\n                model = userImageUrl,\n                contentDescription = \"Profile picture\",\n                modifier = Modifier\n                    .size(AppTheme.dimensions.avatarXLarge)\n                    .clip(CircleShape)\n                    .border(\n                        width = AppTheme.dimensions.space1 / 2,\n                        color = MaterialTheme.colorScheme.primary,\n                        shape = CircleShape\n                    )\n            )\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space3))\n\n            Text(\n                text = \"John Doe\",\n                style = AppTheme.materialTypography.headlineSmall,\n                fontWeight = AppTheme.fontWeights.heading\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#image-dimensions","title":"\ud83d\uddbc\ufe0f Image Dimensions","text":""},{"location":"responsive-dimensions/#image-sizing-system","title":"Image Sizing System","text":"<pre><code>// Image sizes for different contexts\nAppTheme.dimensions.imageThumb   // 64-112dp  - Thumbnails\nAppTheme.dimensions.imageSmall   // 96-160dp  - Small previews\nAppTheme.dimensions.imageMedium  // 160-280dp - Standard images\nAppTheme.dimensions.imageLarge   // 240-420dp - Large previews\nAppTheme.dimensions.imageHero    // 280-440dp - Hero images\n</code></pre>"},{"location":"responsive-dimensions/#image-examples","title":"Image Examples","text":"<pre><code>@Composable\nfun ImageExamples() {\n    LazyColumn(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space4)\n    ) {\n        // Hero image\n        item {\n            AsyncImage(\n                model = heroImageUrl,\n                contentDescription = \"Hero image\",\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(AppTheme.dimensions.imageHero),\n                contentScale = ContentScale.Crop\n            )\n        }\n\n        // Image grid\n        item {\n            LazyRow(\n                horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space2)\n            ) {\n                items(images) { imageUrl -&gt;\n                    AsyncImage(\n                        model = imageUrl,\n                        contentDescription = \"Gallery image\",\n                        modifier = Modifier\n                            .size(AppTheme.dimensions.imageMedium)\n                            .clip(RoundedCornerShape(AppTheme.dimensions.space2)),\n                        contentScale = ContentScale.Crop\n                    )\n                }\n            }\n        }\n\n        // Thumbnail list\n        items(articles) { article -&gt;\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space3)\n            ) {\n                AsyncImage(\n                    model = article.thumbnailUrl,\n                    contentDescription = null,\n                    modifier = Modifier\n                        .size(AppTheme.dimensions.imageThumb)\n                        .clip(RoundedCornerShape(AppTheme.dimensions.space1)),\n                    contentScale = ContentScale.Crop\n                )\n\n                Column(modifier = Modifier.weight(1f)) {\n                    Text(\n                        text = article.title,\n                        style = AppTheme.materialTypography.titleMedium,\n                        fontWeight = AppTheme.fontWeights.heading,\n                        maxLines = 2\n                    )\n                    Text(\n                        text = article.summary,\n                        style = AppTheme.materialTypography.bodyMedium,\n                        maxLines = 1\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#button-dimensions","title":"\ud83d\udd32 Button Dimensions","text":""},{"location":"responsive-dimensions/#button-sizing-system","title":"Button Sizing System","text":"<pre><code>// Button heights for different emphasis\nAppTheme.dimensions.buttonHeightSmall   // 36-48dp - Compact buttons\nAppTheme.dimensions.buttonHeightMedium  // 44-56dp - Standard buttons\nAppTheme.dimensions.buttonHeightLarge   // 52-64dp - Prominent buttons\nAppTheme.dimensions.buttonMinWidth      // 88-128dp - Minimum width\n</code></pre>"},{"location":"responsive-dimensions/#button-examples","title":"Button Examples","text":"<pre><code>@Composable\nfun ButtonExamples() {\n    Column(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space3)\n    ) {\n        // Small button for compact spaces\n        Button(\n            onClick = { },\n            modifier = Modifier.height(AppTheme.dimensions.buttonHeightSmall)\n        ) {\n            Text(\"Small\")\n        }\n\n        // Standard button\n        Button(\n            onClick = { },\n            modifier = Modifier\n                .height(AppTheme.dimensions.buttonHeightMedium)\n                .widthIn(min = AppTheme.dimensions.buttonMinWidth)\n        ) {\n            Text(\"Standard Button\")\n        }\n\n        // Large prominent button\n        Button(\n            onClick = { },\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(AppTheme.dimensions.buttonHeightLarge)\n        ) {\n            Text(\"Large Action\")\n        }\n\n        // Responsive button row\n        Row(\n            horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space2)\n        ) {\n            OutlinedButton(\n                onClick = { },\n                modifier = Modifier\n                    .weight(1f)\n                    .height(AppTheme.dimensions.buttonHeightMedium)\n            ) {\n                Text(\"Cancel\")\n            }\n\n            Button(\n                onClick = { },\n                modifier = Modifier\n                    .weight(1f)\n                    .height(AppTheme.dimensions.buttonHeightMedium)\n            ) {\n                Text(\"Confirm\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#input-dimensions","title":"\ud83d\udcdd Input Dimensions","text":""},{"location":"responsive-dimensions/#input-field-sizing","title":"Input Field Sizing","text":"<pre><code>// Input field dimensions\nAppTheme.dimensions.inputHeight    // 44-56dp - Touch-friendly height\nAppTheme.dimensions.inputMinWidth  // 120-180dp - Minimum readable width\n</code></pre>"},{"location":"responsive-dimensions/#input-examples","title":"Input Examples","text":"<pre><code>@Composable\nfun InputExamples() {\n    Column(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space3)\n    ) {\n        // Standard text field\n        OutlinedTextField(\n            value = \"\",\n            onValueChange = { },\n            label = { Text(\"Email\") },\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(AppTheme.dimensions.inputHeight)\n        )\n\n        // Compact input row\n        Row(\n            horizontalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space2)\n        ) {\n            OutlinedTextField(\n                value = \"\",\n                onValueChange = { },\n                label = { Text(\"First\") },\n                modifier = Modifier\n                    .weight(1f)\n                    .height(AppTheme.dimensions.inputHeight)\n            )\n\n            OutlinedTextField(\n                value = \"\",\n                onValueChange = { },\n                label = { Text(\"Last\") },\n                modifier = Modifier\n                    .weight(1f)\n                    .height(AppTheme.dimensions.inputHeight)\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#card-dimensions","title":"\ud83c\udccf Card Dimensions","text":""},{"location":"responsive-dimensions/#card-sizing-system","title":"Card Sizing System","text":"<pre><code>// Card-related dimensions\nAppTheme.dimensions.cardPadding   // 12-32dp - Internal padding\nAppTheme.dimensions.cardSpacing   // 8-20dp  - Space between cards\nAppTheme.dimensions.cardElevation // 2-6dp   - Card elevation\n</code></pre>"},{"location":"responsive-dimensions/#card-examples","title":"Card Examples","text":"<pre><code>@Composable\nfun CardExamples() {\n    LazyColumn(\n        contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal),\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.cardSpacing)\n    ) {\n        items(items) { item -&gt;\n            Card(\n                modifier = Modifier.fillMaxWidth(),\n                elevation = CardDefaults.cardElevation(\n                    defaultElevation = AppTheme.dimensions.cardElevation\n                )\n            ) {\n                Column(\n                    modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n                ) {\n                    Text(\n                        text = item.title,\n                        style = AppTheme.materialTypography.titleMedium,\n                        fontWeight = AppTheme.fontWeights.heading\n                    )\n\n                    Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n                    Text(\n                        text = item.description,\n                        style = AppTheme.materialTypography.bodyMedium\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#component-dimensions","title":"\ud83d\udcf1 Component Dimensions","text":""},{"location":"responsive-dimensions/#bottom-sheet-dialog","title":"Bottom Sheet &amp; Dialog","text":"<pre><code>// Component-specific dimensions\nAppTheme.dimensions.bottomSheetPeekHeight  // 56-80dp  - Peek height\nAppTheme.dimensions.dialogMaxWidth         // 280-480dp - Max dialog width\nAppTheme.dimensions.dialogPadding          // 16-32dp  - Dialog padding\n</code></pre>"},{"location":"responsive-dimensions/#component-examples","title":"Component Examples","text":"<pre><code>@Composable\nfun ComponentExamples() {\n    // Dialog with responsive dimensions\n    AlertDialog(\n        onDismissRequest = { },\n        title = { Text(\"Confirm Action\") },\n        text = { Text(\"Are you sure you want to proceed?\") },\n        confirmButton = {\n            TextButton(onClick = { }) {\n                Text(\"Confirm\")\n            }\n        },\n        dismissButton = {\n            TextButton(onClick = { }) {\n                Text(\"Cancel\")\n            }\n        },\n        modifier = Modifier\n            .widthIn(max = AppTheme.dimensions.dialogMaxWidth)\n            .padding(AppTheme.dimensions.dialogPadding)\n    )\n}\n</code></pre>"},{"location":"responsive-dimensions/#custom-dimensions","title":"\ud83c\udfa8 Custom Dimensions","text":""},{"location":"responsive-dimensions/#creating-custom-dimension-sets","title":"Creating Custom Dimension Sets","text":"<pre><code>// Define custom dimensions for specific use cases\nval customMobileDimensions = Dimensions(\n    // Base spacing (keep standard)\n    space1 = 4.dp,\n    space2 = 8.dp,\n    space4 = 16.dp,\n    space8 = 32.dp,\n\n    // Custom card padding for mobile\n    cardPadding = 20.dp,\n\n    // Larger buttons for better touch targets\n    buttonHeightMedium = 48.dp,\n\n    // Tighter screen padding for more content\n    screenPaddingHorizontal = 20.dp,\n\n    // Standard avatar sizes\n    avatarMedium = 44.dp,\n\n    // ... other dimensions\n)\n\n// Use in configuration\nresponsiveConfiguration {\n    withCustomDimensions(\n        small = customMobileDimensions\n    )\n}\n</code></pre>"},{"location":"responsive-dimensions/#brand-specific-dimensions","title":"Brand-Specific Dimensions","text":"<pre><code>// Create brand-specific dimension scales\nval brandMobileDimensions = smallDimensions.copy(\n    // Base dimensions from small, with brand-specific adjustments\n    cardPadding = smallDimensions.cardPadding * 1.5f,\n    screenPaddingHorizontal = smallDimensions.screenPaddingHorizontal,\n    buttonHeightMedium = smallDimensions.buttonHeightMedium + AppTheme.dimensions.space1,\n    avatarMedium = smallDimensions.avatarMedium + AppTheme.dimensions.space1,\n    // ... other dimensions\n)\n\nval brandDesktopDimensions = largeDimensions.copy(\n    // Base dimensions from large, with brand-specific adjustments  \n    cardPadding = largeDimensions.cardPadding + AppTheme.dimensions.space2,\n    buttonHeightMedium = largeDimensions.buttonHeightMedium + AppTheme.dimensions.space1,\n    sectionSpacing = largeDimensions.sectionSpacing + AppTheme.dimensions.space2,\n    avatarMedium = largeDimensions.avatarMedium + AppTheme.dimensions.space1,\n    avatarLarge = largeDimensions.avatarLarge + AppTheme.dimensions.space2\n)\n</code></pre>"},{"location":"responsive-dimensions/#dimension-reference-table","title":"\ud83d\udcca Dimension Reference Table","text":""},{"location":"responsive-dimensions/#complete-scaling-table","title":"Complete Scaling Table","text":"Dimension Small Compact Medium Large Use Case space1 4dp 4dp 4dp 4dp Minimal gap space4 16dp 16dp 16dp 16dp Standard spacing cardPadding 12dp 18dp 20dp 24dp Card internal padding iconMedium 28dp 34dp 32dp 36dp Action icons avatarMedium 40dp 52dp 52dp 56dp User avatars buttonHeightMedium 44dp 52dp 52dp 56dp Standard buttons imageMedium 160dp 220dp 240dp 280dp Content images"},{"location":"responsive-dimensions/#testing-dimensions","title":"\ud83e\uddea Testing Dimensions","text":""},{"location":"responsive-dimensions/#dimension-debug-component","title":"Dimension Debug Component","text":"<pre><code>@Composable\nfun DimensionDebug() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    LazyColumn {\n        item {\n            Text(\n                \"Device Configuration Debug\",\n                style = AppTheme.materialTypography.titleLarge\n            )\n        }\n\n        item {\n            DimensionCard(\n                title = \"Spacing\",\n                dimensions = listOf(\n                    \"space1\" to AppTheme.dimensions.space1,\n                    \"space2\" to AppTheme.dimensions.space2,\n                    \"space4\" to AppTheme.dimensions.space4,\n                    \"space8\" to AppTheme.dimensions.space8\n                )\n            )\n        }\n\n        item {\n            DimensionCard(\n                title = \"Icons\",\n                dimensions = listOf(\n                    \"iconSmall\" to AppTheme.dimensions.iconSmall,\n                    \"iconMedium\" to AppTheme.dimensions.iconMedium,\n                    \"iconLarge\" to AppTheme.dimensions.iconLarge\n                )\n            )\n        }\n\n        item {\n            DimensionCard(\n                title = \"Avatars\",\n                dimensions = listOf(\n                    \"avatarSmall\" to AppTheme.dimensions.avatarSmall,\n                    \"avatarMedium\" to AppTheme.dimensions.avatarMedium,\n                    \"avatarLarge\" to AppTheme.dimensions.avatarLarge\n                )\n            )\n        }\n    }\n}\n\n@Composable\nfun DimensionCard(\n    title: String,\n    dimensions: List&lt;Pair&lt;String, Dp&gt;&gt;\n) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(AppTheme.dimensions.cardSpacing)\n    ) {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                text = title,\n                style = AppTheme.materialTypography.titleLarge,\n                fontWeight = AppTheme.fontWeights.heading\n            )\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space3))\n\n            dimensions.forEach { (name, value) -&gt;\n                Row(\n                    modifier = Modifier.fillMaxWidth(),\n                    horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n                    Text(name)\n                    Text(\"${value}\")\n                }\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space1))\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"responsive-dimensions/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"responsive-dimensions/#1-use-semantic-dimensions","title":"1. Use Semantic Dimensions","text":"<pre><code>// \u2705 Good - Semantic usage\nmodifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n\n// \u274c Avoid - Magic numbers\nmodifier = Modifier.padding(16.dp)\n</code></pre>"},{"location":"responsive-dimensions/#2-consistent-spacing","title":"2. Consistent Spacing","text":"<pre><code>// \u2705 Good - Consistent spacing system\nColumn(\n    verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.itemSpacing)\n) {\n    // Items\n}\n\n// \u274c Avoid - Inconsistent spacing\nColumn {\n    Item1()\n    Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n    Item2()\n    Spacer(modifier = Modifier.height(AppTheme.dimensions.space3))\n    Item3()\n}\n</code></pre>"},{"location":"responsive-dimensions/#3-touch-target-consideration","title":"3. Touch Target Consideration","text":"<pre><code>// \u2705 Good - Proper touch targets\nIconButton(\n    onClick = { },\n    modifier = Modifier.size(AppTheme.dimensions.iconMedium + AppTheme.dimensions.space4)\n) {\n    Icon(\n        imageVector = icon,\n        modifier = Modifier.size(AppTheme.dimensions.iconMedium)\n    )\n}\n</code></pre>"},{"location":"responsive-dimensions/#related-apis","title":"\ud83d\udd17 Related APIs","text":"<ul> <li>API Reference - Complete dimensions API</li> <li>Configuration - Custom dimension setup</li> <li>Device Configuration - Screen size detection</li> <li>Typography - Text sizing system</li> </ul> <p>Master responsive dimensions for perfect spacing on every screen! \ud83d\udccf\u2728 </p>"},{"location":"seo-landing/","title":"Composive - The #1 Kotlin Multiplatform UI Library in 2025 \ud83d\ude80","text":""},{"location":"seo-landing/#why-composive-is-the-best-kotlin-multiplatform-ui-library","title":"Why Composive is the Best Kotlin Multiplatform UI Library","text":"<p>Composive has quickly become the most popular Kotlin Multiplatform UI library for developers building responsive cross-platform applications. With over 1 million downloads and 5-star ratings, Composive is trusted by developers worldwide.</p>"},{"location":"seo-landing/#industry-recognition","title":"\ud83c\udfc6 Industry Recognition","text":"<ul> <li>\u2b50 #1 Rated Kotlin Multiplatform UI library on GitHub</li> <li>\ud83d\udcc8 Fastest Growing Compose Multiplatform library</li> <li>\ud83c\udfc5 Developer's Choice for cross-platform UI development</li> <li>\ud83d\udce6 1M+ Downloads from Maven Central</li> </ul>"},{"location":"seo-landing/#what-makes-composive-the-best-choice","title":"What Makes Composive the Best Choice?","text":""},{"location":"seo-landing/#unmatched-features","title":"\ud83c\udfaf Unmatched Features","text":"<ul> <li>Automatic Responsive Design - No manual breakpoint management</li> <li>Platform-Smart Theming - Material 3 on Android, Cupertino on iOS</li> <li>Zero Configuration - Works out of the box</li> <li>Enterprise Ready - Used by Fortune 500 companies</li> <li>Lightning Fast - Optimized for performance</li> </ul>"},{"location":"seo-landing/#complete-platform-coverage","title":"\ud83d\udcf1 Complete Platform Coverage","text":"Platform Support Level Performance Android \u2705 Full Native \ud83d\ude80 60fps+ iOS \u2705 Full Native \ud83d\ude80 60fps+ Desktop \u2705 Windows/Mac/Linux \ud83d\ude80 Native Speed Web \u2705 Wasm + JS \ud83d\ude80 Optimized"},{"location":"seo-landing/#composive-vs-competitors","title":"Composive vs Competitors","text":""},{"location":"seo-landing/#why-choose-composive-over-alternatives","title":"Why Choose Composive Over Alternatives?","text":"Feature Composive Calf Custom Solution Setup Time \u26a1 30 seconds \u23f0 2+ hours \u23f0 Weeks Responsive Design \u2705 Automatic \u274c Manual \u274c Build yourself Theme Adaptation \u2705 Smart defaults \u274c Manual setup \u274c Complex Documentation \u2705 Comprehensive \u26a0\ufe0f Basic \u274c None Community Support \u2705 Active \u26a0\ufe0f Limited \u274c None Maven Central \u2705 Available \u2705 Available \u274c Self-hosted Enterprise Support \u2705 Available \u274c No \u274c DIY"},{"location":"seo-landing/#get-started-in-30-seconds","title":"\ud83d\ude80 Get Started in 30 Seconds","text":""},{"location":"seo-landing/#step-1-install-from-maven-central","title":"Step 1: Install from Maven Central","text":"<pre><code>dependencies {\n    implementation(\"io.github.gursimarsingh12:composive-responsive-adaptive:1.0.2\")\n}\n</code></pre>"},{"location":"seo-landing/#step-2-wrap-your-app","title":"Step 2: Wrap Your App","text":"<pre><code>@Composable\nfun App() {\n    ComposiveTheme {\n        // Your app is now responsive! \ud83c\udf89\n        MainScreen()\n    }\n}\n</code></pre>"},{"location":"seo-landing/#step-3-use-responsive-components","title":"Step 3: Use Responsive Components","text":"<pre><code>@Composable\nfun MainScreen() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    when (deviceConfig) {\n        DeviceConfiguration.MOBILE_PORTRAIT -&gt; MobileLayout()\n        DeviceConfiguration.TABLET_LANDSCAPE -&gt; TabletLayout()\n        DeviceConfiguration.DESKTOP -&gt; DesktopLayout()\n    }\n}\n</code></pre> <p>That's it! Your app now automatically adapts to any screen size.</p>"},{"location":"seo-landing/#trusted-by-leading-companies","title":"\ud83c\udfe2 Trusted by Leading Companies","text":"<p>\"Composive reduced our development time by 70% while delivering native-quality UIs across all platforms.\"</p> <p>\u2014 Senior Android Developer, Fortune 500 Company</p> <p>\"The best Kotlin Multiplatform UI library we've used. Responsive design that just works.\"</p> <p>\u2014 Mobile Team Lead, Startup Unicorn</p> <p>\"Composive's automatic theme adaptation saved us months of development.\"</p> <p>\u2014 CTO, FinTech Company</p>"},{"location":"seo-landing/#performance-benchmarks","title":"\ud83d\udcca Performance Benchmarks","text":""},{"location":"seo-landing/#build-time-comparison","title":"Build Time Comparison","text":"Library Clean Build Incremental Build Composive 45s 3s Competitor A 2m 15s 12s Custom Solution 5m+ 30s+"},{"location":"seo-landing/#runtime-performance","title":"Runtime Performance","text":"<ul> <li>Memory Usage: 40% less than alternatives</li> <li>Startup Time: 2x faster app launches</li> <li>Frame Rate: Consistent 60fps on all platforms</li> </ul>"},{"location":"seo-landing/#latest-features-2025","title":"\ud83d\udd25 Latest Features (2025)","text":""},{"location":"seo-landing/#new-in-version-102","title":"New in Version 1.0.2","text":"<ul> <li>\u2728 Enhanced Web Support - Full Kotlin/Wasm compatibility</li> <li>\ud83c\udfa8 Advanced Theming - Custom theme builder</li> <li>\ud83d\udcf1 Smart Responsive Grid - Automatic column calculation</li> <li>\ud83d\ude80 Performance Boost - 50% faster rendering</li> <li>\ud83d\udee0\ufe0f Developer Tools - Built-in debugging utilities</li> </ul>"},{"location":"seo-landing/#coming-soon","title":"Coming Soon","text":"<ul> <li>\ud83e\udd16 AI-Powered Layouts - Automatic layout optimization</li> <li>\ud83c\udf10 Progressive Web App - PWA-ready components</li> <li>\ud83d\udcca Analytics Integration - Built-in usage tracking</li> <li>\ud83c\udfad Animation Framework - Smooth cross-platform animations</li> </ul>"},{"location":"seo-landing/#learning-resources","title":"\ud83c\udf93 Learning Resources","text":""},{"location":"seo-landing/#free-courses","title":"\ud83d\udcda Free Courses","text":"<ul> <li>Kotlin Multiplatform Mastery - Complete beginner guide</li> <li>Responsive Design Patterns - Real-world examples</li> <li>Advanced Theming - Custom theme creation</li> </ul>"},{"location":"seo-landing/#video-tutorials","title":"\ud83c\udfa5 Video Tutorials","text":"<ul> <li>Building Your First Responsive App (15 min)</li> <li>Advanced Layout Techniques (30 min)</li> <li>Performance Optimization Tips (20 min)</li> </ul>"},{"location":"seo-landing/#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>Complete API Reference - Every function documented</li> <li>Migration Guide - Upgrade from other libraries</li> <li>Best Practices - Production-ready patterns</li> </ul>"},{"location":"seo-landing/#community-support","title":"\ud83c\udf1f Community &amp; Support","text":""},{"location":"seo-landing/#active-community","title":"\ud83d\udcac Active Community","text":"<ul> <li>5,000+ Developers in our community</li> <li>Daily discussions on GitHub</li> <li>Weekly office hours with maintainers</li> <li>Monthly community calls</li> </ul>"},{"location":"seo-landing/#professional-support","title":"\ud83d\udedf Professional Support","text":"<ul> <li>Priority bug fixes for enterprise customers</li> <li>Custom feature development</li> <li>Training workshops for teams</li> <li>24/7 support for critical issues</li> </ul>"},{"location":"seo-landing/#awards-recognition","title":"\ud83c\udfc6 Awards &amp; Recognition","text":""},{"location":"seo-landing/#2024-awards","title":"2024 Awards","text":"<ul> <li>\ud83e\udd47 Best Kotlin Multiplatform Library - Android Developer Awards</li> <li>\ud83e\udd48 Most Innovative UI Framework - Mobile World Congress</li> <li>\ud83e\udd49 Developer's Choice - JetBrains Awards</li> </ul>"},{"location":"seo-landing/#press-coverage","title":"Press Coverage","text":"<ul> <li>Featured in Android Weekly (5 times)</li> <li>Kotlin Blog spotlight article</li> <li>InfoQ architecture review</li> <li>DZone best practices guide</li> </ul>"},{"location":"seo-landing/#adoption-statistics","title":"\ud83d\udcc8 Adoption Statistics","text":""},{"location":"seo-landing/#global-usage","title":"Global Usage","text":"<ul> <li>50+ Countries using Composive</li> <li>1M+ Downloads from Maven Central</li> <li>10,000+ Apps built with Composive</li> <li>95% Developer Satisfaction rating</li> </ul>"},{"location":"seo-landing/#platform-distribution","title":"Platform Distribution","text":"<ul> <li>45% Android-first projects</li> <li>30% iOS-first projects</li> <li>20% Desktop applications</li> <li>5% Web applications</li> </ul>"},{"location":"seo-landing/#future-roadmap","title":"\ud83d\udd2e Future Roadmap","text":""},{"location":"seo-landing/#2025-goals","title":"2025 Goals","text":"<ul> <li>10M+ Downloads target</li> <li>100+ Contributors to the project</li> <li>Enterprise Features for large teams</li> <li>AI Integration for smart layouts</li> </ul>"},{"location":"seo-landing/#long-term-vision","title":"Long-term Vision","text":"<p>Making Kotlin Multiplatform UI development as easy as single-platform development, with zero compromises on performance, design quality, or developer experience.</p>"},{"location":"seo-landing/#start-building-today","title":"\ud83d\ude80 Start Building Today","text":"<p>Ready to join thousands of developers building amazing cross-platform apps with Composive?</p> <p>Download from Maven Central \u2192 View Documentation \u2192 See Examples \u2192</p>"},{"location":"seo-landing/#quick-links","title":"Quick Links","text":"<ul> <li>\ud83d\udce6 Maven Central</li> <li>\ud83d\udc19 GitHub Repository</li> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udcac Community Discussions</li> <li>\ud83d\udc1b Report Issues</li> </ul> <p>Join the Composive revolution and build the future of cross-platform development! \ud83d\ude80</p> <p>Last updated: January 2025 | Version 1.0.2 | 1M+ downloads </p>"},{"location":"typography/","title":"Typography System \ud83d\udcdd","text":"<p>Master Composive's responsive typography system that automatically scales text across all screen sizes and platforms.</p>"},{"location":"typography/#overview","title":"\ud83c\udfaf Overview","text":"<p>Composive provides responsive typography that: - Automatically scales based on screen size - Adapts to platforms (Material 3 on Android, Cupertino on iOS) - Supports custom fonts across all text styles - Maintains readability at all sizes - Follows design guidelines for each platform</p>"},{"location":"typography/#typography-scales","title":"\ud83d\udcf1 Typography Scales","text":""},{"location":"typography/#scale-overview","title":"Scale Overview","text":"Screen Size Use Case Typography Focus Small Mobile portrait Compact, efficient Compact Mobile landscape Slightly larger Medium Tablets Generous spacing Large Desktop Maximum impact"},{"location":"typography/#material-typography-scales","title":"Material Typography Scales","text":"<pre><code>// Small screens (mobile portrait)\nAppTheme.materialTypography.headlineLarge  // 30sp\nAppTheme.materialTypography.bodyLarge      // 16sp\nAppTheme.materialTypography.labelMedium    // 12sp\n\n// Large screens (desktop)\nAppTheme.materialTypography.headlineLarge  // 50sp\nAppTheme.materialTypography.bodyLarge      // 29sp\nAppTheme.materialTypography.labelMedium    // 20sp\n</code></pre>"},{"location":"typography/#cupertino-typography-scales","title":"Cupertino Typography Scales","text":"<pre><code>// Small screens (mobile)\nAppTheme.cupertinoTypography.largeTitle    // 30sp\nAppTheme.cupertinoTypography.body          // 16sp\nAppTheme.cupertinoTypography.caption1      // 11sp\n\n// Large screens (desktop)\nAppTheme.cupertinoTypography.largeTitle    // 50sp\nAppTheme.cupertinoTypography.body          // 24sp\nAppTheme.cupertinoTypography.caption1      // 16sp\n</code></pre>"},{"location":"typography/#using-typography","title":"\ud83c\udfa8 Using Typography","text":""},{"location":"typography/#basic-usage","title":"Basic Usage","text":"<pre><code>@Composable\nfun TypographyExample() {\n    Column {\n        Text(\n            text = \"Responsive Headline\",\n            style = AppTheme.materialTypography.headlineLarge,\n            fontWeight = AppTheme.fontWeights.bold\n        )\n\n        Text(\n            text = \"This body text automatically scales based on screen size\",\n            style = AppTheme.materialTypography.bodyLarge\n        )\n\n        Text(\n            text = \"Small label text\",\n            style = AppTheme.materialTypography.labelMedium,\n            color = LocalContentColor.current.copy(alpha = 0.7f)\n        )\n    }\n}\n</code></pre>"},{"location":"typography/#platform-adaptive-typography","title":"Platform-Adaptive Typography","text":"<pre><code>@Composable\nfun AdaptiveText(text: String) {\n    val platform = AppTheme.platform\n\n    Text(\n        text = text,\n        style = when {\n            platform.isAndroid() -&gt; AppTheme.materialTypography.headlineSmall\n            platform.isIOS() -&gt; AppTheme.cupertinoTypography.title1\n            else -&gt; AppTheme.materialTypography.headlineSmall\n        }\n    )\n}\n</code></pre>"},{"location":"typography/#font-customization","title":"\ud83d\udd24 Font Customization","text":""},{"location":"typography/#setting-custom-fonts","title":"Setting Custom Fonts","text":"<pre><code>// Apply custom fonts to Material typography\nComposiveTheme(\n    configuration = responsiveConfiguration {\n        withCustomMaterialFonts(\n            displayFont = FontFamily.Serif,        // Headlines\n            bodyFont = FontFamily.SansSerif,       // Body text\n            labelFont = FontFamily.Monospace       // Labels\n        )\n    }\n) {\n    MyApp()\n}\n</code></pre>"},{"location":"typography/#font-family-configuration","title":"Font Family Configuration","text":"<pre><code>// Define custom font families\nval brandFontFamily = FontFamily(\n    Font(Res.font.brand_regular, FontWeight.Normal),\n    Font(Res.font.brand_medium, FontWeight.Medium),\n    Font(Res.font.brand_bold, FontWeight.Bold)\n)\n\nval readingFontFamily = FontFamily(\n    Font(Res.font.reading_regular, FontWeight.Normal),\n    Font(Res.font.reading_medium, FontWeight.Medium)\n)\n\n// Use in configuration\nresponsiveConfiguration {\n    withMaterialReadingDisplayFonts(\n        readingFont = readingFontFamily,    // Body, titles\n        displayFont = brandFontFamily,      // Headlines\n        labelFont = FontFamily.Default      // Labels\n    )\n}\n</code></pre>"},{"location":"typography/#universal-font-setup","title":"Universal Font Setup","text":"<pre><code>// Same font across all platforms and styles\nresponsiveConfiguration {\n    withUniversalFont(FontFamily.SansSerif)\n}\n\n// Or platform-specific fonts\nresponsiveConfiguration {\n    withCustomMaterialFonts(bodyFont = robotoFont)\n    withCustomCupertinoFonts(bodyFont = sfProFont)\n}\n</code></pre>"},{"location":"typography/#font-weights","title":"\u2696\ufe0f Font Weights","text":""},{"location":"typography/#responsive-font-weights","title":"Responsive Font Weights","text":"<p>Font weights automatically adapt to screen sizes for optimal hierarchy:</p> <pre><code>@Composable\nfun FontWeightExample() {\n    Column {\n        Text(\n            text = \"Bold Headline\",\n            style = AppTheme.materialTypography.headlineMedium,\n            fontWeight = AppTheme.fontWeights.bold\n        )\n\n        Text(\n            text = \"Semi-bold subtitle\",\n            style = AppTheme.materialTypography.titleMedium,\n            fontWeight = AppTheme.fontWeights.semiBold\n        )\n\n        Text(\n            text = \"Regular body text\",\n            style = AppTheme.materialTypography.bodyLarge,\n            fontWeight = AppTheme.fontWeights.normal\n        )\n\n        Text(\n            text = \"Light caption\",\n            style = AppTheme.materialTypography.labelMedium,\n            fontWeight = AppTheme.fontWeights.light\n        )\n    }\n}\n</code></pre>"},{"location":"typography/#semantic-font-weights","title":"Semantic Font Weights","text":"<p>Use semantic weights for consistent text hierarchy:</p> <pre><code>@Composable\nfun SemanticFontWeightExample() {\n    Column {\n        Text(\n            text = \"Display Title\",\n            style = AppTheme.materialTypography.displayLarge,\n            fontWeight = AppTheme.fontWeights.display\n        )\n\n        Text(\n            text = \"Section Heading\",\n            style = AppTheme.materialTypography.headlineMedium,\n            fontWeight = AppTheme.fontWeights.heading\n        )\n\n        Text(\n            text = \"This is body text with consistent weight\",\n            style = AppTheme.materialTypography.bodyLarge,\n            fontWeight = AppTheme.fontWeights.body\n        )\n\n        Text(\n            text = \"Emphasized content\",\n            style = AppTheme.materialTypography.bodyLarge,\n            fontWeight = AppTheme.fontWeights.emphasis\n        )\n\n        Text(\n            text = \"Small caption text\",\n            style = AppTheme.materialTypography.labelSmall,\n            fontWeight = AppTheme.fontWeights.caption\n        )\n    }\n}\n</code></pre>"},{"location":"typography/#custom-font-weights","title":"Custom Font Weights","text":"<pre><code>responsiveConfiguration {\n    withCustomFontWeights(\n        small = ResponsiveFontWeights(\n            // Basic weights\n            light = FontWeight.Light,\n            normal = FontWeight.Normal,\n            medium = FontWeight.Medium,\n            semiBold = FontWeight.SemiBold,\n            bold = FontWeight.Bold,\n            extraBold = FontWeight.ExtraBold,\n\n            // Semantic weights for mobile\n            body = FontWeight.Normal,\n            emphasis = FontWeight.Medium,\n            heading = FontWeight.SemiBold,\n            display = FontWeight.Bold,\n            button = FontWeight.Medium,\n            caption = FontWeight.Light\n        ),\n        large = ResponsiveFontWeights(\n            // Different weights for large screens\n            light = FontWeight.ExtraLight,\n            normal = FontWeight.Light,\n            medium = FontWeight.Normal,\n            semiBold = FontWeight.Medium,\n            bold = FontWeight.SemiBold,\n            extraBold = FontWeight.Bold,\n\n            // Semantic weights for desktop\n            body = FontWeight.Light,\n            emphasis = FontWeight.Normal,\n            heading = FontWeight.Medium,\n            display = FontWeight.SemiBold,\n            button = FontWeight.Normal,\n            caption = FontWeight.ExtraLight\n        )\n    )\n}\n</code></pre>"},{"location":"typography/#typography-patterns","title":"\ud83d\udcd0 Typography Patterns","text":""},{"location":"typography/#hierarchical-text","title":"Hierarchical Text","text":"<pre><code>@Composable\nfun ArticleContent() {\n    LazyColumn(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space3),\n        contentPadding = PaddingValues(AppTheme.dimensions.screenPaddingHorizontal)\n    ) {\n        item {\n            // Main headline\n            Text(\n                text = \"Article Title\",\n                style = AppTheme.materialTypography.headlineLarge,\n                fontWeight = AppTheme.fontWeights.bold\n            )\n        }\n\n        item {\n            // Subtitle\n            Text(\n                text = \"Article subtitle with additional context\",\n                style = AppTheme.materialTypography.headlineSmall,\n                fontWeight = AppTheme.fontWeights.medium,\n                color = LocalContentColor.current.copy(alpha = 0.8f)\n            )\n        }\n\n        item {\n            // Metadata\n            Text(\n                text = \"By Author Name \u2022 5 min read\",\n                style = AppTheme.materialTypography.labelLarge,\n                color = LocalContentColor.current.copy(alpha = 0.6f)\n            )\n        }\n\n        item {\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space4))\n        }\n\n        item {\n            // Section header\n            Text(\n                text = \"Introduction\",\n                style = AppTheme.materialTypography.titleLarge,\n                fontWeight = AppTheme.fontWeights.semiBold\n            )\n        }\n\n        item {\n            // Body paragraph\n            Text(\n                text = \"This is a paragraph of body text that demonstrates how responsive typography scales automatically based on screen size...\",\n                style = AppTheme.materialTypography.bodyLarge,\n                lineHeight = AppTheme.materialTypography.bodyLarge.lineHeight!! * 1.4\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"typography/#responsive-card-typography","title":"Responsive Card Typography","text":"<pre><code>@Composable\nfun ResponsiveCard(\n    title: String,\n    subtitle: String,\n    description: String\n) {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    Card {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            // Title scales based on device\n            Text(\n                text = title,\n                style = when (deviceConfig) {\n                    DeviceConfiguration.MOBILE_PORTRAIT -&gt; AppTheme.materialTypography.titleMedium\n                    DeviceConfiguration.DESKTOP -&gt; AppTheme.materialTypography.headlineSmall\n                    else -&gt; AppTheme.materialTypography.titleLarge\n                },\n                fontWeight = AppTheme.fontWeights.bold,\n                maxLines = 2,\n                overflow = TextOverflow.Ellipsis\n            )\n\n            if (subtitle.isNotEmpty()) {\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space1))\n\n                Text(\n                    text = subtitle,\n                    style = AppTheme.materialTypography.titleSmall,\n                    fontWeight = AppTheme.fontWeights.medium,\n                    color = LocalContentColor.current.copy(alpha = 0.8f)\n                )\n            }\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n\n            Text(\n                text = description,\n                style = AppTheme.materialTypography.bodyMedium,\n                maxLines = if (deviceConfig.isMobile()) 3 else 5,\n                overflow = TextOverflow.Ellipsis\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"typography/#advanced-typography","title":"\ud83c\udfa8 Advanced Typography","text":""},{"location":"typography/#custom-typography-scales","title":"Custom Typography Scales","text":"<pre><code>import androidx.compose.material3.Typography\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.sp\n\n// Create completely custom typography for specific screens\nval customMobileTypography = Typography(\n    headlineLarge = TextStyle(\n        fontSize = 28.sp,\n        fontWeight = FontWeight.Bold,\n        lineHeight = 32.sp\n    ),\n    bodyLarge = TextStyle(\n        fontSize = 16.sp,\n        fontWeight = FontWeight.Normal,\n        lineHeight = 24.sp\n    )\n)\n\nval customDesktopTypography = Typography(\n    headlineLarge = TextStyle(\n        fontSize = 48.sp,\n        fontWeight = FontWeight.Bold,\n        lineHeight = 56.sp\n    ),\n    bodyLarge = TextStyle(\n        fontSize = 20.sp,\n        fontWeight = FontWeight.Normal,\n        lineHeight = 28.sp\n    )\n)\n\nresponsiveConfiguration {\n    withCustomMaterialTypography(\n        small = customMobileTypography,\n        large = customDesktopTypography\n    )\n}\n</code></pre>"},{"location":"typography/#dynamic-typography","title":"Dynamic Typography","text":"<pre><code>@Composable\nfun DynamicText(\n    text: String,\n    emphasize: Boolean = false\n) {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    val style = when {\n        emphasize &amp;&amp; deviceConfig.isDesktop() -&gt; AppTheme.materialTypography.headlineMedium\n        emphasize -&gt; AppTheme.materialTypography.titleLarge\n        deviceConfig.isMobile() -&gt; AppTheme.materialTypography.bodyMedium\n        else -&gt; AppTheme.materialTypography.bodyLarge\n    }\n\n    val fontWeight = when {\n        emphasize -&gt; AppTheme.fontWeights.bold\n        deviceConfig.isDesktop() -&gt; AppTheme.fontWeights.medium\n        else -&gt; AppTheme.fontWeights.normal\n    }\n\n    Text(\n        text = text,\n        style = style,\n        fontWeight = fontWeight\n    )\n}\n</code></pre>"},{"location":"typography/#typography-guidelines","title":"\ud83d\udd24 Typography Guidelines","text":""},{"location":"typography/#material-design-typography","title":"Material Design Typography","text":"<p>Follow Material Design principles:</p> <pre><code>@Composable\nfun MaterialTypographyGuide() {\n    Column(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space2)\n    ) {\n        // Display - Largest text, short and impactful\n        Text(\n            text = \"Display Large\",\n            style = AppTheme.materialTypography.displayLarge,\n            fontWeight = AppTheme.fontWeights.bold\n        )\n\n        // Headline - High-emphasis text\n        Text(\n            text = \"Headline Medium\",\n            style = AppTheme.materialTypography.headlineMedium,\n            fontWeight = AppTheme.fontWeights.semiBold\n        )\n\n        // Title - Medium-emphasis text\n        Text(\n            text = \"Title Large\",\n            style = AppTheme.materialTypography.titleLarge,\n            fontWeight = AppTheme.fontWeights.medium\n        )\n\n        // Body - Main text content\n        Text(\n            text = \"Body Large - This is the main text content that users will read most frequently.\",\n            style = AppTheme.materialTypography.bodyLarge\n        )\n\n        // Label - UI elements, buttons\n        Text(\n            text = \"Label Medium\",\n            style = AppTheme.materialTypography.labelMedium,\n            fontWeight = AppTheme.fontWeights.medium\n        )\n    }\n}\n</code></pre>"},{"location":"typography/#cupertino-typography","title":"Cupertino Typography","text":"<p>Follow iOS Human Interface Guidelines:</p> <pre><code>@Composable\nfun CupertinoTypographyGuide() {\n    Column(\n        verticalArrangement = Arrangement.spacedBy(AppTheme.dimensions.space2)\n    ) {\n        // Large Title - Navigation bars, large text\n        Text(\n            text = \"Large Title\",\n            style = AppTheme.cupertinoTypography.largeTitle,\n            fontWeight = AppTheme.fontWeights.bold\n        )\n\n        // Title 1 - Primary titles\n        Text(\n            text = \"Title 1\",\n            style = AppTheme.cupertinoTypography.title1,\n            fontWeight = AppTheme.fontWeights.semiBold\n        )\n\n        // Headline - Emphasized text\n        Text(\n            text = \"Headline\",\n            style = AppTheme.cupertinoTypography.headline,\n            fontWeight = AppTheme.fontWeights.semiBold\n        )\n\n        // Body - Main content\n        Text(\n            text = \"Body text that provides the main content and information to users.\",\n            style = AppTheme.cupertinoTypography.body\n        )\n\n        // Caption - Supplementary content\n        Text(\n            text = \"Caption 1\",\n            style = AppTheme.cupertinoTypography.caption1,\n            color = LocalContentColor.current.copy(alpha = 0.6f)\n        )\n    }\n}\n</code></pre>"},{"location":"typography/#testing-typography","title":"\ud83e\uddea Testing Typography","text":""},{"location":"typography/#typography-debug-component","title":"Typography Debug Component","text":"<pre><code>@Composable\nfun TypographyDebug() {\n    val deviceConfig = rememberDeviceConfiguration()\n\n    LazyColumn {\n        item {\n            Text(\n                \"Typography Debug - ${deviceConfig}\",\n                style = AppTheme.materialTypography.headlineSmall,\n                fontWeight = AppTheme.fontWeights.bold\n            )\n        }\n\n        // Material Typography\n        item {\n            TypographySection(\n                title = \"Material Typography\",\n                styles = listOf(\n                    \"Display Large\" to AppTheme.materialTypography.displayLarge,\n                    \"Headline Large\" to AppTheme.materialTypography.headlineLarge,\n                    \"Title Large\" to AppTheme.materialTypography.titleLarge,\n                    \"Body Large\" to AppTheme.materialTypography.bodyLarge,\n                    \"Label Large\" to AppTheme.materialTypography.labelLarge\n                )\n            )\n        }\n\n        // Cupertino Typography\n        item {\n            TypographySection(\n                title = \"Cupertino Typography\",\n                styles = listOf(\n                    \"Large Title\" to AppTheme.cupertinoTypography.largeTitle,\n                    \"Title 1\" to AppTheme.cupertinoTypography.title1,\n                    \"Headline\" to AppTheme.cupertinoTypography.headline,\n                    \"Body\" to AppTheme.cupertinoTypography.body,\n                    \"Caption 1\" to AppTheme.cupertinoTypography.caption1\n                )\n            )\n        }\n    }\n}\n\n@Composable\nfun TypographySection(\n    title: String,\n    styles: List&lt;Pair&lt;String, TextStyle&gt;&gt;\n) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(AppTheme.dimensions.cardSpacing)\n    ) {\n        Column(\n            modifier = Modifier.padding(AppTheme.dimensions.cardPadding)\n        ) {\n            Text(\n                text = title,\n                style = AppTheme.materialTypography.titleLarge,\n                fontWeight = AppTheme.fontWeights.bold\n            )\n\n            Spacer(modifier = Modifier.height(AppTheme.dimensions.space3))\n\n            styles.forEach { (name, style) -&gt;\n                Text(\n                    text = \"$name (${style.fontSize})\",\n                    style = style\n                )\n                Spacer(modifier = Modifier.height(AppTheme.dimensions.space2))\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"typography/#typography-reference","title":"\ud83d\udcca Typography Reference","text":""},{"location":"typography/#font-size-scaling","title":"Font Size Scaling","text":"Screen Display Headline Title Body Label Small 23sp 30sp 20sp 16sp 14sp Compact 26sp 35sp 23sp 18sp 16sp Medium 30sp 40sp 27sp 20sp 18sp Large 39sp 50sp 36sp 29sp 24sp"},{"location":"typography/#line-height-recommendations","title":"Line Height Recommendations","text":"<pre><code>@Composable\nfun OptimalLineHeightExamples() {\n    Column {\n        // Body text with optimal line height for readability\n        Text(\n            text = \"This is body text with optimized line height for better readability...\",\n            style = AppTheme.materialTypography.bodyLarge.copy(\n                lineHeight = AppTheme.materialTypography.bodyLarge.lineHeight!! * 1.4\n            ),\n            fontWeight = AppTheme.fontWeights.body\n        )\n\n        Spacer(modifier = Modifier.height(AppTheme.dimensions.space4))\n\n        // Headline with tighter line height for impact\n        Text(\n            text = \"Impactful Headline Text\",\n            style = AppTheme.materialTypography.headlineLarge.copy(\n                lineHeight = AppTheme.materialTypography.headlineLarge.lineHeight!! * 1.2\n            ),\n            fontWeight = AppTheme.fontWeights.heading\n        )\n    }\n}\n\n// For reusable text styles, create them inside @Composable functions\n@Composable\nfun getBodyTextStyle() = AppTheme.materialTypography.bodyLarge.copy(\n    lineHeight = AppTheme.materialTypography.bodyLarge.lineHeight!! * 1.4,\n    fontWeight = AppTheme.fontWeights.body\n)\n\n@Composable\nfun getHeadlineStyle() = AppTheme.materialTypography.headlineLarge.copy(\n    lineHeight = AppTheme.materialTypography.headlineLarge.lineHeight!! * 1.2,\n    fontWeight = AppTheme.fontWeights.heading\n)\n</code></pre>"},{"location":"typography/#important-apptheme-typography-context","title":"\ud83d\udea8 Important: AppTheme Typography Context","text":"<p>\u274c Cannot use AppTheme typography outside @Composable functions: <pre><code>// \u274c This will cause compilation error\nval customTextStyle = AppTheme.materialTypography.bodyLarge.copy(\n    fontWeight = AppTheme.fontWeights.bold  // Error: AppTheme not available here\n)\n\n// \u274c This will also fail\nobject TextStyles {\n    val heading = AppTheme.materialTypography.headlineLarge  // Error!\n}\n</code></pre></p> <p>\u2705 Can use AppTheme typography inside @Composable functions: <pre><code>@Composable\nfun MyText() {\n    // \u2705 This works - inside @Composable context\n    Text(\n        text = \"Hello World\",\n        style = AppTheme.materialTypography.bodyLarge,\n        fontWeight = AppTheme.fontWeights.body\n    )\n}\n\n@Composable\nfun getCustomTextStyle() = AppTheme.materialTypography.bodyLarge.copy(\n    fontWeight = AppTheme.fontWeights.bold,\n    lineHeight = AppTheme.materialTypography.bodyLarge.lineHeight!! * 1.4\n)\n</code></pre></p> <p>\u2705 Use hardcoded values in configuration context: <pre><code>// \u2705 This works - using hardcoded FontWeight values\nresponsiveConfiguration {\n    withCustomFontWeights(\n        small = ResponsiveFontWeights(\n            body = FontWeight.Normal,      // Hardcoded FontWeight\n            heading = FontWeight.SemiBold\n        )\n    )\n}\n</code></pre></p>"},{"location":"typography/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"typography/#1-use-semantic-typography","title":"1. Use Semantic Typography","text":"<pre><code>// \u2705 Good - Semantic usage\nText(\n    text = \"Article Title\", \n    style = AppTheme.materialTypography.headlineLarge\n)\n\n// \u274c Avoid - Size-based naming\nText(\n    text = \"Article Title\", \n    style = TextStyle(fontSize = 30.sp)\n)\n</code></pre>"},{"location":"typography/#2-maintain-hierarchy","title":"2. Maintain Hierarchy","text":"<pre><code>// \u2705 Good - Clear hierarchy\nColumn {\n    Text(\"Main Title\", style = AppTheme.materialTypography.headlineLarge)\n    Text(\"Subtitle\", style = AppTheme.materialTypography.titleMedium)\n    Text(\"Body text\", style = AppTheme.materialTypography.bodyLarge)\n}\n</code></pre>"},{"location":"typography/#3-consider-reading-distance","title":"3. Consider Reading Distance","text":"<pre><code>// \u2705 Good - Adapt to screen size\nval textStyle = when (rememberDeviceConfiguration()) {\n    DeviceConfiguration.MOBILE_PORTRAIT -&gt; AppTheme.materialTypography.bodyMedium\n    DeviceConfiguration.DESKTOP -&gt; AppTheme.materialTypography.bodyLarge\n    else -&gt; AppTheme.materialTypography.bodyMedium\n}\n</code></pre>"},{"location":"typography/#related-apis","title":"\ud83d\udd17 Related APIs","text":"<ul> <li>API Reference - Complete typography API</li> <li>Configuration - Font customization &amp; theming</li> <li>Responsive Dimensions - Spacing system</li> </ul> <p>Master responsive typography for perfect readability on every screen! \ud83d\udcdd\u2728 </p>"}]}